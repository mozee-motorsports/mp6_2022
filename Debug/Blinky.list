
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c20  08009c20  00019c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009c24  08009c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08009c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  08009c9c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  08009cfc  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  24000134  08009d5c  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003a8  08009d5c  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eed2  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c55  00000000  00000000  0003f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00041c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00043368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000369fa  00000000  00000000  00044938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4a0  00000000  00000000  0007b332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016995a  00000000  00000000  000967d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020012c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  0020017c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000134 	.word	0x24000134
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009b2c 	.word	0x08009b2c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000138 	.word	0x24000138
 800030c:	08009b2c 	.word	0x08009b2c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f001 f8bc 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006c0:	f002 fcb6 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_Init+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	4913      	ldr	r1, [pc, #76]	; (8000720 <HAL_Init+0x6c>)
 80006d2:	5ccb      	ldrb	r3, [r1, r3]
 80006d4:	f003 031f 	and.w	r3, r3, #31
 80006d8:	fa22 f303 	lsr.w	r3, r2, r3
 80006dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_Init+0x68>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_Init+0x6c>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	f003 031f 	and.w	r3, r3, #31
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	fa22 f303 	lsr.w	r3, r2, r3
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <HAL_Init+0x70>)
 80006f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_Init+0x74>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f814 	bl	800072c <HAL_InitTick>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e002      	b.n	8000714 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800070e:	f007 fec1 	bl	8008494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58024400 	.word	0x58024400
 8000720:	08009b70 	.word	0x08009b70
 8000724:	2400000c 	.word	0x2400000c
 8000728:	24000008 	.word	0x24000008

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_InitTick+0x60>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	e021      	b.n	8000784 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <HAL_InitTick+0x64>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_InitTick+0x60>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f893 	bl	8001882 <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f001 f86b 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_InitTick+0x68>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	24000004 	.word	0x24000004
 8000790:	24000008 	.word	0x24000008
 8000794:	24000000 	.word	0x24000000

08000798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x20>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_IncTick+0x24>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_IncTick+0x24>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	24000004 	.word	0x24000004
 80007bc:	24000150 	.word	0x24000150

080007c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_GetTick+0x14>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	24000150 	.word	0x24000150

080007d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e0:	f7ff ffee 	bl	80007c0 <HAL_GetTick>
 80007e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f0:	d005      	beq.n	80007fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_Delay+0x44>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fe:	bf00      	nop
 8000800:	f7ff ffde 	bl	80007c0 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d8f7      	bhi.n	8000800 <HAL_Delay+0x28>
  {
  }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24000004 	.word	0x24000004

08000820 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000830:	4904      	ldr	r1, [pc, #16]	; (8000844 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4313      	orrs	r3, r2
 8000836:	604b      	str	r3, [r1, #4]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58000400 	.word	0x58000400

08000848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	431a      	orrs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	609a      	str	r2, [r3, #8]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f003 031f 	and.w	r3, r3, #31
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80008da:	4013      	ands	r3, r2
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6093      	str	r3, [r2, #8]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	5fffffc0 	.word	0x5fffffc0

080008f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000904:	d101      	bne.n	800090a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <LL_ADC_EnableInternalRegulator+0x24>)
 8000926:	4013      	ands	r3, r2
 8000928:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	6fffffc0 	.word	0x6fffffc0

08000940 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000954:	d101      	bne.n	800095a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <LL_ADC_Enable+0x24>)
 8000976:	4013      	ands	r3, r2
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	7fffffc0 	.word	0x7fffffc0

08000990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d101      	bne.n	80009a8 <LL_ADC_IsEnabled+0x18>
 80009a4:	2301      	movs	r3, #1
 80009a6:	e000      	b.n	80009aa <LL_ADC_IsEnabled+0x1a>
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <LL_ADC_REG_StartConversion+0x24>)
 80009c6:	4013      	ands	r3, r2
 80009c8:	f043 0204 	orr.w	r2, r3, #4
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	7fffffc0 	.word	0x7fffffc0

080009e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d101      	bne.n	80009f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	2b08      	cmp	r3, #8
 8000a18:	d101      	bne.n	8000a1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e1ee      	b.n	8000e24 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f007 fd37 	bl	80084c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff3f 	bl	80008f0 <LL_ADC_IsDeepPowerDownEnabled>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff25 	bl	80008cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff5a 	bl	8000940 <LL_ADC_IsInternalRegulatorEnabled>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d114      	bne.n	8000abc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff3e 	bl	8000918 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a9c:	4b8e      	ldr	r3, [pc, #568]	; (8000cd8 <HAL_ADC_Init+0x2ac>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	099b      	lsrs	r3, r3, #6
 8000aa2:	4a8e      	ldr	r2, [pc, #568]	; (8000cdc <HAL_ADC_Init+0x2b0>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000aae:	e002      	b.n	8000ab6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f9      	bne.n	8000ab0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff3d 	bl	8000940 <LL_ADC_IsInternalRegulatorEnabled>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10d      	bne.n	8000ae8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad0:	f043 0210 	orr.w	r2, r3, #16
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000adc:	f043 0201 	orr.w	r2, r3, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff77 	bl	80009e0 <LL_ADC_REG_IsConversionOngoing>
 8000af2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f040 8188 	bne.w	8000e12 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f040 8184 	bne.w	8000e12 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b12:	f043 0202 	orr.w	r2, r3, #2
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff36 	bl	8000990 <LL_ADC_IsEnabled>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d136      	bne.n	8000b98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a6c      	ldr	r2, [pc, #432]	; (8000ce0 <HAL_ADC_Init+0x2b4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d004      	beq.n	8000b3e <HAL_ADC_Init+0x112>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a6a      	ldr	r2, [pc, #424]	; (8000ce4 <HAL_ADC_Init+0x2b8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10e      	bne.n	8000b5c <HAL_ADC_Init+0x130>
 8000b3e:	4868      	ldr	r0, [pc, #416]	; (8000ce0 <HAL_ADC_Init+0x2b4>)
 8000b40:	f7ff ff26 	bl	8000990 <LL_ADC_IsEnabled>
 8000b44:	4604      	mov	r4, r0
 8000b46:	4867      	ldr	r0, [pc, #412]	; (8000ce4 <HAL_ADC_Init+0x2b8>)
 8000b48:	f7ff ff22 	bl	8000990 <LL_ADC_IsEnabled>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4323      	orrs	r3, r4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf0c      	ite	eq
 8000b54:	2301      	moveq	r3, #1
 8000b56:	2300      	movne	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	e008      	b.n	8000b6e <HAL_ADC_Init+0x142>
 8000b5c:	4862      	ldr	r0, [pc, #392]	; (8000ce8 <HAL_ADC_Init+0x2bc>)
 8000b5e:	f7ff ff17 	bl	8000990 <LL_ADC_IsEnabled>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf0c      	ite	eq
 8000b68:	2301      	moveq	r3, #1
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d012      	beq.n	8000b98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a5a      	ldr	r2, [pc, #360]	; (8000ce0 <HAL_ADC_Init+0x2b4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d004      	beq.n	8000b86 <HAL_ADC_Init+0x15a>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a58      	ldr	r2, [pc, #352]	; (8000ce4 <HAL_ADC_Init+0x2b8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x15e>
 8000b86:	4a59      	ldr	r2, [pc, #356]	; (8000cec <HAL_ADC_Init+0x2c0>)
 8000b88:	e000      	b.n	8000b8c <HAL_ADC_Init+0x160>
 8000b8a:	4a59      	ldr	r2, [pc, #356]	; (8000cf0 <HAL_ADC_Init+0x2c4>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f7ff fe58 	bl	8000848 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a52      	ldr	r2, [pc, #328]	; (8000ce8 <HAL_ADC_Init+0x2bc>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d129      	bne.n	8000bf6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7e5b      	ldrb	r3, [r3, #25]
 8000ba6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8000bac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8000bb2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d013      	beq.n	8000be4 <HAL_ADC_Init+0x1b8>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2b0c      	cmp	r3, #12
 8000bc2:	d00d      	beq.n	8000be0 <HAL_ADC_Init+0x1b4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b1c      	cmp	r3, #28
 8000bca:	d007      	beq.n	8000bdc <HAL_ADC_Init+0x1b0>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b18      	cmp	r3, #24
 8000bd2:	d101      	bne.n	8000bd8 <HAL_ADC_Init+0x1ac>
 8000bd4:	2318      	movs	r3, #24
 8000bd6:	e006      	b.n	8000be6 <HAL_ADC_Init+0x1ba>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e004      	b.n	8000be6 <HAL_ADC_Init+0x1ba>
 8000bdc:	2310      	movs	r3, #16
 8000bde:	e002      	b.n	8000be6 <HAL_ADC_Init+0x1ba>
 8000be0:	2308      	movs	r3, #8
 8000be2:	e000      	b.n	8000be6 <HAL_ADC_Init+0x1ba>
 8000be4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8000be6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	e00e      	b.n	8000c14 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7e5b      	ldrb	r3, [r3, #25]
 8000bfa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c00:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000c06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c0e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d106      	bne.n	8000c2c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	3b01      	subs	r3, #1
 8000c24:	045b      	lsls	r3, r3, #17
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d009      	beq.n	8000c48 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_ADC_Init+0x2bc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d115      	bne.n	8000c7e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <HAL_ADC_Init+0x2c8>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	69b9      	ldr	r1, [r7, #24]
 8000c62:	430b      	orrs	r3, r1
 8000c64:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	e009      	b.n	8000c92 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_ADC_Init+0x2cc>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	69b9      	ldr	r1, [r7, #24]
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fea2 	bl	80009e0 <LL_ADC_REG_IsConversionOngoing>
 8000c9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff feaf 	bl	8000a06 <LL_ADC_INJ_IsConversionOngoing>
 8000ca8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f040 808e 	bne.w	8000dce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 808a 	bne.w	8000dce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_ADC_Init+0x2bc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d11b      	bne.n	8000cfc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7e1b      	ldrb	r3, [r3, #24]
 8000cc8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cd0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	e018      	b.n	8000d0a <HAL_ADC_Init+0x2de>
 8000cd8:	24000008 	.word	0x24000008
 8000cdc:	053e2d63 	.word	0x053e2d63
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	40022100 	.word	0x40022100
 8000ce8:	58026000 	.word	0x58026000
 8000cec:	40022300 	.word	0x40022300
 8000cf0:	58026300 	.word	0x58026300
 8000cf4:	fff04007 	.word	0xfff04007
 8000cf8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e1b      	ldrb	r3, [r3, #24]
 8000d00:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <HAL_ADC_Init+0x400>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	69b9      	ldr	r1, [r7, #24]
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d137      	bne.n	8000d98 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <HAL_ADC_Init+0x404>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d116      	bne.n	8000d66 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <HAL_ADC_Init+0x408>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d4a:	4311      	orrs	r1, r2
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d50:	4311      	orrs	r1, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000d56:	430a      	orrs	r2, r1
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	e020      	b.n	8000da8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <HAL_ADC_Init+0x40c>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d74:	3a01      	subs	r2, #1
 8000d76:	0411      	lsls	r1, r2, #16
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d7c:	4311      	orrs	r1, r2
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d82:	4311      	orrs	r1, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 0201 	orr.w	r2, r2, #1
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	e007      	b.n	8000da8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_ADC_Init+0x404>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d002      	beq.n	8000dce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fa8d 	bl	80012e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10c      	bne.n	8000df0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f023 010f 	bic.w	r1, r3, #15
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
 8000dee:	e007      	b.n	8000e00 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 020f 	bic.w	r2, r2, #15
 8000dfe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e04:	f023 0303 	bic.w	r3, r3, #3
 8000e08:	f043 0201 	orr.w	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	661a      	str	r2, [r3, #96]	; 0x60
 8000e10:	e007      	b.n	8000e22 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f043 0210 	orr.w	r2, r3, #16
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3724      	adds	r7, #36	; 0x24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	ffffbffc 	.word	0xffffbffc
 8000e30:	58026000 	.word	0x58026000
 8000e34:	fc00f81f 	.word	0xfc00f81f
 8000e38:	fc00f81e 	.word	0xfc00f81e

08000e3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <HAL_ADC_Start+0x180>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d004      	beq.n	8000e58 <HAL_ADC_Start+0x1c>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a5b      	ldr	r2, [pc, #364]	; (8000fc0 <HAL_ADC_Start+0x184>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_ADC_Start+0x20>
 8000e58:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <HAL_ADC_Start+0x188>)
 8000e5a:	e000      	b.n	8000e5e <HAL_ADC_Start+0x22>
 8000e5c:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <HAL_ADC_Start+0x18c>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fd18 	bl	8000894 <LL_ADC_GetMultimode>
 8000e64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fdb8 	bl	80009e0 <LL_ADC_REG_IsConversionOngoing>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 809a 	bne.w	8000fac <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_ADC_Start+0x4a>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e095      	b.n	8000fb2 <HAL_ADC_Start+0x176>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f9a0 	bl	80011d4 <ADC_Enable>
 8000e94:	4603      	mov	r3, r0
 8000e96:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 8081 	bne.w	8000fa2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ea4:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <HAL_ADC_Start+0x190>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <HAL_ADC_Start+0x184>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d002      	beq.n	8000ec0 <HAL_ADC_Start+0x84>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	e000      	b.n	8000ec2 <HAL_ADC_Start+0x86>
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <HAL_ADC_Start+0x180>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d002      	beq.n	8000ed0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d105      	bne.n	8000edc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee8:	d106      	bne.n	8000ef8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000eee:	f023 0206 	bic.w	r2, r3, #6
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	665a      	str	r2, [r3, #100]	; 0x64
 8000ef6:	e002      	b.n	8000efe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	221c      	movs	r2, #28
 8000f04:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <HAL_ADC_Start+0x184>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d002      	beq.n	8000f1e <HAL_ADC_Start+0xe2>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	e000      	b.n	8000f20 <HAL_ADC_Start+0xe4>
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_ADC_Start+0x180>)
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d008      	beq.n	8000f3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d002      	beq.n	8000f3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2b09      	cmp	r3, #9
 8000f38:	d114      	bne.n	8000f64 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fd2b 	bl	80009b8 <LL_ADC_REG_StartConversion>
 8000f62:	e025      	b.n	8000fb0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_ADC_Start+0x184>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d002      	beq.n	8000f80 <HAL_ADC_Start+0x144>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	e000      	b.n	8000f82 <HAL_ADC_Start+0x146>
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_ADC_Start+0x180>)
 8000f82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00f      	beq.n	8000fb0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8000fa0:	e006      	b.n	8000fb0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000faa:	e001      	b.n	8000fb0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fac:	2302      	movs	r3, #2
 8000fae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40022100 	.word	0x40022100
 8000fc4:	40022300 	.word	0x40022300
 8000fc8:	58026300 	.word	0x58026300
 8000fcc:	fffff0fe 	.word	0xfffff0fe

08000fd0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a72      	ldr	r2, [pc, #456]	; (80011a8 <HAL_ADC_PollForConversion+0x1d8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d004      	beq.n	8000fee <HAL_ADC_PollForConversion+0x1e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a70      	ldr	r2, [pc, #448]	; (80011ac <HAL_ADC_PollForConversion+0x1dc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_PollForConversion+0x22>
 8000fee:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_ADC_PollForConversion+0x1e0>)
 8000ff0:	e000      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x24>
 8000ff2:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <HAL_ADC_PollForConversion+0x1e4>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fc4d 	bl	8000894 <LL_ADC_GetMultimode>
 8000ffa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d102      	bne.n	800100a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001004:	2308      	movs	r3, #8
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	e037      	b.n	800107a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d002      	beq.n	800101c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d111      	bne.n	8001040 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	f043 0220 	orr.w	r2, r3, #32
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0b1      	b.n	800119e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800103a:	2304      	movs	r3, #4
 800103c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800103e:	e01c      	b.n	800107a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a58      	ldr	r2, [pc, #352]	; (80011a8 <HAL_ADC_PollForConversion+0x1d8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d004      	beq.n	8001054 <HAL_ADC_PollForConversion+0x84>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a57      	ldr	r2, [pc, #348]	; (80011ac <HAL_ADC_PollForConversion+0x1dc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d101      	bne.n	8001058 <HAL_ADC_PollForConversion+0x88>
 8001054:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <HAL_ADC_PollForConversion+0x1e0>)
 8001056:	e000      	b.n	800105a <HAL_ADC_PollForConversion+0x8a>
 8001058:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <HAL_ADC_PollForConversion+0x1e4>)
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fc28 	bl	80008b0 <LL_ADC_GetMultiDMATransfer>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f043 0220 	orr.w	r2, r3, #32
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e093      	b.n	800119e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001076:	2304      	movs	r3, #4
 8001078:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800107a:	f7ff fba1 	bl	80007c0 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001080:	e021      	b.n	80010c6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d01d      	beq.n	80010c6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800108a:	f7ff fb99 	bl	80007c0 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d302      	bcc.n	80010a0 <HAL_ADC_PollForConversion+0xd0>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d112      	bne.n	80010c6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10b      	bne.n	80010c6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	f043 0204 	orr.w	r2, r3, #4
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e06b      	b.n	800119e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0d6      	beq.n	8001082 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fbc2 	bl	800086e <LL_ADC_REG_IsTriggerSourceSWStart>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01c      	beq.n	800112a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7e5b      	ldrb	r3, [r3, #25]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d118      	bne.n	800112a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b08      	cmp	r3, #8
 8001104:	d111      	bne.n	800112a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_ADC_PollForConversion+0x1dc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d002      	beq.n	800113a <HAL_ADC_PollForConversion+0x16a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e000      	b.n	800113c <HAL_ADC_PollForConversion+0x16c>
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_ADC_PollForConversion+0x1d8>)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	4293      	cmp	r3, r2
 8001142:	d008      	beq.n	8001156 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b05      	cmp	r3, #5
 800114e:	d002      	beq.n	8001156 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b09      	cmp	r3, #9
 8001154:	d104      	bne.n	8001160 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	e00c      	b.n	800117a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_ADC_PollForConversion+0x1dc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d002      	beq.n	8001170 <HAL_ADC_PollForConversion+0x1a0>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	e000      	b.n	8001172 <HAL_ADC_PollForConversion+0x1a2>
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_ADC_PollForConversion+0x1d8>)
 8001172:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b08      	cmp	r3, #8
 800117e:	d104      	bne.n	800118a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e008      	b.n	800119c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	220c      	movs	r2, #12
 800119a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40022100 	.word	0x40022100
 80011b0:	40022300 	.word	0x40022300
 80011b4:	58026300 	.word	0x58026300

080011b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fbd5 	bl	8000990 <LL_ADC_IsEnabled>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d16e      	bne.n	80012ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <ADC_Enable+0x100>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00d      	beq.n	8001216 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	f043 0210 	orr.w	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e05a      	b.n	80012cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fba4 	bl	8000968 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001220:	f7ff face 	bl	80007c0 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <ADC_Enable+0x104>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d004      	beq.n	800123a <ADC_Enable+0x66>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <ADC_Enable+0x108>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <ADC_Enable+0x6a>
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <ADC_Enable+0x10c>)
 800123c:	e000      	b.n	8001240 <ADC_Enable+0x6c>
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <ADC_Enable+0x110>)
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fb27 	bl	8000894 <LL_ADC_GetMultimode>
 8001246:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <ADC_Enable+0x108>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d002      	beq.n	8001258 <ADC_Enable+0x84>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	e000      	b.n	800125a <ADC_Enable+0x86>
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <ADC_Enable+0x104>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4293      	cmp	r3, r2
 8001260:	d02c      	beq.n	80012bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d130      	bne.n	80012ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001268:	e028      	b.n	80012bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fb8e 	bl	8000990 <LL_ADC_IsEnabled>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb72 	bl	8000968 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001284:	f7ff fa9c 	bl	80007c0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d914      	bls.n	80012bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d00d      	beq.n	80012bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e007      	b.n	80012cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1cf      	bne.n	800126a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	8000003f 	.word	0x8000003f
 80012d8:	40022000 	.word	0x40022000
 80012dc:	40022100 	.word	0x40022100
 80012e0:	40022300 	.word	0x40022300
 80012e4:	58026300 	.word	0x58026300

080012e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <ADC_ConfigureBoostMode+0x1c0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d004      	beq.n	8001304 <ADC_ConfigureBoostMode+0x1c>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6b      	ldr	r2, [pc, #428]	; (80014ac <ADC_ConfigureBoostMode+0x1c4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d109      	bne.n	8001318 <ADC_ConfigureBoostMode+0x30>
 8001304:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <ADC_ConfigureBoostMode+0x1c8>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	e008      	b.n	800132a <ADC_ConfigureBoostMode+0x42>
 8001318:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <ADC_ConfigureBoostMode+0x1cc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01c      	beq.n	8001368 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800132e:	f001 fff9 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8001332:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800133c:	d010      	beq.n	8001360 <ADC_ConfigureBoostMode+0x78>
 800133e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001342:	d873      	bhi.n	800142c <ADC_ConfigureBoostMode+0x144>
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d002      	beq.n	8001350 <ADC_ConfigureBoostMode+0x68>
 800134a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800134e:	d16d      	bne.n	800142c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	60fb      	str	r3, [r7, #12]
        break;
 800135e:	e068      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	60fb      	str	r3, [r7, #12]
        break;
 8001366:	e064      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001368:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	f003 f9d4 	bl	800471c <HAL_RCCEx_GetPeriphCLKFreq>
 8001374:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800137e:	d051      	beq.n	8001424 <ADC_ConfigureBoostMode+0x13c>
 8001380:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001384:	d854      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 8001386:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800138a:	d047      	beq.n	800141c <ADC_ConfigureBoostMode+0x134>
 800138c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001390:	d84e      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 8001392:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001396:	d03d      	beq.n	8001414 <ADC_ConfigureBoostMode+0x12c>
 8001398:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800139c:	d848      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 800139e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013a2:	d033      	beq.n	800140c <ADC_ConfigureBoostMode+0x124>
 80013a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013a8:	d842      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 80013aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80013ae:	d029      	beq.n	8001404 <ADC_ConfigureBoostMode+0x11c>
 80013b0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80013b4:	d83c      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 80013b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80013ba:	d01a      	beq.n	80013f2 <ADC_ConfigureBoostMode+0x10a>
 80013bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80013c0:	d836      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 80013c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80013c6:	d014      	beq.n	80013f2 <ADC_ConfigureBoostMode+0x10a>
 80013c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80013cc:	d830      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 80013ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013d2:	d00e      	beq.n	80013f2 <ADC_ConfigureBoostMode+0x10a>
 80013d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013d8:	d82a      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 80013da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013de:	d008      	beq.n	80013f2 <ADC_ConfigureBoostMode+0x10a>
 80013e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013e4:	d824      	bhi.n	8001430 <ADC_ConfigureBoostMode+0x148>
 80013e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013ea:	d002      	beq.n	80013f2 <ADC_ConfigureBoostMode+0x10a>
 80013ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013f0:	d11e      	bne.n	8001430 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	60fb      	str	r3, [r7, #12]
        break;
 8001402:	e016      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	60fb      	str	r3, [r7, #12]
        break;
 800140a:	e012      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	60fb      	str	r3, [r7, #12]
        break;
 8001412:	e00e      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	099b      	lsrs	r3, r3, #6
 8001418:	60fb      	str	r3, [r7, #12]
        break;
 800141a:	e00a      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	09db      	lsrs	r3, r3, #7
 8001420:	60fb      	str	r3, [r7, #12]
        break;
 8001422:	e006      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	60fb      	str	r3, [r7, #12]
        break;
 800142a:	e002      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
        break;
 800142c:	bf00      	nop
 800142e:	e000      	b.n	8001432 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001430:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <ADC_ConfigureBoostMode+0x1d0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d808      	bhi.n	8001452 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800144e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001450:	e025      	b.n	800149e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <ADC_ConfigureBoostMode+0x1d4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d80a      	bhi.n	8001470 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800146c:	609a      	str	r2, [r3, #8]
}
 800146e:	e016      	b.n	800149e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <ADC_ConfigureBoostMode+0x1d8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d80a      	bhi.n	800148e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800148a:	609a      	str	r2, [r3, #8]
}
 800148c:	e007      	b.n	800149e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800149c:	609a      	str	r2, [r3, #8]
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40022100 	.word	0x40022100
 80014b0:	40022300 	.word	0x40022300
 80014b4:	58026300 	.word	0x58026300
 80014b8:	005f5e10 	.word	0x005f5e10
 80014bc:	00bebc20 	.word	0x00bebc20
 80014c0:	017d7840 	.word	0x017d7840

080014c4 <LL_ADC_IsEnabled>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <LL_ADC_IsEnabled+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_ADC_IsEnabled+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_REG_IsConversionOngoing>:
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d101      	bne.n	8001502 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b0a3      	sub	sp, #140	; 0x8c
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800152a:	2302      	movs	r3, #2
 800152c:	e0c1      	b.n	80016b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d102      	bne.n	800154e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e001      	b.n	8001552 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10b      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155c:	f043 0220 	orr.w	r2, r3, #32
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0a0      	b.n	80016b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ffb9 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001578:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ffb2 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 8081 	bne.w	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800158e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001592:	2b00      	cmp	r3, #0
 8001594:	d17c      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80015aa:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80015ac:	e000      	b.n	80015b0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80015ae:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80015b0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d039      	beq.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80015ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a3a      	ldr	r2, [pc, #232]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a39      	ldr	r2, [pc, #228]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d10e      	bne.n	80015fe <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80015e0:	4836      	ldr	r0, [pc, #216]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80015e2:	f7ff ff6f 	bl	80014c4 <LL_ADC_IsEnabled>
 80015e6:	4604      	mov	r4, r0
 80015e8:	4835      	ldr	r0, [pc, #212]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80015ea:	f7ff ff6b 	bl	80014c4 <LL_ADC_IsEnabled>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4323      	orrs	r3, r4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	e008      	b.n	8001610 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80015fe:	4833      	ldr	r0, [pc, #204]	; (80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8001600:	f7ff ff60 	bl	80014c4 <LL_ADC_IsEnabled>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d047      	beq.n	80016a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	6892      	ldr	r2, [r2, #8]
 8001624:	430a      	orrs	r2, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800162c:	e03a      	b.n	80016a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800162e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001638:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d004      	beq.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10e      	bne.n	800166c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800164e:	481b      	ldr	r0, [pc, #108]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001650:	f7ff ff38 	bl	80014c4 <LL_ADC_IsEnabled>
 8001654:	4604      	mov	r4, r0
 8001656:	481a      	ldr	r0, [pc, #104]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001658:	f7ff ff34 	bl	80014c4 <LL_ADC_IsEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	4323      	orrs	r3, r4
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	e008      	b.n	800167e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800166c:	4817      	ldr	r0, [pc, #92]	; (80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800166e:	f7ff ff29 	bl	80014c4 <LL_ADC_IsEnabled>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d010      	beq.n	80016a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001688:	4013      	ands	r3, r2
 800168a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800168c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800168e:	e009      	b.n	80016a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80016a2:	e000      	b.n	80016a6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80016a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80016ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	378c      	adds	r7, #140	; 0x8c
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40022100 	.word	0x40022100
 80016c4:	40022300 	.word	0x40022300
 80016c8:	58026300 	.word	0x58026300
 80016cc:	58026000 	.word	0x58026000
 80016d0:	fffff0e0 	.word	0xfffff0e0

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	05fa0000 	.word	0x05fa0000

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff47 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff5e 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff90 	bl	800178c <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5f 	bl	8001738 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffb2 	bl	80017f4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0cf      	b.n	8001a4e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d106      	bne.n	80018c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2223      	movs	r2, #35	; 0x23
 80018bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f006 fe73 	bl	80085ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b64      	ldr	r3, [pc, #400]	; (8001a58 <HAL_ETH_Init+0x1bc>)
 80018c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018cc:	4a62      	ldr	r2, [pc, #392]	; (8001a58 <HAL_ETH_Init+0x1bc>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d6:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_ETH_Init+0x1bc>)
 80018d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a1b      	ldrb	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7fe ff97 	bl	8000820 <HAL_SYSCFG_ETHInterfaceSelect>
 80018f2:	e003      	b.n	80018fc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018f8:	f7fe ff92 	bl	8000820 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80018fc:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <HAL_ETH_Init+0x1c0>)
 80018fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001916:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7fe ff52 	bl	80007c0 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800191e:	e011      	b.n	8001944 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001920:	f7fe ff4e 	bl	80007c0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192e:	d909      	bls.n	8001944 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2204      	movs	r2, #4
 8001934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	22e0      	movs	r2, #224	; 0xe0
 800193c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e084      	b.n	8001a4e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e4      	bne.n	8001920 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f886 	bl	8001a68 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800195c:	f001 fce2 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8001960:	4603      	mov	r3, r0
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <HAL_ETH_Init+0x1c4>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9a      	lsrs	r2, r3, #18
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3a01      	subs	r2, #1
 8001970:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fa71 	bl	8001e5c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001986:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001996:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	22e0      	movs	r2, #224	; 0xe0
 80019b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e049      	b.n	8001a4e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_ETH_Init+0x1c8>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6952      	ldr	r2, [r2, #20]
 80019ce:	0051      	lsls	r1, r2, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019da:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fad9 	bl	8001f96 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fb1f 	bl	8002028 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3305      	adds	r3, #5
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	021a      	lsls	r2, r3, #8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	061a      	lsls	r2, r3, #24
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	3302      	adds	r3, #2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a36:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2210      	movs	r2, #16
 8001a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58000400 	.word	0x58000400
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	ffff8001 	.word	0xffff8001

08001a68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a82:	f001 fc4f 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8001a86:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d908      	bls.n	8001aa2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d804      	bhi.n	8001aa2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e027      	b.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d908      	bls.n	8001abc <HAL_ETH_SetMDIOClockRange+0x54>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d204      	bcs.n	8001abc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e01a      	b.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d303      	bcc.n	8001acc <HAL_ETH_SetMDIOClockRange+0x64>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d911      	bls.n	8001af0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d908      	bls.n	8001ae6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d804      	bhi.n	8001ae6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e005      	b.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e000      	b.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001af0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	01312cff 	.word	0x01312cff
 8001b08:	02160ebf 	.word	0x02160ebf
 8001b0c:	03938700 	.word	0x03938700
 8001b10:	05f5e0ff 	.word	0x05f5e0ff
 8001b14:	08f0d17f 	.word	0x08f0d17f

08001b18 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001b2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001b32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	7b1b      	ldrb	r3, [r3, #12]
 8001b38:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	7b5b      	ldrb	r3, [r3, #13]
 8001b40:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	7b9b      	ldrb	r3, [r3, #14]
 8001b48:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7bdb      	ldrb	r3, [r3, #15]
 8001b50:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b52:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	7c12      	ldrb	r2, [r2, #16]
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d102      	bne.n	8001b62 <ETH_SetMACConfig+0x4a>
 8001b5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b60:	e000      	b.n	8001b64 <ETH_SetMACConfig+0x4c>
 8001b62:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b64:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	7c52      	ldrb	r2, [r2, #17]
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	d102      	bne.n	8001b74 <ETH_SetMACConfig+0x5c>
 8001b6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b72:	e000      	b.n	8001b76 <ETH_SetMACConfig+0x5e>
 8001b74:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	7c9b      	ldrb	r3, [r3, #18]
 8001b7c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b7e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b84:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7f1b      	ldrb	r3, [r3, #28]
 8001b90:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7f5b      	ldrb	r3, [r3, #29]
 8001b98:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b9a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	7f92      	ldrb	r2, [r2, #30]
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d102      	bne.n	8001baa <ETH_SetMACConfig+0x92>
 8001ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0x94>
 8001baa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001bac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	7fdb      	ldrb	r3, [r3, #31]
 8001bb2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bb4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d102      	bne.n	8001bc6 <ETH_SetMACConfig+0xae>
 8001bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc4:	e000      	b.n	8001bc8 <ETH_SetMACConfig+0xb0>
 8001bc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001bc8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bd6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001bd8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <ETH_SetMACConfig+0x22c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c02:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c0c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c16:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d102      	bne.n	8001c2a <ETH_SetMACConfig+0x112>
 8001c24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c28:	e000      	b.n	8001c2c <ETH_SetMACConfig+0x114>
 8001c2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c2c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <ETH_SetMACConfig+0x230>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c50:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <ETH_SetMACConfig+0x234>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c74:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c7a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d101      	bne.n	8001c8a <ETH_SetMACConfig+0x172>
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	e000      	b.n	8001c8c <ETH_SetMACConfig+0x174>
 8001c8a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c8c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c9e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001cb4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001cbc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f023 0103 	bic.w	r1, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001ce2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d101      	bne.n	8001d06 <ETH_SetMACConfig+0x1ee>
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	e000      	b.n	8001d08 <ETH_SetMACConfig+0x1f0>
 8001d06:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d10:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d1a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d28:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	00048083 	.word	0x00048083
 8001d48:	c0f88000 	.word	0xc0f88000
 8001d4c:	fffffef0 	.word	0xfffffef0

08001d50 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <ETH_SetDMAConfig+0xf8>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	6811      	ldr	r1, [r2, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d76:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	791b      	ldrb	r3, [r3, #4]
 8001d7c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d82:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	7b1b      	ldrb	r3, [r3, #12]
 8001d88:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <ETH_SetDMAConfig+0xfc>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001da8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7b5b      	ldrb	r3, [r3, #13]
 8001dae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <ETH_SetDMAConfig+0x100>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dd4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	7d1b      	ldrb	r3, [r3, #20]
 8001de0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001de2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	7f5b      	ldrb	r3, [r3, #29]
 8001de8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <ETH_SetDMAConfig+0x104>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e0a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7f1b      	ldrb	r3, [r3, #28]
 8001e12:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <ETH_SetDMAConfig+0x108>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e38:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	ffff87fd 	.word	0xffff87fd
 8001e4c:	ffff2ffe 	.word	0xffff2ffe
 8001e50:	fffec000 	.word	0xfffec000
 8001e54:	ffc0efef 	.word	0xffc0efef
 8001e58:	7fc0ffff 	.word	0x7fc0ffff

08001e5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0a4      	sub	sp, #144	; 0x90
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001eb4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001eb8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f06:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f10:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f36:	2300      	movs	r3, #0
 8001f38:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fde6 	bl	8001b18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f7c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fee1 	bl	8001d50 <ETH_SetDMAConfig>
}
 8001f8e:	bf00      	nop
 8001f90:	3790      	adds	r7, #144	; 0x90
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e01d      	b.n	8001fe0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	3206      	adds	r2, #6
 8001fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d9de      	bls.n	8001fa4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002018:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e023      	b.n	800207e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6919      	ldr	r1, [r3, #16]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	3212      	adds	r2, #18
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d9d8      	bls.n	8002036 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020aa:	461a      	mov	r2, r3
 80020ac:	2303      	movs	r3, #3
 80020ae:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020f2:	4b86      	ldr	r3, [pc, #536]	; (800230c <HAL_GPIO_Init+0x228>)
 80020f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f6:	e18c      	b.n	8002412 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 817e 	beq.w	800240c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x44>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 0201 	and.w	r2, r3, #1
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d017      	beq.n	80021c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d123      	bne.n	800221a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80d8 	beq.w	800240c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_GPIO_Init+0x22c>)
 800225e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002262:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_GPIO_Init+0x22c>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_GPIO_Init+0x22c>)
 800226e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_GPIO_Init+0x230>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_GPIO_Init+0x234>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d04a      	beq.n	800233c <HAL_GPIO_Init+0x258>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_GPIO_Init+0x238>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_GPIO_Init+0x23c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_GPIO_Init+0x240>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x244>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_GPIO_Init+0x248>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_GPIO_Init+0x24c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_GPIO_Init+0x250>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x20a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_GPIO_Init+0x254>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x206>
 80022e6:	2309      	movs	r3, #9
 80022e8:	e029      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022ea:	230a      	movs	r3, #10
 80022ec:	e027      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e025      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e023      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e021      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e01f      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022fe:	2303      	movs	r3, #3
 8002300:	e01d      	b.n	800233e <HAL_GPIO_Init+0x25a>
 8002302:	2302      	movs	r3, #2
 8002304:	e01b      	b.n	800233e <HAL_GPIO_Init+0x25a>
 8002306:	2301      	movs	r3, #1
 8002308:	e019      	b.n	800233e <HAL_GPIO_Init+0x25a>
 800230a:	bf00      	nop
 800230c:	58000080 	.word	0x58000080
 8002310:	58024400 	.word	0x58024400
 8002314:	58000400 	.word	0x58000400
 8002318:	58020000 	.word	0x58020000
 800231c:	58020400 	.word	0x58020400
 8002320:	58020800 	.word	0x58020800
 8002324:	58020c00 	.word	0x58020c00
 8002328:	58021000 	.word	0x58021000
 800232c:	58021400 	.word	0x58021400
 8002330:	58021800 	.word	0x58021800
 8002334:	58021c00 	.word	0x58021c00
 8002338:	58022400 	.word	0x58022400
 800233c:	2300      	movs	r3, #0
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	f002 0203 	and.w	r2, r2, #3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4093      	lsls	r3, r2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234e:	4938      	ldr	r1, [pc, #224]	; (8002430 <HAL_GPIO_Init+0x34c>)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f ae6b 	bne.w	80020f8 <HAL_GPIO_Init+0x14>
  }
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3724      	adds	r7, #36	; 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	58000400 	.word	0x58000400

08002434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
 8002440:	4613      	mov	r3, r2
 8002442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002450:	e003      	b.n	800245a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	619a      	str	r2, [r3, #24]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43d9      	mvns	r1, r3
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	400b      	ands	r3, r1
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00a      	beq.n	80024c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e01f      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e01d      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	490f      	ldr	r1, [pc, #60]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024d6:	f7fe f973 	bl	80007c0 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024dc:	e009      	b.n	80024f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024de:	f7fe f96f 	bl	80007c0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ec:	d901      	bls.n	80024f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e007      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fe:	d1ee      	bne.n	80024de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	58024800 	.word	0x58024800

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e3c8      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253a:	4b86      	ldr	r3, [pc, #536]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	2b10      	cmp	r3, #16
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x46>
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b18      	cmp	r3, #24
 800254a:	d110      	bne.n	800256e <HAL_RCC_OscConfig+0x5e>
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d10b      	bne.n	800256e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d06c      	beq.n	800263c <HAL_RCC_OscConfig+0x12c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d168      	bne.n	800263c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e3a2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x76>
 8002578:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e02e      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x98>
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a70      	ldr	r2, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6e      	ldr	r3, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0xbc>
 80025b2:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a67      	ldr	r2, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a64      	ldr	r2, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 80025cc:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a60      	ldr	r2, [pc, #384]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a5d      	ldr	r2, [pc, #372]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe f8e8 	bl	80007c0 <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe f8e4 	bl	80007c0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e356      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xe4>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe f8d4 	bl	80007c0 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe f8d0 	bl	80007c0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e342      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x10c>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 808c 	beq.w	8002764 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264c:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002654:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_RCC_OscConfig+0x162>
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	2b18      	cmp	r3, #24
 8002666:	d137      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1c8>
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d132      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x17a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e314      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0219 	bic.w	r2, r3, #25
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	492f      	ldr	r1, [pc, #188]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe f890 	bl	80007c0 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe f88c 	bl	80007c0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2fe      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	4920      	ldr	r1, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d6:	e045      	b.n	8002764 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d026      	beq.n	800272e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 0219 	bic.w	r2, r3, #25
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4919      	ldr	r1, [pc, #100]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe f865 	bl	80007c0 <HAL_GetTick>
 80026f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe f861 	bl	80007c0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e2d3      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	490b      	ldr	r1, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e01a      	b.n	8002764 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe f841 	bl	80007c0 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe f83d 	bl	80007c0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d903      	bls.n	8002758 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e2af      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
 8002754:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d06a      	beq.n	8002846 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002770:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002778:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800277a:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d007      	beq.n	8002796 <HAL_RCC_OscConfig+0x286>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b18      	cmp	r3, #24
 800278a:	d11b      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2b4>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002796:	4b87      	ldr	r3, [pc, #540]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x29e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e282      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	497d      	ldr	r1, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027c2:	e040      	b.n	8002846 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027cc:	4b79      	ldr	r3, [pc, #484]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a78      	ldr	r2, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fd fff2 	bl	80007c0 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027e0:	f7fd ffee 	bl	80007c0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e260      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027fe:	4b6d      	ldr	r3, [pc, #436]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	4969      	ldr	r1, [pc, #420]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002814:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a66      	ldr	r2, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fd ffce 	bl	80007c0 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002828:	f7fd ffca 	bl	80007c0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e23c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d036      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	4a55      	ldr	r2, [pc, #340]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fd ffab 	bl	80007c0 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fd ffa7 	bl	80007c0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e219      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fd ff91 	bl	80007c0 <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fd ff8d 	bl	80007c0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1ff      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028b4:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d036      	beq.n	800293a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d4:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a36      	ldr	r2, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028e0:	f7fd ff6e 	bl	80007c0 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e8:	f7fd ff6a 	bl	80007c0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1dc      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
 8002906:	e018      	b.n	800293a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800290e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002912:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002914:	f7fd ff54 	bl	80007c0 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291c:	f7fd ff50 	bl	80007c0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1c2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8086 	beq.w	8002a54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002954:	f7fd ff34 	bl	80007c0 <HAL_GetTick>
 8002958:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fd ff30 	bl	80007c0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1a2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x480>
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e032      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x4ac>
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a02      	ldr	r2, [pc, #8]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e021      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e6>
 80029b2:	bf00      	nop
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58024800 	.word	0x58024800
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_OscConfig+0x4ce>
 80029c4:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a82      	ldr	r2, [pc, #520]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	4b80      	ldr	r3, [pc, #512]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a7f      	ldr	r2, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	e00b      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e6>
 80029de:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a79      	ldr	r2, [pc, #484]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d015      	beq.n	8002a2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fd fedf 	bl	80007c0 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fd fedb 	bl	80007c0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e14b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a1c:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCC_OscConfig+0x4f6>
 8002a28:	e014      	b.n	8002a54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fd fec9 	bl	80007c0 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fd fec5 	bl	80007c0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e135      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ee      	bne.n	8002a32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 812a 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a66:	2b18      	cmp	r3, #24
 8002a68:	f000 80ba 	beq.w	8002be0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 8095 	bne.w	8002ba0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fd fe9d 	bl	80007c0 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fd fe99 	bl	80007c0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e10b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_OscConfig+0x6c8>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	430a      	orrs	r2, r1
 8002abc:	4945      	ldr	r1, [pc, #276]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	628b      	str	r3, [r1, #40]	; 0x28
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	3b01      	subs	r3, #1
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002af2:	4938      	ldr	r1, [pc, #224]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b04:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b08:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x6cc>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b10:	00d2      	lsls	r2, r2, #3
 8002b12:	4930      	ldr	r1, [pc, #192]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b18:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f023 020c 	bic.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	492b      	ldr	r1, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f023 0202 	bic.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fd fe22 	bl	80007c0 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fd fe1e 	bl	80007c0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e090      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x670>
 8002b9e:	e088      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fd fe08 	bl	80007c0 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fd fe04 	bl	80007c0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e076      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc6:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x6a4>
 8002bd2:	e06e      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	fffffc0c 	.word	0xfffffc0c
 8002bdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002be6:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d031      	beq.n	8002c58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d12a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d122      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e02b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d01f      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c7e:	f7fd fd9f 	bl	80007c0 <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c84:	bf00      	nop
 8002c86:	f7fd fd9b 	bl	80007c0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d0f9      	beq.n	8002c86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c9e:	00d2      	lsls	r2, r2, #3
 8002ca0:	4906      	ldr	r1, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3730      	adds	r7, #48	; 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	ffff0007 	.word	0xffff0007

08002cc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e19c      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b87      	ldr	r3, [pc, #540]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 020f 	bic.w	r2, r3, #15
 8002cee:	4985      	ldr	r1, [pc, #532]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e184      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d908      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d24:	4b78      	ldr	r3, [pc, #480]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4975      	ldr	r1, [pc, #468]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d908      	bls.n	8002d64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d52:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	496a      	ldr	r1, [pc, #424]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d908      	bls.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	495e      	ldr	r1, [pc, #376]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d908      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	4953      	ldr	r1, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d908      	bls.n	8002dee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f023 020f 	bic.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4947      	ldr	r1, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d055      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dfa:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4940      	ldr	r1, [pc, #256]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e14:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d121      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0f6      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d115      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ea      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0de      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e54:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d6      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e64:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4925      	ldr	r1, [pc, #148]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fd fca3 	bl	80007c0 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7e:	f7fd fc9f 	bl	80007c0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0be      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d1eb      	bne.n	8002e7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d208      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d214      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 020f 	bic.w	r2, r3, #15
 8002eea:	4906      	ldr	r1, [pc, #24]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e086      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
 8002f04:	52002000 	.word	0x52002000
 8002f08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d208      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f28:	4b3c      	ldr	r3, [pc, #240]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4939      	ldr	r1, [pc, #228]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d208      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	492e      	ldr	r1, [pc, #184]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d208      	bcs.n	8002f96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d208      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4917      	ldr	r1, [pc, #92]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fc4:	f000 f834 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	4912      	ldr	r1, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x35c>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_RCC_ClockConfig+0x35c>)
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x360>)
 8002ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x364>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x368>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fb90 	bl	800072c <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
 8003020:	08009b70 	.word	0x08009b70
 8003024:	2400000c 	.word	0x2400000c
 8003028:	24000008 	.word	0x24000008
 800302c:	24000000 	.word	0x24000000

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003036:	4bb3      	ldr	r3, [pc, #716]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800303e:	2b18      	cmp	r3, #24
 8003040:	f200 8155 	bhi.w	80032ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	080030b1 	.word	0x080030b1
 8003050:	080032ef 	.word	0x080032ef
 8003054:	080032ef 	.word	0x080032ef
 8003058:	080032ef 	.word	0x080032ef
 800305c:	080032ef 	.word	0x080032ef
 8003060:	080032ef 	.word	0x080032ef
 8003064:	080032ef 	.word	0x080032ef
 8003068:	080032ef 	.word	0x080032ef
 800306c:	080030d7 	.word	0x080030d7
 8003070:	080032ef 	.word	0x080032ef
 8003074:	080032ef 	.word	0x080032ef
 8003078:	080032ef 	.word	0x080032ef
 800307c:	080032ef 	.word	0x080032ef
 8003080:	080032ef 	.word	0x080032ef
 8003084:	080032ef 	.word	0x080032ef
 8003088:	080032ef 	.word	0x080032ef
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080032ef 	.word	0x080032ef
 8003094:	080032ef 	.word	0x080032ef
 8003098:	080032ef 	.word	0x080032ef
 800309c:	080032ef 	.word	0x080032ef
 80030a0:	080032ef 	.word	0x080032ef
 80030a4:	080032ef 	.word	0x080032ef
 80030a8:	080032ef 	.word	0x080032ef
 80030ac:	080030e3 	.word	0x080030e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b0:	4b94      	ldr	r3, [pc, #592]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030bc:	4b91      	ldr	r3, [pc, #580]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	4a90      	ldr	r2, [pc, #576]	; (8003308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030ce:	e111      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030d0:	4b8d      	ldr	r3, [pc, #564]	; (8003308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d2:	61bb      	str	r3, [r7, #24]
      break;
 80030d4:	e10e      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030d6:	4b8d      	ldr	r3, [pc, #564]	; (800330c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d8:	61bb      	str	r3, [r7, #24]
      break;
 80030da:	e10b      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030dc:	4b8c      	ldr	r3, [pc, #560]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030de:	61bb      	str	r3, [r7, #24]
      break;
 80030e0:	e108      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030ec:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030f8:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003102:	4b80      	ldr	r3, [pc, #512]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	08db      	lsrs	r3, r3, #3
 8003108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80e1 	beq.w	80032e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b02      	cmp	r3, #2
 800312a:	f000 8083 	beq.w	8003234 <HAL_RCC_GetSysClockFreq+0x204>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b02      	cmp	r3, #2
 8003132:	f200 80a1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x248>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x114>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d056      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003142:	e099      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317a:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318a:	ed97 6a02 	vldr	s12, [r7, #8]
 800318e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031aa:	e087      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003318 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ee:	e065      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800331c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003202:	4b40      	ldr	r3, [pc, #256]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003212:	ed97 6a02 	vldr	s12, [r7, #8]
 8003216:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800321a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003232:	e043      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003246:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003256:	ed97 6a02 	vldr	s12, [r7, #8]
 800325a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003276:	e021      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003282:	eddf 6a26 	vldr	s13, [pc, #152]	; 800331c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a02 	vldr	s12, [r7, #8]
 800329e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c6:	3301      	adds	r3, #1
 80032c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e0:	ee17 3a90 	vmov	r3, s15
 80032e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032f0:	61bb      	str	r3, [r7, #24]
      break;
 80032f2:	bf00      	nop
  }

  return sysclockfreq;
 80032f4:	69bb      	ldr	r3, [r7, #24]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
 8003308:	03d09000 	.word	0x03d09000
 800330c:	003d0900 	.word	0x003d0900
 8003310:	007a1200 	.word	0x007a1200
 8003314:	46000000 	.word	0x46000000
 8003318:	4c742400 	.word	0x4c742400
 800331c:	4a742400 	.word	0x4a742400
 8003320:	4af42400 	.word	0x4af42400

08003324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800332a:	f7ff fe81 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800332e:	4602      	mov	r2, r0
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCC_GetHCLKFreq+0x50>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	490f      	ldr	r1, [pc, #60]	; (8003378 <HAL_RCC_GetHCLKFreq+0x54>)
 800333c:	5ccb      	ldrb	r3, [r1, r3]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_GetHCLKFreq+0x50>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_GetHCLKFreq+0x54>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a07      	ldr	r2, [pc, #28]	; (800337c <HAL_RCC_GetHCLKFreq+0x58>)
 8003360:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_RCC_GetHCLKFreq+0x58>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024400 	.word	0x58024400
 8003378:	08009b70 	.word	0x08009b70
 800337c:	2400000c 	.word	0x2400000c
 8003380:	24000008 	.word	0x24000008

08003384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003388:	f7ff ffcc 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	58024400 	.word	0x58024400
 80033ac:	08009b70 	.word	0x08009b70

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033b4:	f7ff ffb6 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4904      	ldr	r1, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	58024400 	.word	0x58024400
 80033d8:	08009b70 	.word	0x08009b70

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b0c6      	sub	sp, #280	; 0x118
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003400:	2500      	movs	r5, #0
 8003402:	ea54 0305 	orrs.w	r3, r4, r5
 8003406:	d049      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003412:	d02f      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003418:	d828      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800341a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341e:	d01a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003424:	d822      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800342a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342e:	d007      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003430:	e01c      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003432:	4bab      	ldr	r3, [pc, #684]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4aaa      	ldr	r2, [pc, #680]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800343e:	e01a      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003444:	3308      	adds	r3, #8
 8003446:	2102      	movs	r1, #2
 8003448:	4618      	mov	r0, r3
 800344a:	f002 fa49 	bl	80058e0 <RCCEx_PLL2_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003454:	e00f      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345a:	3328      	adds	r3, #40	; 0x28
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 faf0 	bl	8005a44 <RCCEx_PLL3_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800346a:	e004      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800347e:	4b98      	ldr	r3, [pc, #608]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348c:	4a94      	ldr	r2, [pc, #592]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800348e:	430b      	orrs	r3, r1
 8003490:	6513      	str	r3, [r2, #80]	; 0x50
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800349c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80034a8:	f04f 0900 	mov.w	r9, #0
 80034ac:	ea58 0309 	orrs.w	r3, r8, r9
 80034b0:	d047      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d82a      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034d9 	.word	0x080034d9
 80034c8:	080034e7 	.word	0x080034e7
 80034cc:	080034fd 	.word	0x080034fd
 80034d0:	0800351b 	.word	0x0800351b
 80034d4:	0800351b 	.word	0x0800351b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e4:	e01a      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ea:	3308      	adds	r3, #8
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 f9f6 	bl	80058e0 <RCCEx_PLL2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034fa:	e00f      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003500:	3328      	adds	r3, #40	; 0x28
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fa9d 	bl	8005a44 <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003510:	e004      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800351a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003524:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	f023 0107 	bic.w	r1, r3, #7
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6513      	str	r3, [r2, #80]	; 0x50
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800353e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800354e:	f04f 0b00 	mov.w	fp, #0
 8003552:	ea5a 030b 	orrs.w	r3, sl, fp
 8003556:	d05b      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800355c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003560:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003564:	d03b      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003566:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800356a:	d834      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800356c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003570:	d037      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003576:	d82e      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003578:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800357c:	d033      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800357e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003582:	d828      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d01a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358e:	d822      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003598:	d007      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800359a:	e01c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b50      	ldr	r3, [pc, #320]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a8:	e01e      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ae:	3308      	adds	r3, #8
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 f994 	bl	80058e0 <RCCEx_PLL2_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035be:	e013      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c4:	3328      	adds	r3, #40	; 0x28
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f002 fa3b 	bl	8005a44 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035dc:	e004      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003600:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003602:	430b      	orrs	r3, r1
 8003604:	6593      	str	r3, [r2, #88]	; 0x58
 8003606:	e003      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800360c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800361c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003626:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800362a:	460b      	mov	r3, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	d05d      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003634:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003638:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800363c:	d03b      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800363e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003642:	d834      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003648:	d037      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800364a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364e:	d82e      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003654:	d033      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800365a:	d828      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800365c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003660:	d01a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003666:	d822      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d007      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003672:	e01c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003680:	e01e      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003686:	3308      	adds	r3, #8
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f002 f928 	bl	80058e0 <RCCEx_PLL2_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003696:	e013      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369c:	3328      	adds	r3, #40	; 0x28
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 f9cf 	bl	8005a44 <RCCEx_PLL3_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036d8:	4a01      	ldr	r2, [pc, #4]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
 80036de:	e005      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003702:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d03a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800370c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	2b30      	cmp	r3, #48	; 0x30
 8003714:	d01f      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003716:	2b30      	cmp	r3, #48	; 0x30
 8003718:	d819      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d00c      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800371e:	2b20      	cmp	r3, #32
 8003720:	d815      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d019      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003726:	2b10      	cmp	r3, #16
 8003728:	d111      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372a:	4baa      	ldr	r3, [pc, #680]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	4aa9      	ldr	r2, [pc, #676]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003736:	e011      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800373c:	3308      	adds	r3, #8
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f002 f8cd 	bl	80058e0 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800374c:	e006      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800375a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003764:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800376c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	4a98      	ldr	r2, [pc, #608]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003774:	430b      	orrs	r3, r1
 8003776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003778:	e003      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800377e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800378e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003798:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d051      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ac:	d035      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80037ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b2:	d82e      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b8:	d031      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80037ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037be:	d828      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	d01a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	d822      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d007      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037d6:	e01c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037e4:	e01c      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ea:	3308      	adds	r3, #8
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 f876 	bl	80058e0 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037fa:	e011      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003800:	3328      	adds	r3, #40	; 0x28
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f002 f91d 	bl	8005a44 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003810:	e006      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003818:	e002      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800381e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003838:	430b      	orrs	r3, r1
 800383a:	6513      	str	r3, [r2, #80]	; 0x50
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003842:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003852:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800385c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d053      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003870:	d033      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003876:	d82c      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003878:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800387c:	d02f      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x502>
 800387e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003882:	d826      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003884:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003888:	d02b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800388a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800388e:	d820      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003894:	d012      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389a:	d81a      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d022      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d115      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038aa:	3308      	adds	r3, #8
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 f816 	bl	80058e0 <RCCEx_PLL2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038ba:	e015      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c0:	3328      	adds	r3, #40	; 0x28
 80038c2:	2101      	movs	r1, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 f8bd 	bl	8005a44 <RCCEx_PLL3_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038da:	bf00      	nop
 80038dc:	e004      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003900:	430b      	orrs	r3, r1
 8003902:	6513      	str	r3, [r2, #80]	; 0x50
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800390a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800391a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003924:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d058      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393a:	d033      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800393c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003940:	d82c      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d02f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d826      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800394e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003952:	d02b      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003958:	d820      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395e:	d012      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d81a      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d022      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800396a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800396e:	d115      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003974:	3308      	adds	r3, #8
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f001 ffb1 	bl	80058e0 <RCCEx_PLL2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003984:	e015      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398a:	3328      	adds	r3, #40	; 0x28
 800398c:	2101      	movs	r1, #1
 800398e:	4618      	mov	r0, r3
 8003990:	f002 f858 	bl	8005a44 <RCCEx_PLL3_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800399a:	e00a      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039a2:	e006      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a4:	bf00      	nop
 80039a6:	e004      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a8:	bf00      	nop
 80039aa:	e002      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039ac:	bf00      	nop
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ca:	4a02      	ldr	r2, [pc, #8]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6593      	str	r3, [r2, #88]	; 0x58
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	d037      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0a:	d00e      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a10:	d816      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1a:	d111      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1c:	4bc4      	ldr	r3, [pc, #784]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4ac3      	ldr	r2, [pc, #780]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a28:	e00f      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 ff54 	bl	80058e0 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a3e:	e004      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a52:	4bb7      	ldr	r3, [pc, #732]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a60:	4ab3      	ldr	r2, [pc, #716]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6513      	str	r3, [r2, #80]	; 0x50
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d039      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d81c      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003add 	.word	0x08003add
 8003aa4:	08003ab1 	.word	0x08003ab1
 8003aa8:	08003abf 	.word	0x08003abf
 8003aac:	08003add 	.word	0x08003add
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab0:	4b9f      	ldr	r3, [pc, #636]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4a9e      	ldr	r2, [pc, #632]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003abc:	e00f      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 ff0a 	bl	80058e0 <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ada:	e000      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ae6:	4b92      	ldr	r3, [pc, #584]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f023 0103 	bic.w	r1, r3, #3
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	4a8e      	ldr	r2, [pc, #568]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f000 8099 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b26:	4b83      	ldr	r3, [pc, #524]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a82      	ldr	r2, [pc, #520]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b32:	f7fc fe45 	bl	80007c0 <HAL_GetTick>
 8003b36:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fc fe40 	bl	80007c0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	; 0x64
 8003b4a:	d903      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b52:	e005      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b54:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ed      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d173      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b68:	4b71      	ldr	r3, [pc, #452]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b74:	4053      	eors	r3, r2
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b8a:	4b69      	ldr	r3, [pc, #420]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a68      	ldr	r2, [pc, #416]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b96:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a65      	ldr	r2, [pc, #404]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ba2:	4a63      	ldr	r2, [pc, #396]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb6:	d118      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fc fe02 	bl	80007c0 <HAL_GetTick>
 8003bbc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc0:	e00d      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fc fdfd 	bl	80007c0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003bcc:	1ad2      	subs	r2, r2, r3
 8003bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d903      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003bdc:	e005      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0eb      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d129      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c02:	d10e      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c14:	091a      	lsrs	r2, r3, #4
 8003c16:	4b48      	ldr	r3, [pc, #288]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	4a45      	ldr	r2, [pc, #276]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6113      	str	r3, [r2, #16]
 8003c20:	e005      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c2c:	6113      	str	r3, [r2, #16]
 8003c2e:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	4a3c      	ldr	r2, [pc, #240]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	e008      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f002 0301 	and.w	r3, r2, #1
 8003c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f000 808f 	beq.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c80:	2b28      	cmp	r3, #40	; 0x28
 8003c82:	d871      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003d71 	.word	0x08003d71
 8003c90:	08003d69 	.word	0x08003d69
 8003c94:	08003d69 	.word	0x08003d69
 8003c98:	08003d69 	.word	0x08003d69
 8003c9c:	08003d69 	.word	0x08003d69
 8003ca0:	08003d69 	.word	0x08003d69
 8003ca4:	08003d69 	.word	0x08003d69
 8003ca8:	08003d69 	.word	0x08003d69
 8003cac:	08003d3d 	.word	0x08003d3d
 8003cb0:	08003d69 	.word	0x08003d69
 8003cb4:	08003d69 	.word	0x08003d69
 8003cb8:	08003d69 	.word	0x08003d69
 8003cbc:	08003d69 	.word	0x08003d69
 8003cc0:	08003d69 	.word	0x08003d69
 8003cc4:	08003d69 	.word	0x08003d69
 8003cc8:	08003d69 	.word	0x08003d69
 8003ccc:	08003d53 	.word	0x08003d53
 8003cd0:	08003d69 	.word	0x08003d69
 8003cd4:	08003d69 	.word	0x08003d69
 8003cd8:	08003d69 	.word	0x08003d69
 8003cdc:	08003d69 	.word	0x08003d69
 8003ce0:	08003d69 	.word	0x08003d69
 8003ce4:	08003d69 	.word	0x08003d69
 8003ce8:	08003d69 	.word	0x08003d69
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003d69 	.word	0x08003d69
 8003cf4:	08003d69 	.word	0x08003d69
 8003cf8:	08003d69 	.word	0x08003d69
 8003cfc:	08003d69 	.word	0x08003d69
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003d69 	.word	0x08003d69
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003d69 	.word	0x08003d69
 8003d1c:	08003d69 	.word	0x08003d69
 8003d20:	08003d69 	.word	0x08003d69
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d69 	.word	0x08003d69
 8003d2c:	08003d71 	.word	0x08003d71
 8003d30:	58024400 	.word	0x58024400
 8003d34:	58024800 	.word	0x58024800
 8003d38:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d40:	3308      	adds	r3, #8
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fdcb 	bl	80058e0 <RCCEx_PLL2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d50:	e00f      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d56:	3328      	adds	r3, #40	; 0x28
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 fe72 	bl	8005a44 <RCCEx_PLL3_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d7a:	4bbf      	ldr	r3, [pc, #764]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d88:	4abb      	ldr	r2, [pc, #748]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 0302 	and.w	r3, r2, #2
 8003da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da8:	2300      	movs	r3, #0
 8003daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4313      	orrs	r3, r2
 8003db6:	d041      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d824      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003e15 	.word	0x08003e15
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003df7 	.word	0x08003df7
 8003dd4:	08003e15 	.word	0x08003e15
 8003dd8:	08003e15 	.word	0x08003e15
 8003ddc:	08003e15 	.word	0x08003e15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de4:	3308      	adds	r3, #8
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fd79 	bl	80058e0 <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003df4:	e00f      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfa:	3328      	adds	r3, #40	; 0x28
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fe20 	bl	8005a44 <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e004      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e1e:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f023 0107 	bic.w	r1, r3, #7
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	4a92      	ldr	r2, [pc, #584]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6553      	str	r3, [r2, #84]	; 0x54
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 0304 	and.w	r3, r2, #4
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d044      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d825      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003ebd 	.word	0x08003ebd
 8003e74:	08003e89 	.word	0x08003e89
 8003e78:	08003e9f 	.word	0x08003e9f
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ebd 	.word	0x08003ebd
 8003e84:	08003ebd 	.word	0x08003ebd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fd25 	bl	80058e0 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea2:	3328      	adds	r3, #40	; 0x28
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fdcc 	bl	8005a44 <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eb2:	e004      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec6:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f023 0107 	bic.w	r1, r3, #7
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6593      	str	r3, [r2, #88]	; 0x58
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ee2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f002 0320 	and.w	r3, r2, #32
 8003ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003efc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d055      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f12:	d033      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f18:	d82c      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d02f      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d826      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2a:	d02b      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f30:	d820      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f36:	d012      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3c:	d81a      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d022      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f46:	d115      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fcc5 	bl	80058e0 <RCCEx_PLL2_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e015      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f62:	3328      	adds	r3, #40	; 0x28
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fd6c 	bl	8005a44 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f72:	e00a      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f7a:	e006      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f7c:	bf00      	nop
 8003f7e:	e004      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	4a35      	ldr	r2, [pc, #212]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6553      	str	r3, [r2, #84]	; 0x54
 8003fa8:	e003      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003faa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003fbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fc8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d058      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fde:	d033      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fe4:	d82c      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	d02f      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d826      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff6:	d02b      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffc:	d820      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d012      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004008:	d81a      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d022      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	d115      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004018:	3308      	adds	r3, #8
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fc5f 	bl	80058e0 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004028:	e015      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800402e:	3328      	adds	r3, #40	; 0x28
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fd06 	bl	8005a44 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800403e:	e00a      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004046:	e006      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004048:	bf00      	nop
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800404c:	bf00      	nop
 800404e:	e002      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004056:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800406a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406e:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800409a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d055      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040b0:	d033      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80040b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040b6:	d82c      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040bc:	d02f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c2:	d826      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040c8:	d02b      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ce:	d820      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d4:	d012      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80040d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040da:	d81a      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d022      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d115      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ea:	3308      	adds	r3, #8
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fbf6 	bl	80058e0 <RCCEx_PLL2_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040fa:	e015      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004100:	3328      	adds	r3, #40	; 0x28
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f001 fc9d 	bl	8005a44 <RCCEx_PLL3_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004110:	e00a      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800411a:	bf00      	nop
 800411c:	e004      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800411e:	bf00      	nop
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004130:	4ba0      	ldr	r3, [pc, #640]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	4a9c      	ldr	r2, [pc, #624]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800414c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f002 0308 	and.w	r3, r2, #8
 800415c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004166:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d01e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417c:	d10c      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004182:	3328      	adds	r3, #40	; 0x28
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fc5c 	bl	8005a44 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004198:	4b86      	ldr	r3, [pc, #536]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a8:	4a82      	ldr	r2, [pc, #520]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f002 0310 	and.w	r3, r2, #16
 80041ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d01e      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d10c      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	3328      	adds	r3, #40	; 0x28
 80041e2:	2102      	movs	r1, #2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fc2d 	bl	8005a44 <RCCEx_PLL3_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f6:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	4a6b      	ldr	r2, [pc, #428]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004218:	67bb      	str	r3, [r7, #120]	; 0x78
 800421a:	2300      	movs	r3, #0
 800421c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800421e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d03e      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800422c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004234:	d022      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800423a:	d81b      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d00b      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004246:	e015      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424c:	3308      	adds	r3, #8
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fb45 	bl	80058e0 <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800425c:	e00f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004262:	3328      	adds	r3, #40	; 0x28
 8004264:	2102      	movs	r1, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f001 fbec 	bl	8005a44 <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004272:	e004      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800427c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004286:	4b4b      	ldr	r3, [pc, #300]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004296:	4a47      	ldr	r2, [pc, #284]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6593      	str	r3, [r2, #88]	; 0x58
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80042b2:	673b      	str	r3, [r7, #112]	; 0x70
 80042b4:	2300      	movs	r3, #0
 80042b6:	677b      	str	r3, [r7, #116]	; 0x74
 80042b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042bc:	460b      	mov	r3, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	d03b      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ce:	d01f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042d4:	d818      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80042d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042da:	d003      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80042dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e0:	d007      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4a32      	ldr	r2, [pc, #200]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f6:	3328      	adds	r3, #40	; 0x28
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 fba2 	bl	8005a44 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800431a:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6553      	str	r3, [r2, #84]	; 0x54
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004346:	66bb      	str	r3, [r7, #104]	; 0x68
 8004348:	2300      	movs	r3, #0
 800434a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800434c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d034      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d007      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004366:	e011      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004374:	e00e      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800437a:	3308      	adds	r3, #8
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f001 faae 	bl	80058e0 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800438a:	e003      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004394:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10d      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	4a02      	ldr	r2, [pc, #8]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80043cc:	663b      	str	r3, [r7, #96]	; 0x60
 80043ce:	2300      	movs	r3, #0
 80043d0:	667b      	str	r3, [r7, #100]	; 0x64
 80043d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d00c      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e0:	3328      	adds	r3, #40	; 0x28
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fb2d 	bl	8005a44 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004402:	65bb      	str	r3, [r7, #88]	; 0x58
 8004404:	2300      	movs	r3, #0
 8004406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004408:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d036      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d018      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800441e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004422:	d811      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d014      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800442a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442e:	d80b      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d106      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443a:	4bb7      	ldr	r3, [pc, #732]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4ab6      	ldr	r2, [pc, #728]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004446:	e008      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004462:	4bad      	ldr	r3, [pc, #692]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004470:	4aa9      	ldr	r2, [pc, #676]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	; 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800447c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
 800448e:	2300      	movs	r3, #0
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800449c:	4b9e      	ldr	r3, [pc, #632]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a9b      	ldr	r2, [pc, #620]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80044be:	2300      	movs	r3, #0
 80044c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044cc:	4b92      	ldr	r3, [pc, #584]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044da:	4a8f      	ldr	r2, [pc, #572]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
 80044ee:	2300      	movs	r3, #0
 80044f0:	647b      	str	r3, [r7, #68]	; 0x44
 80044f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044fc:	4b86      	ldr	r3, [pc, #536]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	4a85      	ldr	r2, [pc, #532]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004506:	6113      	str	r3, [r2, #16]
 8004508:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800450a:	6919      	ldr	r1, [r3, #16]
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004514:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800451a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
 8004528:	2300      	movs	r3, #0
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004530:	460b      	mov	r3, r1
 8004532:	4313      	orrs	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004536:	4b78      	ldr	r3, [pc, #480]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800453e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004546:	430b      	orrs	r3, r1
 8004548:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
 8004558:	2300      	movs	r3, #0
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004566:	4b6c      	ldr	r3, [pc, #432]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800456e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	4a68      	ldr	r2, [pc, #416]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004578:	430b      	orrs	r3, r1
 800457a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	2100      	movs	r1, #0
 8004586:	62b9      	str	r1, [r7, #40]	; 0x28
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d011      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459c:	3308      	adds	r3, #8
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 f99d 	bl	80058e0 <RCCEx_PLL2_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	2100      	movs	r1, #0
 80045c6:	6239      	str	r1, [r7, #32]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d011      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045dc:	3308      	adds	r3, #8
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 f97d 	bl	80058e0 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	2100      	movs	r1, #0
 8004606:	61b9      	str	r1, [r7, #24]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d011      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461c:	3308      	adds	r3, #8
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f95d 	bl	80058e0 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800462c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800463c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	2100      	movs	r1, #0
 8004646:	6139      	str	r1, [r7, #16]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d011      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	3328      	adds	r3, #40	; 0x28
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f001 f9ef 	bl	8005a44 <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	2100      	movs	r1, #0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800469c:	3328      	adds	r3, #40	; 0x28
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f9cf 	bl	8005a44 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80046ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	2100      	movs	r1, #0
 80046c6:	6039      	str	r1, [r7, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046dc:	3328      	adds	r3, #40	; 0x28
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 f9af 	bl	8005a44 <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80046ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80046fc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
}
 800470a:	4618      	mov	r0, r3
 800470c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004716:	bf00      	nop
 8004718:	58024400 	.word	0x58024400

0800471c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b090      	sub	sp, #64	; 0x40
 8004720:	af00      	add	r7, sp, #0
 8004722:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800472e:	430b      	orrs	r3, r1
 8004730:	f040 8094 	bne.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004734:	4b9b      	ldr	r3, [pc, #620]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b04      	cmp	r3, #4
 8004742:	f200 8087 	bhi.w	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004761 	.word	0x08004761
 8004750:	08004789 	.word	0x08004789
 8004754:	080047b1 	.word	0x080047b1
 8004758:	0800484d 	.word	0x0800484d
 800475c:	080047d9 	.word	0x080047d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004760:	4b90      	ldr	r3, [pc, #576]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800476c:	d108      	bne.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800476e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004772:	4618      	mov	r0, r3
 8004774:	f000 ff62 	bl	800563c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800477c:	f000 bc93 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004784:	f000 bc8f 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004788:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004794:	d108      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004796:	f107 0318 	add.w	r3, r7, #24
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fca6 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047a4:	f000 bc7f 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047ac:	f000 bc7b 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047bc:	d108      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047be:	f107 030c 	add.w	r3, r7, #12
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fde6 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047cc:	f000 bc6b 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047d4:	f000 bc67 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047d8:	4b72      	ldr	r3, [pc, #456]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80047da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047e2:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047f4:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	08db      	lsrs	r3, r3, #3
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	4a6a      	ldr	r2, [pc, #424]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004806:	e01f      	b.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004808:	4b66      	ldr	r3, [pc, #408]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004814:	d106      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800481c:	d102      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004822:	e011      	b.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004824:	4b5f      	ldr	r3, [pc, #380]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004830:	d106      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004838:	d102      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800483a:	4b5d      	ldr	r3, [pc, #372]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483e:	e003      	b.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004844:	f000 bc2f 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004848:	f000 bc2d 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800484c:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004850:	f000 bc29 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004858:	f000 bc25 	b.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800485c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004860:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004864:	430b      	orrs	r3, r1
 8004866:	f040 80a7 	bne.w	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800486a:	4b4e      	ldr	r3, [pc, #312]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004872:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	d054      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004882:	f200 808b 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800488c:	f000 8083 	beq.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004896:	f200 8081 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a0:	d02f      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a8:	d878      	bhi.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048b6:	d012      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80048b8:	e070      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048ba:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c6:	d107      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 feb5 	bl	800563c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048d6:	e3e6      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048dc:	e3e3      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ea:	d107      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ec:	f107 0318 	add.w	r3, r7, #24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fbfb 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048fa:	e3d4      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004900:	e3d1      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490e:	d107      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fd3d 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800491e:	e3c2      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004924:	e3bf      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800492e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004930:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d10c      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	08db      	lsrs	r3, r3, #3
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004954:	e01e      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d106      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496a:	d102      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	e010      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497e:	d106      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004986:	d102      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	e002      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004992:	e388      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004994:	e387      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800499a:	e384      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049a0:	e381      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	03d09000 	.word	0x03d09000
 80049ac:	003d0900 	.word	0x003d0900
 80049b0:	007a1200 	.word	0x007a1200
 80049b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80049b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049bc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80049c0:	430b      	orrs	r3, r1
 80049c2:	f040 809c 	bne.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80049c6:	4b9e      	ldr	r3, [pc, #632]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d6:	d054      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049de:	f200 808b 	bhi.w	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049e8:	f000 8083 	beq.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f2:	f200 8081 	bhi.w	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fc:	d02f      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a04:	d878      	bhi.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a12:	d012      	beq.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004a14:	e070      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a16:	4b8a      	ldr	r3, [pc, #552]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a22:	d107      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fe07 	bl	800563c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a32:	e338      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a38:	e335      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a3a:	4b81      	ldr	r3, [pc, #516]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a46:	d107      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a48:	f107 0318 	add.w	r3, r7, #24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb4d 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a56:	e326      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a5c:	e323      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a5e:	4b78      	ldr	r3, [pc, #480]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fc8f 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a7a:	e314      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a80:	e311      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a82:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a9e:	4b68      	ldr	r3, [pc, #416]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	08db      	lsrs	r3, r3, #3
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	4a66      	ldr	r2, [pc, #408]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab0:	e01e      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ab2:	4b63      	ldr	r3, [pc, #396]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d106      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac6:	d102      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ac8:	4b5f      	ldr	r3, [pc, #380]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004acc:	e010      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ace:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ada:	d106      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae2:	d102      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	e002      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004aee:	e2da      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004af0:	e2d9      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004af2:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004af6:	e2d6      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004afc:	e2d3      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b02:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f040 80a7 	bne.w	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004b0c:	4b4c      	ldr	r3, [pc, #304]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1c:	d055      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b24:	f200 8096 	bhi.w	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b2e:	f000 8084 	beq.w	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b38:	f200 808c 	bhi.w	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	d030      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4a:	f200 8083 	bhi.w	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d012      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004b5c:	e07a      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b5e:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd63 	bl	800563c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b7a:	e294      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b80:	e291      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b82:	4b2f      	ldr	r3, [pc, #188]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b90:	f107 0318 	add.w	r3, r7, #24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 faa9 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b9e:	e282      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ba4:	e27f      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fbeb 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bc2:	e270      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc8:	e26d      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004be6:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	4a14      	ldr	r2, [pc, #80]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf8:	e01e      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	d106      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0e:	d102      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c10:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c14:	e010      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c22:	d106      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004c36:	e236      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c38:	e235      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c3e:	e232      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c40:	58024400 	.word	0x58024400
 8004c44:	03d09000 	.word	0x03d09000
 8004c48:	003d0900 	.word	0x003d0900
 8004c4c:	007a1200 	.word	0x007a1200
 8004c50:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c58:	e225      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c5e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004c62:	430b      	orrs	r3, r1
 8004c64:	f040 8085 	bne.w	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004c68:	4b9c      	ldr	r3, [pc, #624]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d06b      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c80:	d874      	bhi.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c88:	d056      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c90:	d86c      	bhi.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c98:	d03b      	beq.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ca0:	d864      	bhi.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ca8:	d021      	beq.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cb0:	d85c      	bhi.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbe:	d004      	beq.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8004cc0:	e054      	b.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004cc2:	f7fe fb5f 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8004cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004cc8:	e1ed      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cca:	4b84      	ldr	r3, [pc, #528]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd8:	f107 0318 	add.w	r3, r7, #24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fa05 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ce6:	e1de      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cec:	e1db      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cee:	4b7b      	ldr	r3, [pc, #492]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb47 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d0a:	e1cc      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d10:	e1c9      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d12:	4b72      	ldr	r3, [pc, #456]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d1e:	4b6f      	ldr	r3, [pc, #444]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	4a6d      	ldr	r2, [pc, #436]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d30:	e1b9      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d36:	e1b6      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d38:	4b68      	ldr	r3, [pc, #416]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d44:	d102      	bne.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8004d46:	4b67      	ldr	r3, [pc, #412]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d4a:	e1ac      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d50:	e1a9      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d52:	4b62      	ldr	r3, [pc, #392]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8004d60:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d64:	e19f      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d6a:	e19c      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d70:	e199      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	d173      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004d7e:	4b57      	ldr	r3, [pc, #348]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8e:	d02f      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d96:	d863      	bhi.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d012      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8004da6:	e05b      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004da8:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004db6:	f107 0318 	add.w	r3, r7, #24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f996 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dc4:	e16f      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dca:	e16c      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd8:	d107      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dda:	f107 030c 	add.w	r3, r7, #12
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fad8 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004de8:	e15d      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dee:	e15a      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004df0:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dfa:	4b38      	ldr	r3, [pc, #224]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e0c:	4b33      	ldr	r3, [pc, #204]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	08db      	lsrs	r3, r3, #3
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1e:	e01e      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e20:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e34:	d102      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e36:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3a:	e010      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e48:	d106      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e50:	d102      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e52:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e56:	e002      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e5c:	e123      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e5e:	e122      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e64:	e11f      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	d13c      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004e72:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d012      	beq.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8004e8a:	e023      	b.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e98:	d107      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fbcc 	bl	800563c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ea8:	e0fd      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eae:	e0fa      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ebc:	d107      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ebe:	f107 0318 	add.w	r3, r7, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f912 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ecc:	e0eb      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed2:	e0e8      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed8:	e0e5      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	03d09000 	.word	0x03d09000
 8004ee4:	003d0900 	.word	0x003d0900
 8004ee8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f040 8085 	bne.w	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004efa:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004f02:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f0a:	d06b      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f12:	d874      	bhi.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1a:	d056      	beq.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d86c      	bhi.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f2a:	d03b      	beq.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f32:	d864      	bhi.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3a:	d021      	beq.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f42:	d85c      	bhi.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f50:	d004      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004f52:	e054      	b.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004f54:	f000 f8b4 	bl	80050c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f58:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f5a:	e0a4      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f5c:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f68:	d107      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f6a:	f107 0318 	add.w	r3, r7, #24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f8bc 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f78:	e095      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f7e:	e092      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f80:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f9fe 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f9c:	e083      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa2:	e080      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fa4:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d109      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb0:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	08db      	lsrs	r3, r3, #3
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	4a3e      	ldr	r2, [pc, #248]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fc2:	e070      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fc8:	e06d      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004fca:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d102      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8004fd8:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fdc:	e063      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe2:	e060      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fe4:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff0:	d102      	bne.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8004ff2:	4b32      	ldr	r3, [pc, #200]	; (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ff6:	e056      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ffc:	e053      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005002:	e050      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005008:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800500c:	430b      	orrs	r3, r1
 800500e:	d148      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005020:	d02a      	beq.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005028:	d838      	bhi.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005036:	d00d      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005038:	e030      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800503a:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005046:	d102      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005048:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504c:	e02b      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005052:	e028      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005060:	d107      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fae8 	bl	800563c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005070:	e019      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005076:	e016      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005084:	d107      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005086:	f107 0318 	add.w	r3, r7, #24
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f82e 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005094:	e007      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800509a:	e004      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a0:	e001      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80050a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3740      	adds	r7, #64	; 0x40
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	58024400 	.word	0x58024400
 80050b4:	03d09000 	.word	0x03d09000
 80050b8:	003d0900 	.word	0x003d0900
 80050bc:	007a1200 	.word	0x007a1200

080050c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050c4:	f7fe f92e 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4904      	ldr	r1, [pc, #16]	; (80050e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	58024400 	.word	0x58024400
 80050e8:	08009b70 	.word	0x08009b70

080050ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050f4:	4ba1      	ldr	r3, [pc, #644]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80050fe:	4b9f      	ldr	r3, [pc, #636]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	0b1b      	lsrs	r3, r3, #12
 8005104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005108:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800510a:	4b9c      	ldr	r3, [pc, #624]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005116:	4b99      	ldr	r3, [pc, #612]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8111 	beq.w	800535c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b02      	cmp	r3, #2
 800513e:	f000 8083 	beq.w	8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b02      	cmp	r3, #2
 8005146:	f200 80a1 	bhi.w	800528c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d056      	beq.n	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005156:	e099      	b.n	800528c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005158:	4b88      	ldr	r3, [pc, #544]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d02d      	beq.n	80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005164:	4b85      	ldr	r3, [pc, #532]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	08db      	lsrs	r3, r3, #3
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	4a84      	ldr	r2, [pc, #528]	; (8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b7b      	ldr	r3, [pc, #492]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051be:	e087      	b.n	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005202:	e065      	b.n	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	ed97 6a03 	vldr	s12, [r7, #12]
 800522a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800522e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005246:	e043      	b.n	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005252:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525a:	4b48      	ldr	r3, [pc, #288]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a03 	vldr	s12, [r7, #12]
 800526e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800528a:	e021      	b.n	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b37      	ldr	r3, [pc, #220]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80052d0:	4b2a      	ldr	r3, [pc, #168]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	0a5b      	lsrs	r3, r3, #9
 80052d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f6:	ee17 2a90 	vmov	r2, s15
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80052fe:	4b1f      	ldr	r3, [pc, #124]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005318:	edd7 6a07 	vldr	s13, [r7, #28]
 800531c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005324:	ee17 2a90 	vmov	r2, s15
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	0e1b      	lsrs	r3, r3, #24
 8005332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005346:	edd7 6a07 	vldr	s13, [r7, #28]
 800534a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005352:	ee17 2a90 	vmov	r2, s15
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800535a:	e008      	b.n	800536e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	609a      	str	r2, [r3, #8]
}
 800536e:	bf00      	nop
 8005370:	3724      	adds	r7, #36	; 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
 8005380:	03d09000 	.word	0x03d09000
 8005384:	46000000 	.word	0x46000000
 8005388:	4c742400 	.word	0x4c742400
 800538c:	4a742400 	.word	0x4a742400
 8005390:	4af42400 	.word	0x4af42400

08005394 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005394:	b480      	push	{r7}
 8005396:	b089      	sub	sp, #36	; 0x24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800539c:	4ba1      	ldr	r3, [pc, #644]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053a6:	4b9f      	ldr	r3, [pc, #636]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	0d1b      	lsrs	r3, r3, #20
 80053ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053b2:	4b9c      	ldr	r3, [pc, #624]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053be:	4b99      	ldr	r3, [pc, #612]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8111 	beq.w	8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	f000 8083 	beq.w	80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	f200 80a1 	bhi.w	8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d056      	beq.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053fe:	e099      	b.n	8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005400:	4b88      	ldr	r3, [pc, #544]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02d      	beq.n	8005468 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800540c:	4b85      	ldr	r3, [pc, #532]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	4a84      	ldr	r2, [pc, #528]	; (8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b7b      	ldr	r3, [pc, #492]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a03 	vldr	s12, [r7, #12]
 800544a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005466:	e087      	b.n	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b6a      	ldr	r3, [pc, #424]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a03 	vldr	s12, [r7, #12]
 800548e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054aa:	e065      	b.n	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054be:	4b59      	ldr	r3, [pc, #356]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ee:	e043      	b.n	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005502:	4b48      	ldr	r3, [pc, #288]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005512:	ed97 6a03 	vldr	s12, [r7, #12]
 8005516:	eddf 5a45 	vldr	s11, [pc, #276]	; 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800551a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005532:	e021      	b.n	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005556:	ed97 6a03 	vldr	s12, [r7, #12]
 800555a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800555e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005576:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005578:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	0a5b      	lsrs	r3, r3, #9
 800557e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005592:	edd7 6a07 	vldr	s13, [r7, #28]
 8005596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559e:	ee17 2a90 	vmov	r2, s15
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055cc:	ee17 2a90 	vmov	r2, s15
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	0e1b      	lsrs	r3, r3, #24
 80055da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fa:	ee17 2a90 	vmov	r2, s15
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005602:	e008      	b.n	8005616 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	609a      	str	r2, [r3, #8]
}
 8005616:	bf00      	nop
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	03d09000 	.word	0x03d09000
 800562c:	46000000 	.word	0x46000000
 8005630:	4c742400 	.word	0x4c742400
 8005634:	4a742400 	.word	0x4a742400
 8005638:	4af42400 	.word	0x4af42400

0800563c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005644:	4ba0      	ldr	r3, [pc, #640]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800564e:	4b9e      	ldr	r3, [pc, #632]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005658:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800565a:	4b9b      	ldr	r3, [pc, #620]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005664:	4b98      	ldr	r3, [pc, #608]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	08db      	lsrs	r3, r3, #3
 800566a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	fb02 f303 	mul.w	r3, r2, r3
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8111 	beq.w	80058aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b02      	cmp	r3, #2
 800568c:	f000 8083 	beq.w	8005796 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b02      	cmp	r3, #2
 8005694:	f200 80a1 	bhi.w	80057da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d056      	beq.n	8005752 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80056a4:	e099      	b.n	80057da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a6:	4b88      	ldr	r3, [pc, #544]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02d      	beq.n	800570e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056b2:	4b85      	ldr	r3, [pc, #532]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	4a83      	ldr	r2, [pc, #524]	; (80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056dc:	4b7a      	ldr	r3, [pc, #488]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005708:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800570c:	e087      	b.n	800581e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005718:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800571c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005720:	4b69      	ldr	r3, [pc, #420]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005730:	ed97 6a03 	vldr	s12, [r7, #12]
 8005734:	eddf 5a66 	vldr	s11, [pc, #408]	; 80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005750:	e065      	b.n	800581e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005764:	4b58      	ldr	r3, [pc, #352]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005774:	ed97 6a03 	vldr	s12, [r7, #12]
 8005778:	eddf 5a55 	vldr	s11, [pc, #340]	; 80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800577c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005794:	e043      	b.n	800581e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80058dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80057a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a8:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80057bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057d8:	e021      	b.n	800581e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	ee07 3a90 	vmov	s15, r3
 80057e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80057e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005800:	eddf 5a33 	vldr	s11, [pc, #204]	; 80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800581c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800581e:	4b2a      	ldr	r3, [pc, #168]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	0a5b      	lsrs	r3, r3, #9
 8005824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005828:	ee07 3a90 	vmov	s15, r3
 800582c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005838:	edd7 6a07 	vldr	s13, [r7, #28]
 800583c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005844:	ee17 2a90 	vmov	r2, s15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005866:	edd7 6a07 	vldr	s13, [r7, #28]
 800586a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005872:	ee17 2a90 	vmov	r2, s15
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	0e1b      	lsrs	r3, r3, #24
 8005880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005894:	edd7 6a07 	vldr	s13, [r7, #28]
 8005898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a0:	ee17 2a90 	vmov	r2, s15
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	3724      	adds	r7, #36	; 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	58024400 	.word	0x58024400
 80058cc:	03d09000 	.word	0x03d09000
 80058d0:	46000000 	.word	0x46000000
 80058d4:	4c742400 	.word	0x4c742400
 80058d8:	4a742400 	.word	0x4a742400
 80058dc:	4af42400 	.word	0x4af42400

080058e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058ee:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d101      	bne.n	80058fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e099      	b.n	8005a32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058fe:	4b4f      	ldr	r3, [pc, #316]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a4e      	ldr	r2, [pc, #312]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005904:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590a:	f7fa ff59 	bl	80007c0 <HAL_GetTick>
 800590e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005910:	e008      	b.n	8005924 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005912:	f7fa ff55 	bl	80007c0 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e086      	b.n	8005a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005924:	4b45      	ldr	r3, [pc, #276]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f0      	bne.n	8005912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005930:	4b42      	ldr	r3, [pc, #264]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	031b      	lsls	r3, r3, #12
 800593e:	493f      	ldr	r1, [pc, #252]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	628b      	str	r3, [r1, #40]	; 0x28
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	3b01      	subs	r3, #1
 800594a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	3b01      	subs	r3, #1
 8005954:	025b      	lsls	r3, r3, #9
 8005956:	b29b      	uxth	r3, r3
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	3b01      	subs	r3, #1
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	3b01      	subs	r3, #1
 800596e:	061b      	lsls	r3, r3, #24
 8005970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005974:	4931      	ldr	r1, [pc, #196]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005976:	4313      	orrs	r3, r2
 8005978:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800597a:	4b30      	ldr	r3, [pc, #192]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	492d      	ldr	r1, [pc, #180]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800598c:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	f023 0220 	bic.w	r2, r3, #32
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	4928      	ldr	r1, [pc, #160]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800599e:	4b27      	ldr	r3, [pc, #156]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	4a26      	ldr	r2, [pc, #152]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059a4:	f023 0310 	bic.w	r3, r3, #16
 80059a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059aa:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ae:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <RCCEx_PLL2_Config+0x160>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	69d2      	ldr	r2, [r2, #28]
 80059b6:	00d2      	lsls	r2, r2, #3
 80059b8:	4920      	ldr	r1, [pc, #128]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059be:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059c4:	f043 0310 	orr.w	r3, r3, #16
 80059c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059dc:	e00f      	b.n	80059fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d106      	bne.n	80059f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	4a14      	ldr	r2, [pc, #80]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059f0:	e005      	b.n	80059fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 80059f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fa fed9 	bl	80007c0 <HAL_GetTick>
 8005a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a10:	e008      	b.n	8005a24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a12:	f7fa fed5 	bl	80007c0 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <RCCEx_PLL2_Config+0x15c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	ffff0007 	.word	0xffff0007

08005a44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a52:	4b53      	ldr	r3, [pc, #332]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d101      	bne.n	8005a62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e099      	b.n	8005b96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a62:	4b4f      	ldr	r3, [pc, #316]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a4e      	ldr	r2, [pc, #312]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6e:	f7fa fea7 	bl	80007c0 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a74:	e008      	b.n	8005a88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a76:	f7fa fea3 	bl	80007c0 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e086      	b.n	8005b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a88:	4b45      	ldr	r3, [pc, #276]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f0      	bne.n	8005a76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a94:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	051b      	lsls	r3, r3, #20
 8005aa2:	493f      	ldr	r1, [pc, #252]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	025b      	lsls	r3, r3, #9
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ad8:	4931      	ldr	r1, [pc, #196]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ade:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	492d      	ldr	r1, [pc, #180]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4928      	ldr	r1, [pc, #160]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b02:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b0e:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <RCCEx_PLL3_Config+0x160>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	69d2      	ldr	r2, [r2, #28]
 8005b1a:	00d2      	lsls	r2, r2, #3
 8005b1c:	4920      	ldr	r1, [pc, #128]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b34:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b40:	e00f      	b.n	8005b62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b48:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b54:	e005      	b.n	8005b62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6e:	f7fa fe27 	bl	80007c0 <HAL_GetTick>
 8005b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b74:	e008      	b.n	8005b88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b76:	f7fa fe23 	bl	80007c0 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <RCCEx_PLL3_Config+0x15c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	ffff0007 	.word	0xffff0007

08005ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e049      	b.n	8005c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 fdba 	bl	8008748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 faa2 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e049      	b.n	8005cfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f841 	bl	8005d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f000 fa4b 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e0ff      	b.n	8005f36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b14      	cmp	r3, #20
 8005d42:	f200 80f0 	bhi.w	8005f26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005f27 	.word	0x08005f27
 8005d54:	08005f27 	.word	0x08005f27
 8005d58:	08005f27 	.word	0x08005f27
 8005d5c:	08005de1 	.word	0x08005de1
 8005d60:	08005f27 	.word	0x08005f27
 8005d64:	08005f27 	.word	0x08005f27
 8005d68:	08005f27 	.word	0x08005f27
 8005d6c:	08005e23 	.word	0x08005e23
 8005d70:	08005f27 	.word	0x08005f27
 8005d74:	08005f27 	.word	0x08005f27
 8005d78:	08005f27 	.word	0x08005f27
 8005d7c:	08005e63 	.word	0x08005e63
 8005d80:	08005f27 	.word	0x08005f27
 8005d84:	08005f27 	.word	0x08005f27
 8005d88:	08005f27 	.word	0x08005f27
 8005d8c:	08005ea5 	.word	0x08005ea5
 8005d90:	08005f27 	.word	0x08005f27
 8005d94:	08005f27 	.word	0x08005f27
 8005d98:	08005f27 	.word	0x08005f27
 8005d9c:	08005ee5 	.word	0x08005ee5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fa68 	bl	800627c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0208 	orr.w	r2, r2, #8
 8005dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0204 	bic.w	r2, r2, #4
 8005dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6999      	ldr	r1, [r3, #24]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	619a      	str	r2, [r3, #24]
      break;
 8005dde:	e0a5      	b.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fad8 	bl	800639c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6999      	ldr	r1, [r3, #24]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	619a      	str	r2, [r3, #24]
      break;
 8005e20:	e084      	b.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fb41 	bl	80064b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0208 	orr.w	r2, r2, #8
 8005e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0204 	bic.w	r2, r2, #4
 8005e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69d9      	ldr	r1, [r3, #28]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	61da      	str	r2, [r3, #28]
      break;
 8005e60:	e064      	b.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fba9 	bl	80065c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69d9      	ldr	r1, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	021a      	lsls	r2, r3, #8
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	61da      	str	r2, [r3, #28]
      break;
 8005ea2:	e043      	b.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fbf2 	bl	8006694 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0208 	orr.w	r2, r2, #8
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0204 	bic.w	r2, r2, #4
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ee2:	e023      	b.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fc36 	bl	800675c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	021a      	lsls	r2, r3, #8
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f24:	e002      	b.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
      break;
 8005f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop

08005f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIM_ConfigClockSource+0x1c>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e0dc      	b.n	8006116 <HAL_TIM_ConfigClockSource+0x1d6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a64      	ldr	r2, [pc, #400]	; (8006124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	f000 80a9 	beq.w	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005f98:	4a62      	ldr	r2, [pc, #392]	; (8006124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f200 80ae 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005fa0:	4a61      	ldr	r2, [pc, #388]	; (8006128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f000 80a1 	beq.w	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005fa8:	4a5f      	ldr	r2, [pc, #380]	; (8006128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f200 80a6 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005fb0:	4a5e      	ldr	r2, [pc, #376]	; (800612c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f000 8099 	beq.w	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005fb8:	4a5c      	ldr	r2, [pc, #368]	; (800612c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f200 809e 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005fc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fc4:	f000 8091 	beq.w	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005fc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fcc:	f200 8096 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd4:	f000 8089 	beq.w	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fdc:	f200 808e 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe4:	d03e      	beq.n	8006064 <HAL_TIM_ConfigClockSource+0x124>
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	f200 8087 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	f000 8086 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x1c2>
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d87f      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005ffc:	2b70      	cmp	r3, #112	; 0x70
 8005ffe:	d01a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0xf6>
 8006000:	2b70      	cmp	r3, #112	; 0x70
 8006002:	d87b      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8006004:	2b60      	cmp	r3, #96	; 0x60
 8006006:	d050      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x16a>
 8006008:	2b60      	cmp	r3, #96	; 0x60
 800600a:	d877      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 800600c:	2b50      	cmp	r3, #80	; 0x50
 800600e:	d03c      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x14a>
 8006010:	2b50      	cmp	r3, #80	; 0x50
 8006012:	d873      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d058      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x18a>
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d86f      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 800601c:	2b30      	cmp	r3, #48	; 0x30
 800601e:	d064      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8006020:	2b30      	cmp	r3, #48	; 0x30
 8006022:	d86b      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 8006024:	2b20      	cmp	r3, #32
 8006026:	d060      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d867      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d05c      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8006030:	2b10      	cmp	r3, #16
 8006032:	d05a      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x1aa>
 8006034:	e062      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6899      	ldr	r1, [r3, #8]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f000 fc6d 	bl	8006924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	609a      	str	r2, [r3, #8]
      break;
 8006062:	e04f      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6899      	ldr	r1, [r3, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f000 fc56 	bl	8006924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006086:	609a      	str	r2, [r3, #8]
      break;
 8006088:	e03c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	461a      	mov	r2, r3
 8006098:	f000 fbc6 	bl	8006828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2150      	movs	r1, #80	; 0x50
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fc20 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80060a8:	e02c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6859      	ldr	r1, [r3, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f000 fbe5 	bl	8006886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2160      	movs	r1, #96	; 0x60
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fc10 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80060c8:	e01c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 fba6 	bl	8006828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2140      	movs	r1, #64	; 0x40
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fc00 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80060e8:	e00c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f000 fbf7 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80060fa:	e003      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006100:	e000      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	ffceff88 	.word	0xffceff88
 8006124:	00100040 	.word	0x00100040
 8006128:	00100030 	.word	0x00100030
 800612c:	00100020 	.word	0x00100020

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a44      	ldr	r2, [pc, #272]	; (8006254 <TIM_Base_SetConfig+0x124>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a41      	ldr	r2, [pc, #260]	; (8006258 <TIM_Base_SetConfig+0x128>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a40      	ldr	r2, [pc, #256]	; (800625c <TIM_Base_SetConfig+0x12c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3f      	ldr	r2, [pc, #252]	; (8006260 <TIM_Base_SetConfig+0x130>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3e      	ldr	r2, [pc, #248]	; (8006264 <TIM_Base_SetConfig+0x134>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a33      	ldr	r2, [pc, #204]	; (8006254 <TIM_Base_SetConfig+0x124>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006190:	d023      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a30      	ldr	r2, [pc, #192]	; (8006258 <TIM_Base_SetConfig+0x128>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01f      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2f      	ldr	r2, [pc, #188]	; (800625c <TIM_Base_SetConfig+0x12c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01b      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2e      	ldr	r2, [pc, #184]	; (8006260 <TIM_Base_SetConfig+0x130>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d017      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <TIM_Base_SetConfig+0x134>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2c      	ldr	r2, [pc, #176]	; (8006268 <TIM_Base_SetConfig+0x138>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2b      	ldr	r2, [pc, #172]	; (800626c <TIM_Base_SetConfig+0x13c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2a      	ldr	r2, [pc, #168]	; (8006270 <TIM_Base_SetConfig+0x140>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a29      	ldr	r2, [pc, #164]	; (8006274 <TIM_Base_SetConfig+0x144>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a28      	ldr	r2, [pc, #160]	; (8006278 <TIM_Base_SetConfig+0x148>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a10      	ldr	r2, [pc, #64]	; (8006254 <TIM_Base_SetConfig+0x124>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00f      	beq.n	8006238 <TIM_Base_SetConfig+0x108>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a12      	ldr	r2, [pc, #72]	; (8006264 <TIM_Base_SetConfig+0x134>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00b      	beq.n	8006238 <TIM_Base_SetConfig+0x108>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a11      	ldr	r2, [pc, #68]	; (8006268 <TIM_Base_SetConfig+0x138>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <TIM_Base_SetConfig+0x108>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a10      	ldr	r2, [pc, #64]	; (800626c <TIM_Base_SetConfig+0x13c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0x108>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <TIM_Base_SetConfig+0x140>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d103      	bne.n	8006240 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40010400 	.word	0x40010400
 8006268:	40014000 	.word	0x40014000
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800
 8006274:	4000e000 	.word	0x4000e000
 8006278:	4000e400 	.word	0x4000e400

0800627c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0201 	bic.w	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4b37      	ldr	r3, [pc, #220]	; (8006384 <TIM_OC1_SetConfig+0x108>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f023 0302 	bic.w	r3, r3, #2
 80062c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <TIM_OC1_SetConfig+0x10c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_OC1_SetConfig+0x7c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a2c      	ldr	r2, [pc, #176]	; (800638c <TIM_OC1_SetConfig+0x110>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC1_SetConfig+0x7c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a2b      	ldr	r2, [pc, #172]	; (8006390 <TIM_OC1_SetConfig+0x114>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC1_SetConfig+0x7c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <TIM_OC1_SetConfig+0x118>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC1_SetConfig+0x7c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a29      	ldr	r2, [pc, #164]	; (8006398 <TIM_OC1_SetConfig+0x11c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d10c      	bne.n	8006312 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0308 	bic.w	r3, r3, #8
 80062fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 0304 	bic.w	r3, r3, #4
 8006310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <TIM_OC1_SetConfig+0x10c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00f      	beq.n	800633a <TIM_OC1_SetConfig+0xbe>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1b      	ldr	r2, [pc, #108]	; (800638c <TIM_OC1_SetConfig+0x110>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00b      	beq.n	800633a <TIM_OC1_SetConfig+0xbe>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <TIM_OC1_SetConfig+0x114>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <TIM_OC1_SetConfig+0xbe>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a19      	ldr	r2, [pc, #100]	; (8006394 <TIM_OC1_SetConfig+0x118>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_OC1_SetConfig+0xbe>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a18      	ldr	r2, [pc, #96]	; (8006398 <TIM_OC1_SetConfig+0x11c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d111      	bne.n	800635e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	fffeff8f 	.word	0xfffeff8f
 8006388:	40010000 	.word	0x40010000
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800

0800639c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0210 	bic.w	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4b34      	ldr	r3, [pc, #208]	; (8006498 <TIM_OC2_SetConfig+0xfc>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0320 	bic.w	r3, r3, #32
 80063e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a29      	ldr	r2, [pc, #164]	; (800649c <TIM_OC2_SetConfig+0x100>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC2_SetConfig+0x68>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <TIM_OC2_SetConfig+0x104>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10d      	bne.n	8006420 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <TIM_OC2_SetConfig+0x100>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00f      	beq.n	8006448 <TIM_OC2_SetConfig+0xac>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <TIM_OC2_SetConfig+0x104>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_OC2_SetConfig+0xac>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a1c      	ldr	r2, [pc, #112]	; (80064a4 <TIM_OC2_SetConfig+0x108>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_OC2_SetConfig+0xac>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a1b      	ldr	r2, [pc, #108]	; (80064a8 <TIM_OC2_SetConfig+0x10c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_OC2_SetConfig+0xac>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1a      	ldr	r2, [pc, #104]	; (80064ac <TIM_OC2_SetConfig+0x110>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d113      	bne.n	8006470 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800644e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	feff8fff 	.word	0xfeff8fff
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <TIM_OC3_SetConfig+0xf8>)
 80064dc:	4013      	ands	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a28      	ldr	r2, [pc, #160]	; (80065ac <TIM_OC3_SetConfig+0xfc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_OC3_SetConfig+0x66>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <TIM_OC3_SetConfig+0x100>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10d      	bne.n	8006532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <TIM_OC3_SetConfig+0xfc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00f      	beq.n	800655a <TIM_OC3_SetConfig+0xaa>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <TIM_OC3_SetConfig+0x100>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00b      	beq.n	800655a <TIM_OC3_SetConfig+0xaa>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1b      	ldr	r2, [pc, #108]	; (80065b4 <TIM_OC3_SetConfig+0x104>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <TIM_OC3_SetConfig+0xaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <TIM_OC3_SetConfig+0x108>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_OC3_SetConfig+0xaa>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a19      	ldr	r2, [pc, #100]	; (80065bc <TIM_OC3_SetConfig+0x10c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d113      	bne.n	8006582 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	fffeff8f 	.word	0xfffeff8f
 80065ac:	40010000 	.word	0x40010000
 80065b0:	40010400 	.word	0x40010400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800

080065c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <TIM_OC4_SetConfig+0xbc>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800660a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	031b      	lsls	r3, r3, #12
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a19      	ldr	r2, [pc, #100]	; (8006680 <TIM_OC4_SetConfig+0xc0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00f      	beq.n	8006640 <TIM_OC4_SetConfig+0x80>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <TIM_OC4_SetConfig+0xc4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00b      	beq.n	8006640 <TIM_OC4_SetConfig+0x80>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a17      	ldr	r2, [pc, #92]	; (8006688 <TIM_OC4_SetConfig+0xc8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d007      	beq.n	8006640 <TIM_OC4_SetConfig+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC4_SetConfig+0xcc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_OC4_SetConfig+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a15      	ldr	r2, [pc, #84]	; (8006690 <TIM_OC4_SetConfig+0xd0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d109      	bne.n	8006654 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	019b      	lsls	r3, r3, #6
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	feff8fff 	.word	0xfeff8fff
 8006680:	40010000 	.word	0x40010000
 8006684:	40010400 	.word	0x40010400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800

08006694 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4b21      	ldr	r3, [pc, #132]	; (8006744 <TIM_OC5_SetConfig+0xb0>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a18      	ldr	r2, [pc, #96]	; (8006748 <TIM_OC5_SetConfig+0xb4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00f      	beq.n	800670a <TIM_OC5_SetConfig+0x76>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a17      	ldr	r2, [pc, #92]	; (800674c <TIM_OC5_SetConfig+0xb8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00b      	beq.n	800670a <TIM_OC5_SetConfig+0x76>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a16      	ldr	r2, [pc, #88]	; (8006750 <TIM_OC5_SetConfig+0xbc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d007      	beq.n	800670a <TIM_OC5_SetConfig+0x76>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <TIM_OC5_SetConfig+0xc0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d003      	beq.n	800670a <TIM_OC5_SetConfig+0x76>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <TIM_OC5_SetConfig+0xc4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d109      	bne.n	800671e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	fffeff8f 	.word	0xfffeff8f
 8006748:	40010000 	.word	0x40010000
 800674c:	40010400 	.word	0x40010400
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800

0800675c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4b22      	ldr	r3, [pc, #136]	; (8006810 <TIM_OC6_SetConfig+0xb4>)
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800679e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	051b      	lsls	r3, r3, #20
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a19      	ldr	r2, [pc, #100]	; (8006814 <TIM_OC6_SetConfig+0xb8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00f      	beq.n	80067d4 <TIM_OC6_SetConfig+0x78>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <TIM_OC6_SetConfig+0xbc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <TIM_OC6_SetConfig+0x78>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a17      	ldr	r2, [pc, #92]	; (800681c <TIM_OC6_SetConfig+0xc0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_OC6_SetConfig+0x78>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a16      	ldr	r2, [pc, #88]	; (8006820 <TIM_OC6_SetConfig+0xc4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC6_SetConfig+0x78>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <TIM_OC6_SetConfig+0xc8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d109      	bne.n	80067e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	029b      	lsls	r3, r3, #10
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	feff8fff 	.word	0xfeff8fff
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800

08006828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f023 030a 	bic.w	r3, r3, #10
 8006864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006886:	b480      	push	{r7}
 8006888:	b087      	sub	sp, #28
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0210 	bic.w	r2, r3, #16
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <TIM_ITRx_SetConfig+0x38>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	f043 0307 	orr.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	609a      	str	r2, [r3, #8]
}
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	ffcfff8f 	.word	0xffcfff8f

08006924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	021a      	lsls	r2, r3, #8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	431a      	orrs	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e077      	b.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a35      	ldr	r2, [pc, #212]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d108      	bne.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a25      	ldr	r2, [pc, #148]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d02c      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d027      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d022      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d01d      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d018      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010400 	.word	0x40010400
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	40001800 	.word	0x40001800
 8006a90:	40014000 	.word	0x40014000
 8006a94:	4000e000 	.word	0x4000e000
 8006a98:	4000e400 	.word	0x4000e400

08006a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e042      	b.n	8006b34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fe99 	bl	80087f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2224      	movs	r2, #36	; 0x24
 8006aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f82c 	bl	8006b3c <UART_SetConfig>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e022      	b.n	8006b34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fe8c 	bl	8007814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 ff13 	bl	8007958 <UART_CheckIdleState>
 8006b32:	4603      	mov	r3, r0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b40:	b092      	sub	sp, #72	; 0x48
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4bbe      	ldr	r3, [pc, #760]	; (8006e64 <UART_SetConfig+0x328>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4ab3      	ldr	r2, [pc, #716]	; (8006e68 <UART_SetConfig+0x32c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	4baf      	ldr	r3, [pc, #700]	; (8006e6c <UART_SetConfig+0x330>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f023 010f 	bic.w	r1, r3, #15
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4aa6      	ldr	r2, [pc, #664]	; (8006e70 <UART_SetConfig+0x334>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d177      	bne.n	8006ccc <UART_SetConfig+0x190>
 8006bdc:	4ba5      	ldr	r3, [pc, #660]	; (8006e74 <UART_SetConfig+0x338>)
 8006bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be4:	2b28      	cmp	r3, #40	; 0x28
 8006be6:	d86d      	bhi.n	8006cc4 <UART_SetConfig+0x188>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0xb4>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c95 	.word	0x08006c95
 8006bf4:	08006cc5 	.word	0x08006cc5
 8006bf8:	08006cc5 	.word	0x08006cc5
 8006bfc:	08006cc5 	.word	0x08006cc5
 8006c00:	08006cc5 	.word	0x08006cc5
 8006c04:	08006cc5 	.word	0x08006cc5
 8006c08:	08006cc5 	.word	0x08006cc5
 8006c0c:	08006cc5 	.word	0x08006cc5
 8006c10:	08006c9d 	.word	0x08006c9d
 8006c14:	08006cc5 	.word	0x08006cc5
 8006c18:	08006cc5 	.word	0x08006cc5
 8006c1c:	08006cc5 	.word	0x08006cc5
 8006c20:	08006cc5 	.word	0x08006cc5
 8006c24:	08006cc5 	.word	0x08006cc5
 8006c28:	08006cc5 	.word	0x08006cc5
 8006c2c:	08006cc5 	.word	0x08006cc5
 8006c30:	08006ca5 	.word	0x08006ca5
 8006c34:	08006cc5 	.word	0x08006cc5
 8006c38:	08006cc5 	.word	0x08006cc5
 8006c3c:	08006cc5 	.word	0x08006cc5
 8006c40:	08006cc5 	.word	0x08006cc5
 8006c44:	08006cc5 	.word	0x08006cc5
 8006c48:	08006cc5 	.word	0x08006cc5
 8006c4c:	08006cc5 	.word	0x08006cc5
 8006c50:	08006cad 	.word	0x08006cad
 8006c54:	08006cc5 	.word	0x08006cc5
 8006c58:	08006cc5 	.word	0x08006cc5
 8006c5c:	08006cc5 	.word	0x08006cc5
 8006c60:	08006cc5 	.word	0x08006cc5
 8006c64:	08006cc5 	.word	0x08006cc5
 8006c68:	08006cc5 	.word	0x08006cc5
 8006c6c:	08006cc5 	.word	0x08006cc5
 8006c70:	08006cb5 	.word	0x08006cb5
 8006c74:	08006cc5 	.word	0x08006cc5
 8006c78:	08006cc5 	.word	0x08006cc5
 8006c7c:	08006cc5 	.word	0x08006cc5
 8006c80:	08006cc5 	.word	0x08006cc5
 8006c84:	08006cc5 	.word	0x08006cc5
 8006c88:	08006cc5 	.word	0x08006cc5
 8006c8c:	08006cc5 	.word	0x08006cc5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9a:	e326      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca2:	e322      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006caa:	e31e      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006cac:	2310      	movs	r3, #16
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb2:	e31a      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cba:	e316      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc2:	e312      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cca:	e30e      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a69      	ldr	r2, [pc, #420]	; (8006e78 <UART_SetConfig+0x33c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d130      	bne.n	8006d38 <UART_SetConfig+0x1fc>
 8006cd6:	4b67      	ldr	r3, [pc, #412]	; (8006e74 <UART_SetConfig+0x338>)
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d826      	bhi.n	8006d30 <UART_SetConfig+0x1f4>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <UART_SetConfig+0x1ac>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006d11 	.word	0x08006d11
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d06:	e2f0      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e2ec      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d10:	2308      	movs	r3, #8
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e2e8      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e2e4      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d20:	2320      	movs	r3, #32
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e2e0      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e2dc      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e2d8      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a4f      	ldr	r2, [pc, #316]	; (8006e7c <UART_SetConfig+0x340>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d130      	bne.n	8006da4 <UART_SetConfig+0x268>
 8006d42:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <UART_SetConfig+0x338>)
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d826      	bhi.n	8006d9c <UART_SetConfig+0x260>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0x218>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d6d 	.word	0x08006d6d
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	08006d7d 	.word	0x08006d7d
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006d8d 	.word	0x08006d8d
 8006d68:	08006d95 	.word	0x08006d95
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e2ba      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d74:	2304      	movs	r3, #4
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e2b6      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e2b2      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d84:	2310      	movs	r3, #16
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e2ae      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d92:	e2aa      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9a:	e2a6      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e2a2      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a35      	ldr	r2, [pc, #212]	; (8006e80 <UART_SetConfig+0x344>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d130      	bne.n	8006e10 <UART_SetConfig+0x2d4>
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <UART_SetConfig+0x338>)
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d826      	bhi.n	8006e08 <UART_SetConfig+0x2cc>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x284>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006dd9 	.word	0x08006dd9
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	08006de9 	.word	0x08006de9
 8006dcc:	08006df1 	.word	0x08006df1
 8006dd0:	08006df9 	.word	0x08006df9
 8006dd4:	08006e01 	.word	0x08006e01
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e284      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e280      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e27c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e278      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006df8:	2320      	movs	r3, #32
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e274      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e00:	2340      	movs	r3, #64	; 0x40
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e270      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e26c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <UART_SetConfig+0x348>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d142      	bne.n	8006ea0 <UART_SetConfig+0x364>
 8006e1a:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <UART_SetConfig+0x338>)
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	2b05      	cmp	r3, #5
 8006e24:	d838      	bhi.n	8006e98 <UART_SetConfig+0x35c>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <UART_SetConfig+0x2f0>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e45 	.word	0x08006e45
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e55 	.word	0x08006e55
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e89 	.word	0x08006e89
 8006e40:	08006e91 	.word	0x08006e91
 8006e44:	2300      	movs	r3, #0
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e24e      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e24a      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e246      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e242      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e64:	cfff69f3 	.word	0xcfff69f3
 8006e68:	58000c00 	.word	0x58000c00
 8006e6c:	11fff4ff 	.word	0x11fff4ff
 8006e70:	40011000 	.word	0x40011000
 8006e74:	58024400 	.word	0x58024400
 8006e78:	40004400 	.word	0x40004400
 8006e7c:	40004800 	.word	0x40004800
 8006e80:	40004c00 	.word	0x40004c00
 8006e84:	40005000 	.word	0x40005000
 8006e88:	2320      	movs	r3, #32
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e22c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e90:	2340      	movs	r3, #64	; 0x40
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e228      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e224      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4ab1      	ldr	r2, [pc, #708]	; (800716c <UART_SetConfig+0x630>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d176      	bne.n	8006f98 <UART_SetConfig+0x45c>
 8006eaa:	4bb1      	ldr	r3, [pc, #708]	; (8007170 <UART_SetConfig+0x634>)
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eb2:	2b28      	cmp	r3, #40	; 0x28
 8006eb4:	d86c      	bhi.n	8006f90 <UART_SetConfig+0x454>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x380>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f61 	.word	0x08006f61
 8006ec0:	08006f91 	.word	0x08006f91
 8006ec4:	08006f91 	.word	0x08006f91
 8006ec8:	08006f91 	.word	0x08006f91
 8006ecc:	08006f91 	.word	0x08006f91
 8006ed0:	08006f91 	.word	0x08006f91
 8006ed4:	08006f91 	.word	0x08006f91
 8006ed8:	08006f91 	.word	0x08006f91
 8006edc:	08006f69 	.word	0x08006f69
 8006ee0:	08006f91 	.word	0x08006f91
 8006ee4:	08006f91 	.word	0x08006f91
 8006ee8:	08006f91 	.word	0x08006f91
 8006eec:	08006f91 	.word	0x08006f91
 8006ef0:	08006f91 	.word	0x08006f91
 8006ef4:	08006f91 	.word	0x08006f91
 8006ef8:	08006f91 	.word	0x08006f91
 8006efc:	08006f71 	.word	0x08006f71
 8006f00:	08006f91 	.word	0x08006f91
 8006f04:	08006f91 	.word	0x08006f91
 8006f08:	08006f91 	.word	0x08006f91
 8006f0c:	08006f91 	.word	0x08006f91
 8006f10:	08006f91 	.word	0x08006f91
 8006f14:	08006f91 	.word	0x08006f91
 8006f18:	08006f91 	.word	0x08006f91
 8006f1c:	08006f79 	.word	0x08006f79
 8006f20:	08006f91 	.word	0x08006f91
 8006f24:	08006f91 	.word	0x08006f91
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f91 	.word	0x08006f91
 8006f30:	08006f91 	.word	0x08006f91
 8006f34:	08006f91 	.word	0x08006f91
 8006f38:	08006f91 	.word	0x08006f91
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f91 	.word	0x08006f91
 8006f44:	08006f91 	.word	0x08006f91
 8006f48:	08006f91 	.word	0x08006f91
 8006f4c:	08006f91 	.word	0x08006f91
 8006f50:	08006f91 	.word	0x08006f91
 8006f54:	08006f91 	.word	0x08006f91
 8006f58:	08006f91 	.word	0x08006f91
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e1c0      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e1bc      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f70:	2308      	movs	r3, #8
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e1b8      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e1b4      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f80:	2320      	movs	r3, #32
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e1b0      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f88:	2340      	movs	r3, #64	; 0x40
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e1ac      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e1a8      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a75      	ldr	r2, [pc, #468]	; (8007174 <UART_SetConfig+0x638>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d130      	bne.n	8007004 <UART_SetConfig+0x4c8>
 8006fa2:	4b73      	ldr	r3, [pc, #460]	; (8007170 <UART_SetConfig+0x634>)
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	d826      	bhi.n	8006ffc <UART_SetConfig+0x4c0>
 8006fae:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x478>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08006fcd 	.word	0x08006fcd
 8006fb8:	08006fd5 	.word	0x08006fd5
 8006fbc:	08006fdd 	.word	0x08006fdd
 8006fc0:	08006fe5 	.word	0x08006fe5
 8006fc4:	08006fed 	.word	0x08006fed
 8006fc8:	08006ff5 	.word	0x08006ff5
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e18a      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e186      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e182      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e17e      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006fec:	2320      	movs	r3, #32
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e17a      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006ff4:	2340      	movs	r3, #64	; 0x40
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e176      	b.n	80072ea <UART_SetConfig+0x7ae>
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e172      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5b      	ldr	r2, [pc, #364]	; (8007178 <UART_SetConfig+0x63c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d130      	bne.n	8007070 <UART_SetConfig+0x534>
 800700e:	4b58      	ldr	r3, [pc, #352]	; (8007170 <UART_SetConfig+0x634>)
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b05      	cmp	r3, #5
 8007018:	d826      	bhi.n	8007068 <UART_SetConfig+0x52c>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0x4e4>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007039 	.word	0x08007039
 8007024:	08007041 	.word	0x08007041
 8007028:	08007049 	.word	0x08007049
 800702c:	08007051 	.word	0x08007051
 8007030:	08007059 	.word	0x08007059
 8007034:	08007061 	.word	0x08007061
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e154      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007040:	2304      	movs	r3, #4
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e150      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007048:	2308      	movs	r3, #8
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e14c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007050:	2310      	movs	r3, #16
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e148      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007058:	2320      	movs	r3, #32
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e144      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007060:	2340      	movs	r3, #64	; 0x40
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e140      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706e:	e13c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a41      	ldr	r2, [pc, #260]	; (800717c <UART_SetConfig+0x640>)
 8007076:	4293      	cmp	r3, r2
 8007078:	f040 8082 	bne.w	8007180 <UART_SetConfig+0x644>
 800707c:	4b3c      	ldr	r3, [pc, #240]	; (8007170 <UART_SetConfig+0x634>)
 800707e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007084:	2b28      	cmp	r3, #40	; 0x28
 8007086:	d86d      	bhi.n	8007164 <UART_SetConfig+0x628>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <UART_SetConfig+0x554>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	08007135 	.word	0x08007135
 8007094:	08007165 	.word	0x08007165
 8007098:	08007165 	.word	0x08007165
 800709c:	08007165 	.word	0x08007165
 80070a0:	08007165 	.word	0x08007165
 80070a4:	08007165 	.word	0x08007165
 80070a8:	08007165 	.word	0x08007165
 80070ac:	08007165 	.word	0x08007165
 80070b0:	0800713d 	.word	0x0800713d
 80070b4:	08007165 	.word	0x08007165
 80070b8:	08007165 	.word	0x08007165
 80070bc:	08007165 	.word	0x08007165
 80070c0:	08007165 	.word	0x08007165
 80070c4:	08007165 	.word	0x08007165
 80070c8:	08007165 	.word	0x08007165
 80070cc:	08007165 	.word	0x08007165
 80070d0:	08007145 	.word	0x08007145
 80070d4:	08007165 	.word	0x08007165
 80070d8:	08007165 	.word	0x08007165
 80070dc:	08007165 	.word	0x08007165
 80070e0:	08007165 	.word	0x08007165
 80070e4:	08007165 	.word	0x08007165
 80070e8:	08007165 	.word	0x08007165
 80070ec:	08007165 	.word	0x08007165
 80070f0:	0800714d 	.word	0x0800714d
 80070f4:	08007165 	.word	0x08007165
 80070f8:	08007165 	.word	0x08007165
 80070fc:	08007165 	.word	0x08007165
 8007100:	08007165 	.word	0x08007165
 8007104:	08007165 	.word	0x08007165
 8007108:	08007165 	.word	0x08007165
 800710c:	08007165 	.word	0x08007165
 8007110:	08007155 	.word	0x08007155
 8007114:	08007165 	.word	0x08007165
 8007118:	08007165 	.word	0x08007165
 800711c:	08007165 	.word	0x08007165
 8007120:	08007165 	.word	0x08007165
 8007124:	08007165 	.word	0x08007165
 8007128:	08007165 	.word	0x08007165
 800712c:	08007165 	.word	0x08007165
 8007130:	0800715d 	.word	0x0800715d
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e0d6      	b.n	80072ea <UART_SetConfig+0x7ae>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e0d2      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e0ce      	b.n	80072ea <UART_SetConfig+0x7ae>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e0ca      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007154:	2320      	movs	r3, #32
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e0c6      	b.n	80072ea <UART_SetConfig+0x7ae>
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e0c2      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e0be      	b.n	80072ea <UART_SetConfig+0x7ae>
 800716c:	40011400 	.word	0x40011400
 8007170:	58024400 	.word	0x58024400
 8007174:	40007800 	.word	0x40007800
 8007178:	40007c00 	.word	0x40007c00
 800717c:	40011800 	.word	0x40011800
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4aad      	ldr	r2, [pc, #692]	; (800743c <UART_SetConfig+0x900>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d176      	bne.n	8007278 <UART_SetConfig+0x73c>
 800718a:	4bad      	ldr	r3, [pc, #692]	; (8007440 <UART_SetConfig+0x904>)
 800718c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007192:	2b28      	cmp	r3, #40	; 0x28
 8007194:	d86c      	bhi.n	8007270 <UART_SetConfig+0x734>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x660>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	08007241 	.word	0x08007241
 80071a0:	08007271 	.word	0x08007271
 80071a4:	08007271 	.word	0x08007271
 80071a8:	08007271 	.word	0x08007271
 80071ac:	08007271 	.word	0x08007271
 80071b0:	08007271 	.word	0x08007271
 80071b4:	08007271 	.word	0x08007271
 80071b8:	08007271 	.word	0x08007271
 80071bc:	08007249 	.word	0x08007249
 80071c0:	08007271 	.word	0x08007271
 80071c4:	08007271 	.word	0x08007271
 80071c8:	08007271 	.word	0x08007271
 80071cc:	08007271 	.word	0x08007271
 80071d0:	08007271 	.word	0x08007271
 80071d4:	08007271 	.word	0x08007271
 80071d8:	08007271 	.word	0x08007271
 80071dc:	08007251 	.word	0x08007251
 80071e0:	08007271 	.word	0x08007271
 80071e4:	08007271 	.word	0x08007271
 80071e8:	08007271 	.word	0x08007271
 80071ec:	08007271 	.word	0x08007271
 80071f0:	08007271 	.word	0x08007271
 80071f4:	08007271 	.word	0x08007271
 80071f8:	08007271 	.word	0x08007271
 80071fc:	08007259 	.word	0x08007259
 8007200:	08007271 	.word	0x08007271
 8007204:	08007271 	.word	0x08007271
 8007208:	08007271 	.word	0x08007271
 800720c:	08007271 	.word	0x08007271
 8007210:	08007271 	.word	0x08007271
 8007214:	08007271 	.word	0x08007271
 8007218:	08007271 	.word	0x08007271
 800721c:	08007261 	.word	0x08007261
 8007220:	08007271 	.word	0x08007271
 8007224:	08007271 	.word	0x08007271
 8007228:	08007271 	.word	0x08007271
 800722c:	08007271 	.word	0x08007271
 8007230:	08007271 	.word	0x08007271
 8007234:	08007271 	.word	0x08007271
 8007238:	08007271 	.word	0x08007271
 800723c:	08007269 	.word	0x08007269
 8007240:	2301      	movs	r3, #1
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e050      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e04c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e048      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e044      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e040      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e03c      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e038      	b.n	80072ea <UART_SetConfig+0x7ae>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a71      	ldr	r2, [pc, #452]	; (8007444 <UART_SetConfig+0x908>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d130      	bne.n	80072e4 <UART_SetConfig+0x7a8>
 8007282:	4b6f      	ldr	r3, [pc, #444]	; (8007440 <UART_SetConfig+0x904>)
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	2b05      	cmp	r3, #5
 800728c:	d826      	bhi.n	80072dc <UART_SetConfig+0x7a0>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0x758>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072ad 	.word	0x080072ad
 8007298:	080072b5 	.word	0x080072b5
 800729c:	080072bd 	.word	0x080072bd
 80072a0:	080072c5 	.word	0x080072c5
 80072a4:	080072cd 	.word	0x080072cd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	2302      	movs	r3, #2
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e01a      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e016      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e00e      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072cc:	2320      	movs	r3, #32
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e00a      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072d4:	2340      	movs	r3, #64	; 0x40
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e006      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072dc:	2380      	movs	r3, #128	; 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e002      	b.n	80072ea <UART_SetConfig+0x7ae>
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a55      	ldr	r2, [pc, #340]	; (8007444 <UART_SetConfig+0x908>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	f040 80f8 	bne.w	80074e6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	dc46      	bgt.n	800738c <UART_SetConfig+0x850>
 80072fe:	2b02      	cmp	r3, #2
 8007300:	db75      	blt.n	80073ee <UART_SetConfig+0x8b2>
 8007302:	3b02      	subs	r3, #2
 8007304:	2b1e      	cmp	r3, #30
 8007306:	d872      	bhi.n	80073ee <UART_SetConfig+0x8b2>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0x7d4>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007393 	.word	0x08007393
 8007314:	080073ef 	.word	0x080073ef
 8007318:	0800739b 	.word	0x0800739b
 800731c:	080073ef 	.word	0x080073ef
 8007320:	080073ef 	.word	0x080073ef
 8007324:	080073ef 	.word	0x080073ef
 8007328:	080073ab 	.word	0x080073ab
 800732c:	080073ef 	.word	0x080073ef
 8007330:	080073ef 	.word	0x080073ef
 8007334:	080073ef 	.word	0x080073ef
 8007338:	080073ef 	.word	0x080073ef
 800733c:	080073ef 	.word	0x080073ef
 8007340:	080073ef 	.word	0x080073ef
 8007344:	080073ef 	.word	0x080073ef
 8007348:	080073bb 	.word	0x080073bb
 800734c:	080073ef 	.word	0x080073ef
 8007350:	080073ef 	.word	0x080073ef
 8007354:	080073ef 	.word	0x080073ef
 8007358:	080073ef 	.word	0x080073ef
 800735c:	080073ef 	.word	0x080073ef
 8007360:	080073ef 	.word	0x080073ef
 8007364:	080073ef 	.word	0x080073ef
 8007368:	080073ef 	.word	0x080073ef
 800736c:	080073ef 	.word	0x080073ef
 8007370:	080073ef 	.word	0x080073ef
 8007374:	080073ef 	.word	0x080073ef
 8007378:	080073ef 	.word	0x080073ef
 800737c:	080073ef 	.word	0x080073ef
 8007380:	080073ef 	.word	0x080073ef
 8007384:	080073ef 	.word	0x080073ef
 8007388:	080073e1 	.word	0x080073e1
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d02a      	beq.n	80073e6 <UART_SetConfig+0x8aa>
 8007390:	e02d      	b.n	80073ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007392:	f7fd fe95 	bl	80050c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007398:	e02f      	b.n	80073fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fd fea4 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a8:	e027      	b.n	80073fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073aa:	f107 0318 	add.w	r3, r7, #24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fd fff0 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b8:	e01f      	b.n	80073fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ba:	4b21      	ldr	r3, [pc, #132]	; (8007440 <UART_SetConfig+0x904>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <UART_SetConfig+0x904>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	08db      	lsrs	r3, r3, #3
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <UART_SetConfig+0x90c>)
 80073d2:	fa22 f303 	lsr.w	r3, r2, r3
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073d8:	e00f      	b.n	80073fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <UART_SetConfig+0x90c>)
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073de:	e00c      	b.n	80073fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073e0:	4b1a      	ldr	r3, [pc, #104]	; (800744c <UART_SetConfig+0x910>)
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073e4:	e009      	b.n	80073fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ec:	e005      	b.n	80073fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 81ee 	beq.w	80077de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <UART_SetConfig+0x914>)
 8007408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800740c:	461a      	mov	r2, r3
 800740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007410:	fbb3 f3f2 	udiv	r3, r3, r2
 8007414:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4413      	add	r3, r2
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	429a      	cmp	r2, r3
 8007424:	d305      	bcc.n	8007432 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800742c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742e:	429a      	cmp	r2, r3
 8007430:	d910      	bls.n	8007454 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007438:	e1d1      	b.n	80077de <UART_SetConfig+0xca2>
 800743a:	bf00      	nop
 800743c:	40011c00 	.word	0x40011c00
 8007440:	58024400 	.word	0x58024400
 8007444:	58000c00 	.word	0x58000c00
 8007448:	03d09000 	.word	0x03d09000
 800744c:	003d0900 	.word	0x003d0900
 8007450:	08009b48 	.word	0x08009b48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007456:	2200      	movs	r2, #0
 8007458:	60bb      	str	r3, [r7, #8]
 800745a:	60fa      	str	r2, [r7, #12]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	4ac0      	ldr	r2, [pc, #768]	; (8007764 <UART_SetConfig+0xc28>)
 8007462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007466:	b29b      	uxth	r3, r3
 8007468:	2200      	movs	r2, #0
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007476:	f7f8 ff9b 	bl	80003b0 <__aeabi_uldivmod>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	020b      	lsls	r3, r1, #8
 800748c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007490:	0202      	lsls	r2, r0, #8
 8007492:	6979      	ldr	r1, [r7, #20]
 8007494:	6849      	ldr	r1, [r1, #4]
 8007496:	0849      	lsrs	r1, r1, #1
 8007498:	2000      	movs	r0, #0
 800749a:	460c      	mov	r4, r1
 800749c:	4605      	mov	r5, r0
 800749e:	eb12 0804 	adds.w	r8, r2, r4
 80074a2:	eb43 0905 	adc.w	r9, r3, r5
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	469a      	mov	sl, r3
 80074ae:	4693      	mov	fp, r2
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	4640      	mov	r0, r8
 80074b6:	4649      	mov	r1, r9
 80074b8:	f7f8 ff7a 	bl	80003b0 <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4613      	mov	r3, r2
 80074c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ca:	d308      	bcc.n	80074de <UART_SetConfig+0x9a2>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074d2:	d204      	bcs.n	80074de <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074da:	60da      	str	r2, [r3, #12]
 80074dc:	e17f      	b.n	80077de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074e4:	e17b      	b.n	80077de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	f040 80bd 	bne.w	800766c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80074f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	dc48      	bgt.n	800758c <UART_SetConfig+0xa50>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	db7b      	blt.n	80075f6 <UART_SetConfig+0xaba>
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d879      	bhi.n	80075f6 <UART_SetConfig+0xaba>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0x9cc>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007593 	.word	0x08007593
 800750c:	0800759b 	.word	0x0800759b
 8007510:	080075f7 	.word	0x080075f7
 8007514:	080075f7 	.word	0x080075f7
 8007518:	080075a3 	.word	0x080075a3
 800751c:	080075f7 	.word	0x080075f7
 8007520:	080075f7 	.word	0x080075f7
 8007524:	080075f7 	.word	0x080075f7
 8007528:	080075b3 	.word	0x080075b3
 800752c:	080075f7 	.word	0x080075f7
 8007530:	080075f7 	.word	0x080075f7
 8007534:	080075f7 	.word	0x080075f7
 8007538:	080075f7 	.word	0x080075f7
 800753c:	080075f7 	.word	0x080075f7
 8007540:	080075f7 	.word	0x080075f7
 8007544:	080075f7 	.word	0x080075f7
 8007548:	080075c3 	.word	0x080075c3
 800754c:	080075f7 	.word	0x080075f7
 8007550:	080075f7 	.word	0x080075f7
 8007554:	080075f7 	.word	0x080075f7
 8007558:	080075f7 	.word	0x080075f7
 800755c:	080075f7 	.word	0x080075f7
 8007560:	080075f7 	.word	0x080075f7
 8007564:	080075f7 	.word	0x080075f7
 8007568:	080075f7 	.word	0x080075f7
 800756c:	080075f7 	.word	0x080075f7
 8007570:	080075f7 	.word	0x080075f7
 8007574:	080075f7 	.word	0x080075f7
 8007578:	080075f7 	.word	0x080075f7
 800757c:	080075f7 	.word	0x080075f7
 8007580:	080075f7 	.word	0x080075f7
 8007584:	080075f7 	.word	0x080075f7
 8007588:	080075e9 	.word	0x080075e9
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d02e      	beq.n	80075ee <UART_SetConfig+0xab2>
 8007590:	e031      	b.n	80075f6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007592:	f7fb fef7 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8007596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007598:	e033      	b.n	8007602 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800759a:	f7fb ff09 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 800759e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075a0:	e02f      	b.n	8007602 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fda0 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b0:	e027      	b.n	8007602 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b2:	f107 0318 	add.w	r3, r7, #24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd feec 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075c0:	e01f      	b.n	8007602 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c2:	4b69      	ldr	r3, [pc, #420]	; (8007768 <UART_SetConfig+0xc2c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ce:	4b66      	ldr	r3, [pc, #408]	; (8007768 <UART_SetConfig+0xc2c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	08db      	lsrs	r3, r3, #3
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	4a64      	ldr	r2, [pc, #400]	; (800776c <UART_SetConfig+0xc30>)
 80075da:	fa22 f303 	lsr.w	r3, r2, r3
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075e0:	e00f      	b.n	8007602 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80075e2:	4b62      	ldr	r3, [pc, #392]	; (800776c <UART_SetConfig+0xc30>)
 80075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e6:	e00c      	b.n	8007602 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075e8:	4b61      	ldr	r3, [pc, #388]	; (8007770 <UART_SetConfig+0xc34>)
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ec:	e009      	b.n	8007602 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f4:	e005      	b.n	8007602 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80ea 	beq.w	80077de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	4a55      	ldr	r2, [pc, #340]	; (8007764 <UART_SetConfig+0xc28>)
 8007610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007614:	461a      	mov	r2, r3
 8007616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007618:	fbb3 f3f2 	udiv	r3, r3, r2
 800761c:	005a      	lsls	r2, r3, #1
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	441a      	add	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	fbb2 f3f3 	udiv	r3, r2, r3
 800762e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	2b0f      	cmp	r3, #15
 8007634:	d916      	bls.n	8007664 <UART_SetConfig+0xb28>
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800763c:	d212      	bcs.n	8007664 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	b29b      	uxth	r3, r3
 8007642:	f023 030f 	bic.w	r3, r3, #15
 8007646:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	b29b      	uxth	r3, r3
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	b29a      	uxth	r2, r3
 8007654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007656:	4313      	orrs	r3, r2
 8007658:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e0bc      	b.n	80077de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800766a:	e0b8      	b.n	80077de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800766c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007670:	2b20      	cmp	r3, #32
 8007672:	dc4b      	bgt.n	800770c <UART_SetConfig+0xbd0>
 8007674:	2b00      	cmp	r3, #0
 8007676:	f2c0 8087 	blt.w	8007788 <UART_SetConfig+0xc4c>
 800767a:	2b20      	cmp	r3, #32
 800767c:	f200 8084 	bhi.w	8007788 <UART_SetConfig+0xc4c>
 8007680:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <UART_SetConfig+0xb4c>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	08007713 	.word	0x08007713
 800768c:	0800771b 	.word	0x0800771b
 8007690:	08007789 	.word	0x08007789
 8007694:	08007789 	.word	0x08007789
 8007698:	08007723 	.word	0x08007723
 800769c:	08007789 	.word	0x08007789
 80076a0:	08007789 	.word	0x08007789
 80076a4:	08007789 	.word	0x08007789
 80076a8:	08007733 	.word	0x08007733
 80076ac:	08007789 	.word	0x08007789
 80076b0:	08007789 	.word	0x08007789
 80076b4:	08007789 	.word	0x08007789
 80076b8:	08007789 	.word	0x08007789
 80076bc:	08007789 	.word	0x08007789
 80076c0:	08007789 	.word	0x08007789
 80076c4:	08007789 	.word	0x08007789
 80076c8:	08007743 	.word	0x08007743
 80076cc:	08007789 	.word	0x08007789
 80076d0:	08007789 	.word	0x08007789
 80076d4:	08007789 	.word	0x08007789
 80076d8:	08007789 	.word	0x08007789
 80076dc:	08007789 	.word	0x08007789
 80076e0:	08007789 	.word	0x08007789
 80076e4:	08007789 	.word	0x08007789
 80076e8:	08007789 	.word	0x08007789
 80076ec:	08007789 	.word	0x08007789
 80076f0:	08007789 	.word	0x08007789
 80076f4:	08007789 	.word	0x08007789
 80076f8:	08007789 	.word	0x08007789
 80076fc:	08007789 	.word	0x08007789
 8007700:	08007789 	.word	0x08007789
 8007704:	08007789 	.word	0x08007789
 8007708:	0800777b 	.word	0x0800777b
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	d037      	beq.n	8007780 <UART_SetConfig+0xc44>
 8007710:	e03a      	b.n	8007788 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007712:	f7fb fe37 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8007716:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007718:	e03c      	b.n	8007794 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800771a:	f7fb fe49 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 800771e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007720:	e038      	b.n	8007794 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd fce0 	bl	80050ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007730:	e030      	b.n	8007794 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007732:	f107 0318 	add.w	r3, r7, #24
 8007736:	4618      	mov	r0, r3
 8007738:	f7fd fe2c 	bl	8005394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007740:	e028      	b.n	8007794 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <UART_SetConfig+0xc2c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d012      	beq.n	8007774 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <UART_SetConfig+0xc2c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	08db      	lsrs	r3, r3, #3
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	4a04      	ldr	r2, [pc, #16]	; (800776c <UART_SetConfig+0xc30>)
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007760:	e018      	b.n	8007794 <UART_SetConfig+0xc58>
 8007762:	bf00      	nop
 8007764:	08009b48 	.word	0x08009b48
 8007768:	58024400 	.word	0x58024400
 800776c:	03d09000 	.word	0x03d09000
 8007770:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007774:	4b24      	ldr	r3, [pc, #144]	; (8007808 <UART_SetConfig+0xccc>)
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007778:	e00c      	b.n	8007794 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <UART_SetConfig+0xcd0>)
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800777e:	e009      	b.n	8007794 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007786:	e005      	b.n	8007794 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007792:	bf00      	nop
    }

    if (pclk != 0U)
 8007794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d021      	beq.n	80077de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	4a1c      	ldr	r2, [pc, #112]	; (8007810 <UART_SetConfig+0xcd4>)
 80077a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	085b      	lsrs	r3, r3, #1
 80077b2:	441a      	add	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	2b0f      	cmp	r3, #15
 80077c2:	d909      	bls.n	80077d8 <UART_SetConfig+0xc9c>
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ca:	d205      	bcs.n	80077d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60da      	str	r2, [r3, #12]
 80077d6:	e002      	b.n	80077de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2200      	movs	r2, #0
 80077f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3748      	adds	r7, #72	; 0x48
 8007802:	46bd      	mov	sp, r7
 8007804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007808:	03d09000 	.word	0x03d09000
 800780c:	003d0900 	.word	0x003d0900
 8007810:	08009b48 	.word	0x08009b48

08007814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01a      	beq.n	800792a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007912:	d10a      	bne.n	800792a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	605a      	str	r2, [r3, #4]
  }
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b098      	sub	sp, #96	; 0x60
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007968:	f7f8 ff2a 	bl	80007c0 <HAL_GetTick>
 800796c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b08      	cmp	r3, #8
 800797a:	d12f      	bne.n	80079dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800797c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007984:	2200      	movs	r2, #0
 8007986:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f88e 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d022      	beq.n	80079dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079aa:	653b      	str	r3, [r7, #80]	; 0x50
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
 80079b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e063      	b.n	8007aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d149      	bne.n	8007a7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f2:	2200      	movs	r2, #0
 80079f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f857 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d03c      	beq.n	8007a7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	623b      	str	r3, [r7, #32]
   return(result);
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a22:	633b      	str	r3, [r7, #48]	; 0x30
 8007a24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e6      	bne.n	8007a04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a56:	61fa      	str	r2, [r7, #28]
 8007a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	69b9      	ldr	r1, [r7, #24]
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	617b      	str	r3, [r7, #20]
   return(result);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e5      	bne.n	8007a36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e012      	b.n	8007aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3758      	adds	r7, #88	; 0x58
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007abc:	e049      	b.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d045      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7f8 fe7b 	bl	80007c0 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <UART_WaitOnFlagUntilTimeout+0x30>
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e048      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d031      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	f003 0308 	and.w	r3, r3, #8
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d110      	bne.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2208      	movs	r2, #8
 8007b02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f839 	bl	8007b7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e029      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2c:	d111      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f81f 	bl	8007b7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e00f      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69da      	ldr	r2, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d0a6      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b095      	sub	sp, #84	; 0x54
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e6      	bne.n	8007b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	4b1e      	ldr	r3, [pc, #120]	; (8007c44 <UART_EndRxTransfer+0xc8>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d118      	bne.n	8007c24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f023 0310 	bic.w	r3, r3, #16
 8007c06:	647b      	str	r3, [r7, #68]	; 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6979      	ldr	r1, [r7, #20]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c38:	bf00      	nop
 8007c3a:	3754      	adds	r7, #84	; 0x54
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	effffffe 	.word	0xeffffffe

08007c48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d101      	bne.n	8007c5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	e027      	b.n	8007cae <HAL_UARTEx_DisableFifoMode+0x66>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2224      	movs	r2, #36	; 0x24
 8007c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0201 	bic.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cce:	2302      	movs	r3, #2
 8007cd0:	e02d      	b.n	8007d2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2224      	movs	r2, #36	; 0x24
 8007cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0201 	bic.w	r2, r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f850 	bl	8007db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e02d      	b.n	8007daa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2224      	movs	r2, #36	; 0x24
 8007d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f812 	bl	8007db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d108      	bne.n	8007dd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007dd4:	e031      	b.n	8007e3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dd6:	2310      	movs	r3, #16
 8007dd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dda:	2310      	movs	r3, #16
 8007ddc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	0e5b      	lsrs	r3, r3, #25
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	0f5b      	lsrs	r3, r3, #29
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	7b3a      	ldrb	r2, [r7, #12]
 8007e02:	4911      	ldr	r1, [pc, #68]	; (8007e48 <UARTEx_SetNbDataToProcess+0x94>)
 8007e04:	5c8a      	ldrb	r2, [r1, r2]
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e0a:	7b3a      	ldrb	r2, [r7, #12]
 8007e0c:	490f      	ldr	r1, [pc, #60]	; (8007e4c <UARTEx_SetNbDataToProcess+0x98>)
 8007e0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	7b7a      	ldrb	r2, [r7, #13]
 8007e20:	4909      	ldr	r1, [pc, #36]	; (8007e48 <UARTEx_SetNbDataToProcess+0x94>)
 8007e22:	5c8a      	ldrb	r2, [r1, r2]
 8007e24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e28:	7b7a      	ldrb	r2, [r7, #13]
 8007e2a:	4908      	ldr	r1, [pc, #32]	; (8007e4c <UARTEx_SetNbDataToProcess+0x98>)
 8007e2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	08009b60 	.word	0x08009b60
 8007e4c:	08009b68 	.word	0x08009b68

08007e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t AD_RES = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e5a:	f7f8 fc2b 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e5e:	f000 f82b 	bl	8007eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e62:	f000 fa03 	bl	800826c <MX_GPIO_Init>
  MX_ETH_Init();
 8007e66:	f000 f8eb 	bl	8008040 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8007e6a:	f000 f9ab 	bl	80081c4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8007e6e:	f000 f9f5 	bl	800825c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8007e72:	f000 f891 	bl	8007f98 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007e76:	f000 f92f 	bl	80080d8 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	480b      	ldr	r0, [pc, #44]	; (8007eac <main+0x5c>)
 8007e7e:	f7fa faf2 	bl	8002466 <HAL_GPIO_TogglePin>

	  HAL_ADC_Start(&hadc1);
 8007e82:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <main+0x60>)
 8007e84:	f7f8 ffda 	bl	8000e3c <HAL_ADC_Start>
	  // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8007e88:	2101      	movs	r1, #1
 8007e8a:	4809      	ldr	r0, [pc, #36]	; (8007eb0 <main+0x60>)
 8007e8c:	f7f9 f8a0 	bl	8000fd0 <HAL_ADC_PollForConversion>
	  // Read The ADC Conversion Result & Map It To PWM DutyCycle

	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8007e90:	4807      	ldr	r0, [pc, #28]	; (8007eb0 <main+0x60>)
 8007e92:	f7f9 f991 	bl	80011b8 <HAL_ADC_GetValue>
 8007e96:	4603      	mov	r3, r0
 8007e98:	80fb      	strh	r3, [r7, #6]

	  printf("%u\n", AD_RES);
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <main+0x64>)
 8007ea0:	f000 feb6 	bl	8008c10 <iprintf>

	  HAL_Delay (100);   /* Insert delay 100 ms */
 8007ea4:	2064      	movs	r0, #100	; 0x64
 8007ea6:	f7f8 fc97 	bl	80007d8 <HAL_Delay>
  {
 8007eaa:	e7e6      	b.n	8007e7a <main+0x2a>
 8007eac:	58020400 	.word	0x58020400
 8007eb0:	2400018c 	.word	0x2400018c
 8007eb4:	08009b44 	.word	0x08009b44

08007eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b09c      	sub	sp, #112	; 0x70
 8007ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec2:	224c      	movs	r2, #76	; 0x4c
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fe9a 	bl	8008c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ecc:	1d3b      	adds	r3, r7, #4
 8007ece:	2220      	movs	r2, #32
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fe94 	bl	8008c00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007ed8:	2002      	movs	r0, #2
 8007eda:	f7fa fadf 	bl	800249c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	4b2c      	ldr	r3, [pc, #176]	; (8007f94 <SystemClock_Config+0xdc>)
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	4a2b      	ldr	r2, [pc, #172]	; (8007f94 <SystemClock_Config+0xdc>)
 8007ee8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007eec:	6193      	str	r3, [r2, #24]
 8007eee:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <SystemClock_Config+0xdc>)
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007efa:	bf00      	nop
 8007efc:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <SystemClock_Config+0xdc>)
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d1f8      	bne.n	8007efc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8007f0a:	2321      	movs	r3, #33	; 0x21
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007f0e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007f14:	2301      	movs	r3, #1
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007f20:	2304      	movs	r3, #4
 8007f22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8007f24:	f240 1313 	movw	r3, #275	; 0x113
 8007f28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007f2e:	2304      	movs	r3, #4
 8007f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007f32:	2302      	movs	r3, #2
 8007f34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8007f36:	2304      	movs	r3, #4
 8007f38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fa fae2 	bl	8002510 <HAL_RCC_OscConfig>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8007f52:	f000 fa99 	bl	8008488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f56:	233f      	movs	r3, #63	; 0x3f
 8007f58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007f62:	2308      	movs	r3, #8
 8007f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007f66:	2340      	movs	r3, #64	; 0x40
 8007f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007f6a:	2340      	movs	r3, #64	; 0x40
 8007f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007f78:	1d3b      	adds	r3, r7, #4
 8007f7a:	2103      	movs	r1, #3
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fa fea1 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007f88:	f000 fa7e 	bl	8008488 <Error_Handler>
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3770      	adds	r7, #112	; 0x70
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	58024800 	.word	0x58024800

08007f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	605a      	str	r2, [r3, #4]
 8007fa6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007fa8:	4b23      	ldr	r3, [pc, #140]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007faa:	4a24      	ldr	r2, [pc, #144]	; (800803c <MX_ADC1_Init+0xa4>)
 8007fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007fae:	4b22      	ldr	r3, [pc, #136]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007fb4:	4b20      	ldr	r3, [pc, #128]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007fba:	4b1f      	ldr	r3, [pc, #124]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007fd2:	4b19      	ldr	r3, [pc, #100]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007fe0:	4b15      	ldr	r3, [pc, #84]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007ff2:	4b11      	ldr	r3, [pc, #68]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <MX_ADC1_Init+0xa0>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8007ffe:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <MX_ADC1_Init+0xa0>)
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008006:	480c      	ldr	r0, [pc, #48]	; (8008038 <MX_ADC1_Init+0xa0>)
 8008008:	f7f8 fd10 	bl	8000a2c <HAL_ADC_Init>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8008012:	f000 fa39 	bl	8008488 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008016:	2300      	movs	r3, #0
 8008018:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4806      	ldr	r0, [pc, #24]	; (8008038 <MX_ADC1_Init+0xa0>)
 8008020:	f7f9 fa76 	bl	8001510 <HAL_ADCEx_MultiModeConfigChannel>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800802a:	f000 fa2d 	bl	8008488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	2400018c 	.word	0x2400018c
 800803c:	40022000 	.word	0x40022000

08008040 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8008044:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <MX_ETH_Init+0x80>)
 8008046:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <MX_ETH_Init+0x84>)
 8008048:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800804a:	4b1f      	ldr	r3, [pc, #124]	; (80080c8 <MX_ETH_Init+0x88>)
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8008050:	4b1d      	ldr	r3, [pc, #116]	; (80080c8 <MX_ETH_Init+0x88>)
 8008052:	2280      	movs	r2, #128	; 0x80
 8008054:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8008056:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <MX_ETH_Init+0x88>)
 8008058:	22e1      	movs	r2, #225	; 0xe1
 800805a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <MX_ETH_Init+0x88>)
 800805e:	2200      	movs	r2, #0
 8008060:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8008062:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <MX_ETH_Init+0x88>)
 8008064:	2200      	movs	r2, #0
 8008066:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8008068:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <MX_ETH_Init+0x88>)
 800806a:	2200      	movs	r2, #0
 800806c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800806e:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <MX_ETH_Init+0x80>)
 8008070:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <MX_ETH_Init+0x88>)
 8008072:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008074:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <MX_ETH_Init+0x80>)
 8008076:	2201      	movs	r2, #1
 8008078:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800807a:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <MX_ETH_Init+0x80>)
 800807c:	4a13      	ldr	r2, [pc, #76]	; (80080cc <MX_ETH_Init+0x8c>)
 800807e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <MX_ETH_Init+0x80>)
 8008082:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <MX_ETH_Init+0x90>)
 8008084:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008086:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <MX_ETH_Init+0x80>)
 8008088:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800808c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800808e:	480c      	ldr	r0, [pc, #48]	; (80080c0 <MX_ETH_Init+0x80>)
 8008090:	f7f9 fc04 	bl	800189c <HAL_ETH_Init>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800809a:	f000 f9f5 	bl	8008488 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800809e:	2238      	movs	r2, #56	; 0x38
 80080a0:	2100      	movs	r1, #0
 80080a2:	480c      	ldr	r0, [pc, #48]	; (80080d4 <MX_ETH_Init+0x94>)
 80080a4:	f000 fdac 	bl	8008c00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <MX_ETH_Init+0x94>)
 80080aa:	2221      	movs	r2, #33	; 0x21
 80080ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <MX_ETH_Init+0x94>)
 80080b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80080b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <MX_ETH_Init+0x94>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80080bc:	bf00      	nop
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	240001fc 	.word	0x240001fc
 80080c4:	40028000 	.word	0x40028000
 80080c8:	2400038c 	.word	0x2400038c
 80080cc:	240000d4 	.word	0x240000d4
 80080d0:	24000074 	.word	0x24000074
 80080d4:	24000154 	.word	0x24000154

080080d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08e      	sub	sp, #56	; 0x38
 80080dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	605a      	str	r2, [r3, #4]
 80080e8:	609a      	str	r2, [r3, #8]
 80080ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080ec:	f107 031c 	add.w	r3, r7, #28
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	605a      	str	r2, [r3, #4]
 80080f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80080f8:	463b      	mov	r3, r7
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	609a      	str	r2, [r3, #8]
 8008102:	60da      	str	r2, [r3, #12]
 8008104:	611a      	str	r2, [r3, #16]
 8008106:	615a      	str	r2, [r3, #20]
 8008108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800810a:	4b2d      	ldr	r3, [pc, #180]	; (80081c0 <MX_TIM2_Init+0xe8>)
 800810c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008112:	4b2b      	ldr	r3, [pc, #172]	; (80081c0 <MX_TIM2_Init+0xe8>)
 8008114:	2200      	movs	r2, #0
 8008116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008118:	4b29      	ldr	r3, [pc, #164]	; (80081c0 <MX_TIM2_Init+0xe8>)
 800811a:	2200      	movs	r2, #0
 800811c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800811e:	4b28      	ldr	r3, [pc, #160]	; (80081c0 <MX_TIM2_Init+0xe8>)
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008126:	4b26      	ldr	r3, [pc, #152]	; (80081c0 <MX_TIM2_Init+0xe8>)
 8008128:	2200      	movs	r2, #0
 800812a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800812c:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <MX_TIM2_Init+0xe8>)
 800812e:	2200      	movs	r2, #0
 8008130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008132:	4823      	ldr	r0, [pc, #140]	; (80081c0 <MX_TIM2_Init+0xe8>)
 8008134:	f7fd fd38 	bl	8005ba8 <HAL_TIM_Base_Init>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800813e:	f000 f9a3 	bl	8008488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800814c:	4619      	mov	r1, r3
 800814e:	481c      	ldr	r0, [pc, #112]	; (80081c0 <MX_TIM2_Init+0xe8>)
 8008150:	f7fd fef6 	bl	8005f40 <HAL_TIM_ConfigClockSource>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800815a:	f000 f995 	bl	8008488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800815e:	4818      	ldr	r0, [pc, #96]	; (80081c0 <MX_TIM2_Init+0xe8>)
 8008160:	f7fd fd79 	bl	8005c56 <HAL_TIM_PWM_Init>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800816a:	f000 f98d 	bl	8008488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008176:	f107 031c 	add.w	r3, r7, #28
 800817a:	4619      	mov	r1, r3
 800817c:	4810      	ldr	r0, [pc, #64]	; (80081c0 <MX_TIM2_Init+0xe8>)
 800817e:	f7fe fbf1 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8008188:	f000 f97e 	bl	8008488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800818c:	2360      	movs	r3, #96	; 0x60
 800818e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008194:	2300      	movs	r3, #0
 8008196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800819c:	463b      	mov	r3, r7
 800819e:	2200      	movs	r2, #0
 80081a0:	4619      	mov	r1, r3
 80081a2:	4807      	ldr	r0, [pc, #28]	; (80081c0 <MX_TIM2_Init+0xe8>)
 80081a4:	f7fd fdb8 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80081ae:	f000 f96b 	bl	8008488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80081b2:	4803      	ldr	r0, [pc, #12]	; (80081c0 <MX_TIM2_Init+0xe8>)
 80081b4:	f000 fae8 	bl	8008788 <HAL_TIM_MspPostInit>

}
 80081b8:	bf00      	nop
 80081ba:	3738      	adds	r7, #56	; 0x38
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	240002ac 	.word	0x240002ac

080081c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80081c8:	4b22      	ldr	r3, [pc, #136]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081ca:	4a23      	ldr	r2, [pc, #140]	; (8008258 <MX_USART3_UART_Init+0x94>)
 80081cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80081ce:	4b21      	ldr	r3, [pc, #132]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80081d6:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081d8:	2200      	movs	r2, #0
 80081da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80081dc:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081de:	2200      	movs	r2, #0
 80081e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081ea:	220c      	movs	r2, #12
 80081ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081ee:	4b19      	ldr	r3, [pc, #100]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80081f4:	4b17      	ldr	r3, [pc, #92]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80081fa:	4b16      	ldr	r3, [pc, #88]	; (8008254 <MX_USART3_UART_Init+0x90>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008200:	4b14      	ldr	r3, [pc, #80]	; (8008254 <MX_USART3_UART_Init+0x90>)
 8008202:	2200      	movs	r2, #0
 8008204:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008206:	4b13      	ldr	r3, [pc, #76]	; (8008254 <MX_USART3_UART_Init+0x90>)
 8008208:	2200      	movs	r2, #0
 800820a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800820c:	4811      	ldr	r0, [pc, #68]	; (8008254 <MX_USART3_UART_Init+0x90>)
 800820e:	f7fe fc45 	bl	8006a9c <HAL_UART_Init>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008218:	f000 f936 	bl	8008488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800821c:	2100      	movs	r1, #0
 800821e:	480d      	ldr	r0, [pc, #52]	; (8008254 <MX_USART3_UART_Init+0x90>)
 8008220:	f7ff fd4b 	bl	8007cba <HAL_UARTEx_SetTxFifoThreshold>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800822a:	f000 f92d 	bl	8008488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800822e:	2100      	movs	r1, #0
 8008230:	4808      	ldr	r0, [pc, #32]	; (8008254 <MX_USART3_UART_Init+0x90>)
 8008232:	f7ff fd80 	bl	8007d36 <HAL_UARTEx_SetRxFifoThreshold>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800823c:	f000 f924 	bl	8008488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008240:	4804      	ldr	r0, [pc, #16]	; (8008254 <MX_USART3_UART_Init+0x90>)
 8008242:	f7ff fd01 	bl	8007c48 <HAL_UARTEx_DisableFifoMode>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800824c:	f000 f91c 	bl	8008488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008250:	bf00      	nop
 8008252:	bd80      	pop	{r7, pc}
 8008254:	240002f8 	.word	0x240002f8
 8008258:	40004800 	.word	0x40004800

0800825c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8008260:	bf00      	nop
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	; 0x30
 8008270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008272:	f107 031c 	add.w	r3, r7, #28
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	605a      	str	r2, [r3, #4]
 800827c:	609a      	str	r2, [r3, #8]
 800827e:	60da      	str	r2, [r3, #12]
 8008280:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008282:	4b7a      	ldr	r3, [pc, #488]	; (800846c <MX_GPIO_Init+0x200>)
 8008284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008288:	4a78      	ldr	r2, [pc, #480]	; (800846c <MX_GPIO_Init+0x200>)
 800828a:	f043 0304 	orr.w	r3, r3, #4
 800828e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008292:	4b76      	ldr	r3, [pc, #472]	; (800846c <MX_GPIO_Init+0x200>)
 8008294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80082a0:	4b72      	ldr	r3, [pc, #456]	; (800846c <MX_GPIO_Init+0x200>)
 80082a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082a6:	4a71      	ldr	r2, [pc, #452]	; (800846c <MX_GPIO_Init+0x200>)
 80082a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082b0:	4b6e      	ldr	r3, [pc, #440]	; (800846c <MX_GPIO_Init+0x200>)
 80082b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082be:	4b6b      	ldr	r3, [pc, #428]	; (800846c <MX_GPIO_Init+0x200>)
 80082c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082c4:	4a69      	ldr	r2, [pc, #420]	; (800846c <MX_GPIO_Init+0x200>)
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082ce:	4b67      	ldr	r3, [pc, #412]	; (800846c <MX_GPIO_Init+0x200>)
 80082d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082dc:	4b63      	ldr	r3, [pc, #396]	; (800846c <MX_GPIO_Init+0x200>)
 80082de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082e2:	4a62      	ldr	r2, [pc, #392]	; (800846c <MX_GPIO_Init+0x200>)
 80082e4:	f043 0302 	orr.w	r3, r3, #2
 80082e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082ec:	4b5f      	ldr	r3, [pc, #380]	; (800846c <MX_GPIO_Init+0x200>)
 80082ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082fa:	4b5c      	ldr	r3, [pc, #368]	; (800846c <MX_GPIO_Init+0x200>)
 80082fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008300:	4a5a      	ldr	r2, [pc, #360]	; (800846c <MX_GPIO_Init+0x200>)
 8008302:	f043 0308 	orr.w	r3, r3, #8
 8008306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800830a:	4b58      	ldr	r3, [pc, #352]	; (800846c <MX_GPIO_Init+0x200>)
 800830c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008318:	4b54      	ldr	r3, [pc, #336]	; (800846c <MX_GPIO_Init+0x200>)
 800831a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800831e:	4a53      	ldr	r2, [pc, #332]	; (800846c <MX_GPIO_Init+0x200>)
 8008320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008328:	4b50      	ldr	r3, [pc, #320]	; (800846c <MX_GPIO_Init+0x200>)
 800832a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	607b      	str	r3, [r7, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008336:	4b4d      	ldr	r3, [pc, #308]	; (800846c <MX_GPIO_Init+0x200>)
 8008338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800833c:	4a4b      	ldr	r2, [pc, #300]	; (800846c <MX_GPIO_Init+0x200>)
 800833e:	f043 0310 	orr.w	r3, r3, #16
 8008342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008346:	4b49      	ldr	r3, [pc, #292]	; (800846c <MX_GPIO_Init+0x200>)
 8008348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008354:	2200      	movs	r2, #0
 8008356:	2120      	movs	r1, #32
 8008358:	4845      	ldr	r0, [pc, #276]	; (8008470 <MX_GPIO_Init+0x204>)
 800835a:	f7fa f86b 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800835e:	2200      	movs	r2, #0
 8008360:	f244 0101 	movw	r1, #16385	; 0x4001
 8008364:	4843      	ldr	r0, [pc, #268]	; (8008474 <MX_GPIO_Init+0x208>)
 8008366:	f7fa f865 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800836a:	2200      	movs	r2, #0
 800836c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008370:	4841      	ldr	r0, [pc, #260]	; (8008478 <MX_GPIO_Init+0x20c>)
 8008372:	f7fa f85f 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8008376:	2200      	movs	r2, #0
 8008378:	2102      	movs	r1, #2
 800837a:	4840      	ldr	r0, [pc, #256]	; (800847c <MX_GPIO_Init+0x210>)
 800837c:	f7fa f85a 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008386:	2300      	movs	r3, #0
 8008388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838a:	2300      	movs	r3, #0
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800838e:	f107 031c 	add.w	r3, r7, #28
 8008392:	4619      	mov	r1, r3
 8008394:	483a      	ldr	r0, [pc, #232]	; (8008480 <MX_GPIO_Init+0x214>)
 8008396:	f7f9 fea5 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800839a:	2320      	movs	r3, #32
 800839c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800839e:	2301      	movs	r3, #1
 80083a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083a6:	2300      	movs	r3, #0
 80083a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80083aa:	f107 031c 	add.w	r3, r7, #28
 80083ae:	4619      	mov	r1, r3
 80083b0:	482f      	ldr	r0, [pc, #188]	; (8008470 <MX_GPIO_Init+0x204>)
 80083b2:	f7f9 fe97 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80083b6:	f244 0301 	movw	r3, #16385	; 0x4001
 80083ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083bc:	2301      	movs	r3, #1
 80083be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c4:	2300      	movs	r3, #0
 80083c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c8:	f107 031c 	add.w	r3, r7, #28
 80083cc:	4619      	mov	r1, r3
 80083ce:	4829      	ldr	r0, [pc, #164]	; (8008474 <MX_GPIO_Init+0x208>)
 80083d0:	f7f9 fe88 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80083d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083da:	2301      	movs	r3, #1
 80083dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083e2:	2300      	movs	r3, #0
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80083e6:	f107 031c 	add.w	r3, r7, #28
 80083ea:	4619      	mov	r1, r3
 80083ec:	4822      	ldr	r0, [pc, #136]	; (8008478 <MX_GPIO_Init+0x20c>)
 80083ee:	f7f9 fe79 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80083f2:	2380      	movs	r3, #128	; 0x80
 80083f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80083f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80083fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8008400:	f107 031c 	add.w	r3, r7, #28
 8008404:	4619      	mov	r1, r3
 8008406:	481f      	ldr	r0, [pc, #124]	; (8008484 <MX_GPIO_Init+0x218>)
 8008408:	f7f9 fe6c 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800840c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008412:	2300      	movs	r3, #0
 8008414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800841a:	f107 031c 	add.w	r3, r7, #28
 800841e:	4619      	mov	r1, r3
 8008420:	4813      	ldr	r0, [pc, #76]	; (8008470 <MX_GPIO_Init+0x204>)
 8008422:	f7f9 fe5f 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8008426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800842c:	2302      	movs	r3, #2
 800842e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008434:	2300      	movs	r3, #0
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8008438:	230a      	movs	r3, #10
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800843c:	f107 031c 	add.w	r3, r7, #28
 8008440:	4619      	mov	r1, r3
 8008442:	480b      	ldr	r0, [pc, #44]	; (8008470 <MX_GPIO_Init+0x204>)
 8008444:	f7f9 fe4e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8008448:	2302      	movs	r3, #2
 800844a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800844c:	2301      	movs	r3, #1
 800844e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008450:	2300      	movs	r3, #0
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008454:	2300      	movs	r3, #0
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8008458:	f107 031c 	add.w	r3, r7, #28
 800845c:	4619      	mov	r1, r3
 800845e:	4807      	ldr	r0, [pc, #28]	; (800847c <MX_GPIO_Init+0x210>)
 8008460:	f7f9 fe40 	bl	80020e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008464:	bf00      	nop
 8008466:	3730      	adds	r7, #48	; 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	58024400 	.word	0x58024400
 8008470:	58020000 	.word	0x58020000
 8008474:	58020400 	.word	0x58020400
 8008478:	58020c00 	.word	0x58020c00
 800847c:	58021000 	.word	0x58021000
 8008480:	58020800 	.word	0x58020800
 8008484:	58021800 	.word	0x58021800

08008488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800848c:	b672      	cpsid	i
}
 800848e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008490:	e7fe      	b.n	8008490 <Error_Handler+0x8>
	...

08008494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <HAL_MspInit+0x30>)
 800849c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084a0:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <HAL_MspInit+0x30>)
 80084a2:	f043 0302 	orr.w	r3, r3, #2
 80084a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <HAL_MspInit+0x30>)
 80084ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	607b      	str	r3, [r7, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	58024400 	.word	0x58024400

080084c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b0b8      	sub	sp, #224	; 0xe0
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084e0:	f107 0310 	add.w	r3, r7, #16
 80084e4:	22b8      	movs	r2, #184	; 0xb8
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fb89 	bl	8008c00 <memset>
  if(hadc->Instance==ADC1)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2b      	ldr	r2, [pc, #172]	; (80085a0 <HAL_ADC_MspInit+0xd8>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d14f      	bne.n	8008598 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80084f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8008504:	2301      	movs	r3, #1
 8008506:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8008508:	2318      	movs	r3, #24
 800850a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800850c:	2302      	movs	r3, #2
 800850e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008510:	2302      	movs	r3, #2
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008514:	2302      	movs	r3, #2
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8008518:	23c0      	movs	r3, #192	; 0xc0
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800851c:	2300      	movs	r3, #0
 800851e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8008524:	2300      	movs	r3, #0
 8008526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800852a:	f107 0310 	add.w	r3, r7, #16
 800852e:	4618      	mov	r0, r3
 8008530:	f7fa ff54 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800853a:	f7ff ffa5 	bl	8008488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800853e:	4b19      	ldr	r3, [pc, #100]	; (80085a4 <HAL_ADC_MspInit+0xdc>)
 8008540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008544:	4a17      	ldr	r2, [pc, #92]	; (80085a4 <HAL_ADC_MspInit+0xdc>)
 8008546:	f043 0320 	orr.w	r3, r3, #32
 800854a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800854e:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <HAL_ADC_MspInit+0xdc>)
 8008550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800855c:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <HAL_ADC_MspInit+0xdc>)
 800855e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008562:	4a10      	ldr	r2, [pc, #64]	; (80085a4 <HAL_ADC_MspInit+0xdc>)
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <HAL_ADC_MspInit+0xdc>)
 800856e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	60bb      	str	r3, [r7, #8]
 8008578:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800857a:	2302      	movs	r3, #2
 800857c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008580:	2303      	movs	r3, #3
 8008582:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008586:	2300      	movs	r3, #0
 8008588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800858c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008590:	4619      	mov	r1, r3
 8008592:	4805      	ldr	r0, [pc, #20]	; (80085a8 <HAL_ADC_MspInit+0xe0>)
 8008594:	f7f9 fda6 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008598:	bf00      	nop
 800859a:	37e0      	adds	r7, #224	; 0xe0
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40022000 	.word	0x40022000
 80085a4:	58024400 	.word	0x58024400
 80085a8:	58020400 	.word	0x58020400

080085ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a59      	ldr	r2, [pc, #356]	; (8008730 <HAL_ETH_MspInit+0x184>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f040 80ab 	bne.w	8008726 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80085d0:	4b58      	ldr	r3, [pc, #352]	; (8008734 <HAL_ETH_MspInit+0x188>)
 80085d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80085d6:	4a57      	ldr	r2, [pc, #348]	; (8008734 <HAL_ETH_MspInit+0x188>)
 80085d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80085e0:	4b54      	ldr	r3, [pc, #336]	; (8008734 <HAL_ETH_MspInit+0x188>)
 80085e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80085e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ea:	623b      	str	r3, [r7, #32]
 80085ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80085ee:	4b51      	ldr	r3, [pc, #324]	; (8008734 <HAL_ETH_MspInit+0x188>)
 80085f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80085f4:	4a4f      	ldr	r2, [pc, #316]	; (8008734 <HAL_ETH_MspInit+0x188>)
 80085f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80085fe:	4b4d      	ldr	r3, [pc, #308]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800860c:	4b49      	ldr	r3, [pc, #292]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800860e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008612:	4a48      	ldr	r2, [pc, #288]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008618:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800861c:	4b45      	ldr	r3, [pc, #276]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800861e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800862a:	4b42      	ldr	r3, [pc, #264]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800862c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008630:	4a40      	ldr	r2, [pc, #256]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008632:	f043 0304 	orr.w	r3, r3, #4
 8008636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800863a:	4b3e      	ldr	r3, [pc, #248]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800863c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008648:	4b3a      	ldr	r3, [pc, #232]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800864a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800864e:	4a39      	ldr	r2, [pc, #228]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008650:	f043 0301 	orr.w	r3, r3, #1
 8008654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008658:	4b36      	ldr	r3, [pc, #216]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800865a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008666:	4b33      	ldr	r3, [pc, #204]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800866c:	4a31      	ldr	r2, [pc, #196]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800866e:	f043 0302 	orr.w	r3, r3, #2
 8008672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008676:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008684:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800868a:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <HAL_ETH_MspInit+0x188>)
 800868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008694:	4b27      	ldr	r3, [pc, #156]	; (8008734 <HAL_ETH_MspInit+0x188>)
 8008696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80086a2:	2332      	movs	r3, #50	; 0x32
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a6:	2302      	movs	r3, #2
 80086a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ae:	2300      	movs	r3, #0
 80086b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086b2:	230b      	movs	r3, #11
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ba:	4619      	mov	r1, r3
 80086bc:	481e      	ldr	r0, [pc, #120]	; (8008738 <HAL_ETH_MspInit+0x18c>)
 80086be:	f7f9 fd11 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80086c2:	2386      	movs	r3, #134	; 0x86
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c6:	2302      	movs	r3, #2
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ce:	2300      	movs	r3, #0
 80086d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086d2:	230b      	movs	r3, #11
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086da:	4619      	mov	r1, r3
 80086dc:	4817      	ldr	r0, [pc, #92]	; (800873c <HAL_ETH_MspInit+0x190>)
 80086de:	f7f9 fd01 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80086e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e8:	2302      	movs	r3, #2
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f0:	2300      	movs	r3, #0
 80086f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086f4:	230b      	movs	r3, #11
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80086f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086fc:	4619      	mov	r1, r3
 80086fe:	4810      	ldr	r0, [pc, #64]	; (8008740 <HAL_ETH_MspInit+0x194>)
 8008700:	f7f9 fcf0 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008704:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870a:	2302      	movs	r3, #2
 800870c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870e:	2300      	movs	r3, #0
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008712:	2300      	movs	r3, #0
 8008714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008716:	230b      	movs	r3, #11
 8008718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800871a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800871e:	4619      	mov	r1, r3
 8008720:	4808      	ldr	r0, [pc, #32]	; (8008744 <HAL_ETH_MspInit+0x198>)
 8008722:	f7f9 fcdf 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8008726:	bf00      	nop
 8008728:	3738      	adds	r7, #56	; 0x38
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40028000 	.word	0x40028000
 8008734:	58024400 	.word	0x58024400
 8008738:	58020800 	.word	0x58020800
 800873c:	58020000 	.word	0x58020000
 8008740:	58020400 	.word	0x58020400
 8008744:	58021800 	.word	0x58021800

08008748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008758:	d10e      	bne.n	8008778 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800875a:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <HAL_TIM_Base_MspInit+0x3c>)
 800875c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008760:	4a08      	ldr	r2, [pc, #32]	; (8008784 <HAL_TIM_Base_MspInit+0x3c>)
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800876a:	4b06      	ldr	r3, [pc, #24]	; (8008784 <HAL_TIM_Base_MspInit+0x3c>)
 800876c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	58024400 	.word	0x58024400

08008788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008790:	f107 030c 	add.w	r3, r7, #12
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a8:	d11e      	bne.n	80087e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087aa:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <HAL_TIM_MspPostInit+0x68>)
 80087ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087b0:	4a0f      	ldr	r2, [pc, #60]	; (80087f0 <HAL_TIM_MspPostInit+0x68>)
 80087b2:	f043 0301 	orr.w	r3, r3, #1
 80087b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <HAL_TIM_MspPostInit+0x68>)
 80087bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	60bb      	str	r3, [r7, #8]
 80087c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80087c8:	2301      	movs	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087cc:	2302      	movs	r3, #2
 80087ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80087d8:	2301      	movs	r3, #1
 80087da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087dc:	f107 030c 	add.w	r3, r7, #12
 80087e0:	4619      	mov	r1, r3
 80087e2:	4804      	ldr	r0, [pc, #16]	; (80087f4 <HAL_TIM_MspPostInit+0x6c>)
 80087e4:	f7f9 fc7e 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80087e8:	bf00      	nop
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	58024400 	.word	0x58024400
 80087f4:	58020000 	.word	0x58020000

080087f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b0b8      	sub	sp, #224	; 0xe0
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008800:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	609a      	str	r2, [r3, #8]
 800880c:	60da      	str	r2, [r3, #12]
 800880e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008810:	f107 0310 	add.w	r3, r7, #16
 8008814:	22b8      	movs	r2, #184	; 0xb8
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f000 f9f1 	bl	8008c00 <memset>
  if(huart->Instance==USART3)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a27      	ldr	r2, [pc, #156]	; (80088c0 <HAL_UART_MspInit+0xc8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d146      	bne.n	80088b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008828:	f04f 0202 	mov.w	r2, #2
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008834:	2300      	movs	r3, #0
 8008836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800883a:	f107 0310 	add.w	r3, r7, #16
 800883e:	4618      	mov	r0, r3
 8008840:	f7fa fdcc 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800884a:	f7ff fe1d 	bl	8008488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800884e:	4b1d      	ldr	r3, [pc, #116]	; (80088c4 <HAL_UART_MspInit+0xcc>)
 8008850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008854:	4a1b      	ldr	r2, [pc, #108]	; (80088c4 <HAL_UART_MspInit+0xcc>)
 8008856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800885a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800885e:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <HAL_UART_MspInit+0xcc>)
 8008860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800886c:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <HAL_UART_MspInit+0xcc>)
 800886e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008872:	4a14      	ldr	r2, [pc, #80]	; (80088c4 <HAL_UART_MspInit+0xcc>)
 8008874:	f043 0308 	orr.w	r3, r3, #8
 8008878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800887c:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <HAL_UART_MspInit+0xcc>)
 800887e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008882:	f003 0308 	and.w	r3, r3, #8
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800888a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800888e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008892:	2302      	movs	r3, #2
 8008894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008898:	2300      	movs	r3, #0
 800889a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800889e:	2300      	movs	r3, #0
 80088a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80088a4:	2307      	movs	r3, #7
 80088a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80088ae:	4619      	mov	r1, r3
 80088b0:	4805      	ldr	r0, [pc, #20]	; (80088c8 <HAL_UART_MspInit+0xd0>)
 80088b2:	f7f9 fc17 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80088b6:	bf00      	nop
 80088b8:	37e0      	adds	r7, #224	; 0xe0
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40004800 	.word	0x40004800
 80088c4:	58024400 	.word	0x58024400
 80088c8:	58020c00 	.word	0x58020c00

080088cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80088d0:	e7fe      	b.n	80088d0 <NMI_Handler+0x4>

080088d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088d2:	b480      	push	{r7}
 80088d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088d6:	e7fe      	b.n	80088d6 <HardFault_Handler+0x4>

080088d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088dc:	e7fe      	b.n	80088dc <MemManage_Handler+0x4>

080088de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088de:	b480      	push	{r7}
 80088e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088e2:	e7fe      	b.n	80088e2 <BusFault_Handler+0x4>

080088e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088e8:	e7fe      	b.n	80088e8 <UsageFault_Handler+0x4>

080088ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088ea:	b480      	push	{r7}
 80088ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088ee:	bf00      	nop
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088fc:	bf00      	nop
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008906:	b480      	push	{r7}
 8008908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800890a:	bf00      	nop
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008918:	f7f7 ff3e 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800891c:	bf00      	nop
 800891e:	bd80      	pop	{r7, pc}

08008920 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e00a      	b.n	8008948 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008932:	f3af 8000 	nop.w
 8008936:	4601      	mov	r1, r0
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	60ba      	str	r2, [r7, #8]
 800893e:	b2ca      	uxtb	r2, r1
 8008940:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	3301      	adds	r3, #1
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	dbf0      	blt.n	8008932 <_read+0x12>
  }

  return len;
 8008950:	687b      	ldr	r3, [r7, #4]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e009      	b.n	8008980 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	60ba      	str	r2, [r7, #8]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	4618      	mov	r0, r3
 8008976:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	3301      	adds	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	dbf1      	blt.n	800896c <_write+0x12>
  }
  return len;
 8008988:	687b      	ldr	r3, [r7, #4]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <_close>:

int _close(int file)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089ba:	605a      	str	r2, [r3, #4]
  return 0;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <_isatty>:

int _isatty(int file)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80089d2:	2301      	movs	r3, #1
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
	...

080089fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a04:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <_sbrk+0x5c>)
 8008a06:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <_sbrk+0x60>)
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <_sbrk+0x64>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <_sbrk+0x64>)
 8008a1a:	4a12      	ldr	r2, [pc, #72]	; (8008a64 <_sbrk+0x68>)
 8008a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a1e:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <_sbrk+0x64>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d207      	bcs.n	8008a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a2c:	f000 f8be 	bl	8008bac <__errno>
 8008a30:	4603      	mov	r3, r0
 8008a32:	220c      	movs	r2, #12
 8008a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3a:	e009      	b.n	8008a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <_sbrk+0x64>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a42:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <_sbrk+0x64>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	4a05      	ldr	r2, [pc, #20]	; (8008a60 <_sbrk+0x64>)
 8008a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	24050000 	.word	0x24050000
 8008a5c:	00000400 	.word	0x00000400
 8008a60:	24000394 	.word	0x24000394
 8008a64:	240003a8 	.word	0x240003a8

08008a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008a6c:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <SystemInit+0xd0>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a72:	4a31      	ldr	r2, [pc, #196]	; (8008b38 <SystemInit+0xd0>)
 8008a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008a7c:	4b2f      	ldr	r3, [pc, #188]	; (8008b3c <SystemInit+0xd4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	2b06      	cmp	r3, #6
 8008a86:	d807      	bhi.n	8008a98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008a88:	4b2c      	ldr	r3, [pc, #176]	; (8008b3c <SystemInit+0xd4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f023 030f 	bic.w	r3, r3, #15
 8008a90:	4a2a      	ldr	r2, [pc, #168]	; (8008b3c <SystemInit+0xd4>)
 8008a92:	f043 0307 	orr.w	r3, r3, #7
 8008a96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008a98:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <SystemInit+0xd8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a28      	ldr	r2, [pc, #160]	; (8008b40 <SystemInit+0xd8>)
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008aa4:	4b26      	ldr	r3, [pc, #152]	; (8008b40 <SystemInit+0xd8>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008aaa:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <SystemInit+0xd8>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4924      	ldr	r1, [pc, #144]	; (8008b40 <SystemInit+0xd8>)
 8008ab0:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <SystemInit+0xdc>)
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <SystemInit+0xd4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d007      	beq.n	8008ad2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <SystemInit+0xd4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f023 030f 	bic.w	r3, r3, #15
 8008aca:	4a1c      	ldr	r2, [pc, #112]	; (8008b3c <SystemInit+0xd4>)
 8008acc:	f043 0307 	orr.w	r3, r3, #7
 8008ad0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008ad2:	4b1b      	ldr	r3, [pc, #108]	; (8008b40 <SystemInit+0xd8>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008ad8:	4b19      	ldr	r3, [pc, #100]	; (8008b40 <SystemInit+0xd8>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008ade:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <SystemInit+0xd8>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008ae4:	4b16      	ldr	r3, [pc, #88]	; (8008b40 <SystemInit+0xd8>)
 8008ae6:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <SystemInit+0xe0>)
 8008ae8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008aea:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <SystemInit+0xd8>)
 8008aec:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <SystemInit+0xe4>)
 8008aee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008af0:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <SystemInit+0xd8>)
 8008af2:	4a17      	ldr	r2, [pc, #92]	; (8008b50 <SystemInit+0xe8>)
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008af6:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <SystemInit+0xd8>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008afc:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <SystemInit+0xd8>)
 8008afe:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <SystemInit+0xe8>)
 8008b00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b02:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <SystemInit+0xd8>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <SystemInit+0xd8>)
 8008b0a:	4a11      	ldr	r2, [pc, #68]	; (8008b50 <SystemInit+0xe8>)
 8008b0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <SystemInit+0xd8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <SystemInit+0xd8>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <SystemInit+0xd8>)
 8008b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <SystemInit+0xd8>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008b26:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <SystemInit+0xec>)
 8008b28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008b2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	e000ed00 	.word	0xe000ed00
 8008b3c:	52002000 	.word	0x52002000
 8008b40:	58024400 	.word	0x58024400
 8008b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8008b48:	02020200 	.word	0x02020200
 8008b4c:	01ff0000 	.word	0x01ff0000
 8008b50:	01010280 	.word	0x01010280
 8008b54:	52004000 	.word	0x52004000

08008b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008b5c:	f7ff ff84 	bl	8008a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b60:	480c      	ldr	r0, [pc, #48]	; (8008b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b62:	490d      	ldr	r1, [pc, #52]	; (8008b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b64:	4a0d      	ldr	r2, [pc, #52]	; (8008b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b68:	e002      	b.n	8008b70 <LoopCopyDataInit>

08008b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b6e:	3304      	adds	r3, #4

08008b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b74:	d3f9      	bcc.n	8008b6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b76:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b78:	4c0a      	ldr	r4, [pc, #40]	; (8008ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b7c:	e001      	b.n	8008b82 <LoopFillZerobss>

08008b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b80:	3204      	adds	r2, #4

08008b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b84:	d3fb      	bcc.n	8008b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b86:	f000 f817 	bl	8008bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b8a:	f7ff f961 	bl	8007e50 <main>
  bx  lr
 8008b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008b90:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008b94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008b98:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8008b9c:	08009c28 	.word	0x08009c28
  ldr r2, =_sbss
 8008ba0:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8008ba4:	240003a8 	.word	0x240003a8

08008ba8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ba8:	e7fe      	b.n	8008ba8 <ADC3_IRQHandler>
	...

08008bac <__errno>:
 8008bac:	4b01      	ldr	r3, [pc, #4]	; (8008bb4 <__errno+0x8>)
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	24000010 	.word	0x24000010

08008bb8 <__libc_init_array>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	4d0d      	ldr	r5, [pc, #52]	; (8008bf0 <__libc_init_array+0x38>)
 8008bbc:	4c0d      	ldr	r4, [pc, #52]	; (8008bf4 <__libc_init_array+0x3c>)
 8008bbe:	1b64      	subs	r4, r4, r5
 8008bc0:	10a4      	asrs	r4, r4, #2
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	42a6      	cmp	r6, r4
 8008bc6:	d109      	bne.n	8008bdc <__libc_init_array+0x24>
 8008bc8:	4d0b      	ldr	r5, [pc, #44]	; (8008bf8 <__libc_init_array+0x40>)
 8008bca:	4c0c      	ldr	r4, [pc, #48]	; (8008bfc <__libc_init_array+0x44>)
 8008bcc:	f000 ffae 	bl	8009b2c <_init>
 8008bd0:	1b64      	subs	r4, r4, r5
 8008bd2:	10a4      	asrs	r4, r4, #2
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	42a6      	cmp	r6, r4
 8008bd8:	d105      	bne.n	8008be6 <__libc_init_array+0x2e>
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be0:	4798      	blx	r3
 8008be2:	3601      	adds	r6, #1
 8008be4:	e7ee      	b.n	8008bc4 <__libc_init_array+0xc>
 8008be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bea:	4798      	blx	r3
 8008bec:	3601      	adds	r6, #1
 8008bee:	e7f2      	b.n	8008bd6 <__libc_init_array+0x1e>
 8008bf0:	08009c20 	.word	0x08009c20
 8008bf4:	08009c20 	.word	0x08009c20
 8008bf8:	08009c20 	.word	0x08009c20
 8008bfc:	08009c24 	.word	0x08009c24

08008c00 <memset>:
 8008c00:	4402      	add	r2, r0
 8008c02:	4603      	mov	r3, r0
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d100      	bne.n	8008c0a <memset+0xa>
 8008c08:	4770      	bx	lr
 8008c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0e:	e7f9      	b.n	8008c04 <memset+0x4>

08008c10 <iprintf>:
 8008c10:	b40f      	push	{r0, r1, r2, r3}
 8008c12:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <iprintf+0x2c>)
 8008c14:	b513      	push	{r0, r1, r4, lr}
 8008c16:	681c      	ldr	r4, [r3, #0]
 8008c18:	b124      	cbz	r4, 8008c24 <iprintf+0x14>
 8008c1a:	69a3      	ldr	r3, [r4, #24]
 8008c1c:	b913      	cbnz	r3, 8008c24 <iprintf+0x14>
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 f866 	bl	8008cf0 <__sinit>
 8008c24:	ab05      	add	r3, sp, #20
 8008c26:	9a04      	ldr	r2, [sp, #16]
 8008c28:	68a1      	ldr	r1, [r4, #8]
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 f9bd 	bl	8008fac <_vfiprintf_r>
 8008c32:	b002      	add	sp, #8
 8008c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c38:	b004      	add	sp, #16
 8008c3a:	4770      	bx	lr
 8008c3c:	24000010 	.word	0x24000010

08008c40 <std>:
 8008c40:	2300      	movs	r3, #0
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
 8008c46:	e9c0 3300 	strd	r3, r3, [r0]
 8008c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c4e:	6083      	str	r3, [r0, #8]
 8008c50:	8181      	strh	r1, [r0, #12]
 8008c52:	6643      	str	r3, [r0, #100]	; 0x64
 8008c54:	81c2      	strh	r2, [r0, #14]
 8008c56:	6183      	str	r3, [r0, #24]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	2208      	movs	r2, #8
 8008c5c:	305c      	adds	r0, #92	; 0x5c
 8008c5e:	f7ff ffcf 	bl	8008c00 <memset>
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <std+0x38>)
 8008c64:	6263      	str	r3, [r4, #36]	; 0x24
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x3c>)
 8008c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c6a:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <std+0x40>)
 8008c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c6e:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <std+0x44>)
 8008c70:	6224      	str	r4, [r4, #32]
 8008c72:	6323      	str	r3, [r4, #48]	; 0x30
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	bf00      	nop
 8008c78:	08009555 	.word	0x08009555
 8008c7c:	08009577 	.word	0x08009577
 8008c80:	080095af 	.word	0x080095af
 8008c84:	080095d3 	.word	0x080095d3

08008c88 <_cleanup_r>:
 8008c88:	4901      	ldr	r1, [pc, #4]	; (8008c90 <_cleanup_r+0x8>)
 8008c8a:	f000 b8af 	b.w	8008dec <_fwalk_reent>
 8008c8e:	bf00      	nop
 8008c90:	080098ad 	.word	0x080098ad

08008c94 <__sfmoreglue>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	2268      	movs	r2, #104	; 0x68
 8008c98:	1e4d      	subs	r5, r1, #1
 8008c9a:	4355      	muls	r5, r2
 8008c9c:	460e      	mov	r6, r1
 8008c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ca2:	f000 f8e5 	bl	8008e70 <_malloc_r>
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	b140      	cbz	r0, 8008cbc <__sfmoreglue+0x28>
 8008caa:	2100      	movs	r1, #0
 8008cac:	e9c0 1600 	strd	r1, r6, [r0]
 8008cb0:	300c      	adds	r0, #12
 8008cb2:	60a0      	str	r0, [r4, #8]
 8008cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cb8:	f7ff ffa2 	bl	8008c00 <memset>
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}

08008cc0 <__sfp_lock_acquire>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	; (8008cc8 <__sfp_lock_acquire+0x8>)
 8008cc2:	f000 b8b3 	b.w	8008e2c <__retarget_lock_acquire_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	24000399 	.word	0x24000399

08008ccc <__sfp_lock_release>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	; (8008cd4 <__sfp_lock_release+0x8>)
 8008cce:	f000 b8ae 	b.w	8008e2e <__retarget_lock_release_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	24000399 	.word	0x24000399

08008cd8 <__sinit_lock_acquire>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__sinit_lock_acquire+0x8>)
 8008cda:	f000 b8a7 	b.w	8008e2c <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	2400039a 	.word	0x2400039a

08008ce4 <__sinit_lock_release>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__sinit_lock_release+0x8>)
 8008ce6:	f000 b8a2 	b.w	8008e2e <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	2400039a 	.word	0x2400039a

08008cf0 <__sinit>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	f7ff fff0 	bl	8008cd8 <__sinit_lock_acquire>
 8008cf8:	69a3      	ldr	r3, [r4, #24]
 8008cfa:	b11b      	cbz	r3, 8008d04 <__sinit+0x14>
 8008cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d00:	f7ff bff0 	b.w	8008ce4 <__sinit_lock_release>
 8008d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d08:	6523      	str	r3, [r4, #80]	; 0x50
 8008d0a:	4b13      	ldr	r3, [pc, #76]	; (8008d58 <__sinit+0x68>)
 8008d0c:	4a13      	ldr	r2, [pc, #76]	; (8008d5c <__sinit+0x6c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	bf04      	itt	eq
 8008d16:	2301      	moveq	r3, #1
 8008d18:	61a3      	streq	r3, [r4, #24]
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 f820 	bl	8008d60 <__sfp>
 8008d20:	6060      	str	r0, [r4, #4]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f81c 	bl	8008d60 <__sfp>
 8008d28:	60a0      	str	r0, [r4, #8]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 f818 	bl	8008d60 <__sfp>
 8008d30:	2200      	movs	r2, #0
 8008d32:	60e0      	str	r0, [r4, #12]
 8008d34:	2104      	movs	r1, #4
 8008d36:	6860      	ldr	r0, [r4, #4]
 8008d38:	f7ff ff82 	bl	8008c40 <std>
 8008d3c:	68a0      	ldr	r0, [r4, #8]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	2109      	movs	r1, #9
 8008d42:	f7ff ff7d 	bl	8008c40 <std>
 8008d46:	68e0      	ldr	r0, [r4, #12]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	2112      	movs	r1, #18
 8008d4c:	f7ff ff78 	bl	8008c40 <std>
 8008d50:	2301      	movs	r3, #1
 8008d52:	61a3      	str	r3, [r4, #24]
 8008d54:	e7d2      	b.n	8008cfc <__sinit+0xc>
 8008d56:	bf00      	nop
 8008d58:	08009b80 	.word	0x08009b80
 8008d5c:	08008c89 	.word	0x08008c89

08008d60 <__sfp>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	4607      	mov	r7, r0
 8008d64:	f7ff ffac 	bl	8008cc0 <__sfp_lock_acquire>
 8008d68:	4b1e      	ldr	r3, [pc, #120]	; (8008de4 <__sfp+0x84>)
 8008d6a:	681e      	ldr	r6, [r3, #0]
 8008d6c:	69b3      	ldr	r3, [r6, #24]
 8008d6e:	b913      	cbnz	r3, 8008d76 <__sfp+0x16>
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff ffbd 	bl	8008cf0 <__sinit>
 8008d76:	3648      	adds	r6, #72	; 0x48
 8008d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	d503      	bpl.n	8008d88 <__sfp+0x28>
 8008d80:	6833      	ldr	r3, [r6, #0]
 8008d82:	b30b      	cbz	r3, 8008dc8 <__sfp+0x68>
 8008d84:	6836      	ldr	r6, [r6, #0]
 8008d86:	e7f7      	b.n	8008d78 <__sfp+0x18>
 8008d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d8c:	b9d5      	cbnz	r5, 8008dc4 <__sfp+0x64>
 8008d8e:	4b16      	ldr	r3, [pc, #88]	; (8008de8 <__sfp+0x88>)
 8008d90:	60e3      	str	r3, [r4, #12]
 8008d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d96:	6665      	str	r5, [r4, #100]	; 0x64
 8008d98:	f000 f847 	bl	8008e2a <__retarget_lock_init_recursive>
 8008d9c:	f7ff ff96 	bl	8008ccc <__sfp_lock_release>
 8008da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008da8:	6025      	str	r5, [r4, #0]
 8008daa:	61a5      	str	r5, [r4, #24]
 8008dac:	2208      	movs	r2, #8
 8008dae:	4629      	mov	r1, r5
 8008db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008db4:	f7ff ff24 	bl	8008c00 <memset>
 8008db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc4:	3468      	adds	r4, #104	; 0x68
 8008dc6:	e7d9      	b.n	8008d7c <__sfp+0x1c>
 8008dc8:	2104      	movs	r1, #4
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f7ff ff62 	bl	8008c94 <__sfmoreglue>
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	6030      	str	r0, [r6, #0]
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d1d5      	bne.n	8008d84 <__sfp+0x24>
 8008dd8:	f7ff ff78 	bl	8008ccc <__sfp_lock_release>
 8008ddc:	230c      	movs	r3, #12
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	e7ee      	b.n	8008dc0 <__sfp+0x60>
 8008de2:	bf00      	nop
 8008de4:	08009b80 	.word	0x08009b80
 8008de8:	ffff0001 	.word	0xffff0001

08008dec <_fwalk_reent>:
 8008dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	4606      	mov	r6, r0
 8008df2:	4688      	mov	r8, r1
 8008df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008df8:	2700      	movs	r7, #0
 8008dfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dfe:	f1b9 0901 	subs.w	r9, r9, #1
 8008e02:	d505      	bpl.n	8008e10 <_fwalk_reent+0x24>
 8008e04:	6824      	ldr	r4, [r4, #0]
 8008e06:	2c00      	cmp	r4, #0
 8008e08:	d1f7      	bne.n	8008dfa <_fwalk_reent+0xe>
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e10:	89ab      	ldrh	r3, [r5, #12]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d907      	bls.n	8008e26 <_fwalk_reent+0x3a>
 8008e16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	d003      	beq.n	8008e26 <_fwalk_reent+0x3a>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4630      	mov	r0, r6
 8008e22:	47c0      	blx	r8
 8008e24:	4307      	orrs	r7, r0
 8008e26:	3568      	adds	r5, #104	; 0x68
 8008e28:	e7e9      	b.n	8008dfe <_fwalk_reent+0x12>

08008e2a <__retarget_lock_init_recursive>:
 8008e2a:	4770      	bx	lr

08008e2c <__retarget_lock_acquire_recursive>:
 8008e2c:	4770      	bx	lr

08008e2e <__retarget_lock_release_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <sbrk_aligned>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	4e0e      	ldr	r6, [pc, #56]	; (8008e6c <sbrk_aligned+0x3c>)
 8008e34:	460c      	mov	r4, r1
 8008e36:	6831      	ldr	r1, [r6, #0]
 8008e38:	4605      	mov	r5, r0
 8008e3a:	b911      	cbnz	r1, 8008e42 <sbrk_aligned+0x12>
 8008e3c:	f000 fb7a 	bl	8009534 <_sbrk_r>
 8008e40:	6030      	str	r0, [r6, #0]
 8008e42:	4621      	mov	r1, r4
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 fb75 	bl	8009534 <_sbrk_r>
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d00a      	beq.n	8008e64 <sbrk_aligned+0x34>
 8008e4e:	1cc4      	adds	r4, r0, #3
 8008e50:	f024 0403 	bic.w	r4, r4, #3
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	d007      	beq.n	8008e68 <sbrk_aligned+0x38>
 8008e58:	1a21      	subs	r1, r4, r0
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 fb6a 	bl	8009534 <_sbrk_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d101      	bne.n	8008e68 <sbrk_aligned+0x38>
 8008e64:	f04f 34ff 	mov.w	r4, #4294967295
 8008e68:	4620      	mov	r0, r4
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	240003a0 	.word	0x240003a0

08008e70 <_malloc_r>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	1ccd      	adds	r5, r1, #3
 8008e76:	f025 0503 	bic.w	r5, r5, #3
 8008e7a:	3508      	adds	r5, #8
 8008e7c:	2d0c      	cmp	r5, #12
 8008e7e:	bf38      	it	cc
 8008e80:	250c      	movcc	r5, #12
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	4607      	mov	r7, r0
 8008e86:	db01      	blt.n	8008e8c <_malloc_r+0x1c>
 8008e88:	42a9      	cmp	r1, r5
 8008e8a:	d905      	bls.n	8008e98 <_malloc_r+0x28>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	2600      	movs	r6, #0
 8008e92:	4630      	mov	r0, r6
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	4e2e      	ldr	r6, [pc, #184]	; (8008f54 <_malloc_r+0xe4>)
 8008e9a:	f000 fdbb 	bl	8009a14 <__malloc_lock>
 8008e9e:	6833      	ldr	r3, [r6, #0]
 8008ea0:	461c      	mov	r4, r3
 8008ea2:	bb34      	cbnz	r4, 8008ef2 <_malloc_r+0x82>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7ff ffc2 	bl	8008e30 <sbrk_aligned>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	4604      	mov	r4, r0
 8008eb0:	d14d      	bne.n	8008f4e <_malloc_r+0xde>
 8008eb2:	6834      	ldr	r4, [r6, #0]
 8008eb4:	4626      	mov	r6, r4
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	d140      	bne.n	8008f3c <_malloc_r+0xcc>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	eb04 0803 	add.w	r8, r4, r3
 8008ec4:	f000 fb36 	bl	8009534 <_sbrk_r>
 8008ec8:	4580      	cmp	r8, r0
 8008eca:	d13a      	bne.n	8008f42 <_malloc_r+0xd2>
 8008ecc:	6821      	ldr	r1, [r4, #0]
 8008ece:	3503      	adds	r5, #3
 8008ed0:	1a6d      	subs	r5, r5, r1
 8008ed2:	f025 0503 	bic.w	r5, r5, #3
 8008ed6:	3508      	adds	r5, #8
 8008ed8:	2d0c      	cmp	r5, #12
 8008eda:	bf38      	it	cc
 8008edc:	250c      	movcc	r5, #12
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ffa5 	bl	8008e30 <sbrk_aligned>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d02b      	beq.n	8008f42 <_malloc_r+0xd2>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	442b      	add	r3, r5
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	e00e      	b.n	8008f10 <_malloc_r+0xa0>
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	1b52      	subs	r2, r2, r5
 8008ef6:	d41e      	bmi.n	8008f36 <_malloc_r+0xc6>
 8008ef8:	2a0b      	cmp	r2, #11
 8008efa:	d916      	bls.n	8008f2a <_malloc_r+0xba>
 8008efc:	1961      	adds	r1, r4, r5
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	6025      	str	r5, [r4, #0]
 8008f02:	bf18      	it	ne
 8008f04:	6059      	strne	r1, [r3, #4]
 8008f06:	6863      	ldr	r3, [r4, #4]
 8008f08:	bf08      	it	eq
 8008f0a:	6031      	streq	r1, [r6, #0]
 8008f0c:	5162      	str	r2, [r4, r5]
 8008f0e:	604b      	str	r3, [r1, #4]
 8008f10:	4638      	mov	r0, r7
 8008f12:	f104 060b 	add.w	r6, r4, #11
 8008f16:	f000 fd83 	bl	8009a20 <__malloc_unlock>
 8008f1a:	f026 0607 	bic.w	r6, r6, #7
 8008f1e:	1d23      	adds	r3, r4, #4
 8008f20:	1af2      	subs	r2, r6, r3
 8008f22:	d0b6      	beq.n	8008e92 <_malloc_r+0x22>
 8008f24:	1b9b      	subs	r3, r3, r6
 8008f26:	50a3      	str	r3, [r4, r2]
 8008f28:	e7b3      	b.n	8008e92 <_malloc_r+0x22>
 8008f2a:	6862      	ldr	r2, [r4, #4]
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	bf0c      	ite	eq
 8008f30:	6032      	streq	r2, [r6, #0]
 8008f32:	605a      	strne	r2, [r3, #4]
 8008f34:	e7ec      	b.n	8008f10 <_malloc_r+0xa0>
 8008f36:	4623      	mov	r3, r4
 8008f38:	6864      	ldr	r4, [r4, #4]
 8008f3a:	e7b2      	b.n	8008ea2 <_malloc_r+0x32>
 8008f3c:	4634      	mov	r4, r6
 8008f3e:	6876      	ldr	r6, [r6, #4]
 8008f40:	e7b9      	b.n	8008eb6 <_malloc_r+0x46>
 8008f42:	230c      	movs	r3, #12
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	4638      	mov	r0, r7
 8008f48:	f000 fd6a 	bl	8009a20 <__malloc_unlock>
 8008f4c:	e7a1      	b.n	8008e92 <_malloc_r+0x22>
 8008f4e:	6025      	str	r5, [r4, #0]
 8008f50:	e7de      	b.n	8008f10 <_malloc_r+0xa0>
 8008f52:	bf00      	nop
 8008f54:	2400039c 	.word	0x2400039c

08008f58 <__sfputc_r>:
 8008f58:	6893      	ldr	r3, [r2, #8]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	b410      	push	{r4}
 8008f60:	6093      	str	r3, [r2, #8]
 8008f62:	da08      	bge.n	8008f76 <__sfputc_r+0x1e>
 8008f64:	6994      	ldr	r4, [r2, #24]
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	db01      	blt.n	8008f6e <__sfputc_r+0x16>
 8008f6a:	290a      	cmp	r1, #10
 8008f6c:	d103      	bne.n	8008f76 <__sfputc_r+0x1e>
 8008f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f72:	f000 bb33 	b.w	80095dc <__swbuf_r>
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	1c58      	adds	r0, r3, #1
 8008f7a:	6010      	str	r0, [r2, #0]
 8008f7c:	7019      	strb	r1, [r3, #0]
 8008f7e:	4608      	mov	r0, r1
 8008f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <__sfputs_r>:
 8008f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	18d5      	adds	r5, r2, r3
 8008f90:	42ac      	cmp	r4, r5
 8008f92:	d101      	bne.n	8008f98 <__sfputs_r+0x12>
 8008f94:	2000      	movs	r0, #0
 8008f96:	e007      	b.n	8008fa8 <__sfputs_r+0x22>
 8008f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ffda 	bl	8008f58 <__sfputc_r>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d1f3      	bne.n	8008f90 <__sfputs_r+0xa>
 8008fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fac <_vfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	460d      	mov	r5, r1
 8008fb2:	b09d      	sub	sp, #116	; 0x74
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	4698      	mov	r8, r3
 8008fb8:	4606      	mov	r6, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <_vfiprintf_r+0x18>
 8008fbc:	6983      	ldr	r3, [r0, #24]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_vfiprintf_r+0x18>
 8008fc0:	f7ff fe96 	bl	8008cf0 <__sinit>
 8008fc4:	4b89      	ldr	r3, [pc, #548]	; (80091ec <_vfiprintf_r+0x240>)
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	d11b      	bne.n	8009002 <_vfiprintf_r+0x56>
 8008fca:	6875      	ldr	r5, [r6, #4]
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x32>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x32>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f7ff ff27 	bl	8008e2c <__retarget_lock_acquire_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	071b      	lsls	r3, r3, #28
 8008fe2:	d501      	bpl.n	8008fe8 <_vfiprintf_r+0x3c>
 8008fe4:	692b      	ldr	r3, [r5, #16]
 8008fe6:	b9eb      	cbnz	r3, 8009024 <_vfiprintf_r+0x78>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4630      	mov	r0, r6
 8008fec:	f000 fb5a 	bl	80096a4 <__swsetup_r>
 8008ff0:	b1c0      	cbz	r0, 8009024 <_vfiprintf_r+0x78>
 8008ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff4:	07dc      	lsls	r4, r3, #31
 8008ff6:	d50e      	bpl.n	8009016 <_vfiprintf_r+0x6a>
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	b01d      	add	sp, #116	; 0x74
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	4b7b      	ldr	r3, [pc, #492]	; (80091f0 <_vfiprintf_r+0x244>)
 8009004:	429d      	cmp	r5, r3
 8009006:	d101      	bne.n	800900c <_vfiprintf_r+0x60>
 8009008:	68b5      	ldr	r5, [r6, #8]
 800900a:	e7df      	b.n	8008fcc <_vfiprintf_r+0x20>
 800900c:	4b79      	ldr	r3, [pc, #484]	; (80091f4 <_vfiprintf_r+0x248>)
 800900e:	429d      	cmp	r5, r3
 8009010:	bf08      	it	eq
 8009012:	68f5      	ldreq	r5, [r6, #12]
 8009014:	e7da      	b.n	8008fcc <_vfiprintf_r+0x20>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	0598      	lsls	r0, r3, #22
 800901a:	d4ed      	bmi.n	8008ff8 <_vfiprintf_r+0x4c>
 800901c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901e:	f7ff ff06 	bl	8008e2e <__retarget_lock_release_recursive>
 8009022:	e7e9      	b.n	8008ff8 <_vfiprintf_r+0x4c>
 8009024:	2300      	movs	r3, #0
 8009026:	9309      	str	r3, [sp, #36]	; 0x24
 8009028:	2320      	movs	r3, #32
 800902a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009032:	2330      	movs	r3, #48	; 0x30
 8009034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091f8 <_vfiprintf_r+0x24c>
 8009038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800903c:	f04f 0901 	mov.w	r9, #1
 8009040:	4623      	mov	r3, r4
 8009042:	469a      	mov	sl, r3
 8009044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009048:	b10a      	cbz	r2, 800904e <_vfiprintf_r+0xa2>
 800904a:	2a25      	cmp	r2, #37	; 0x25
 800904c:	d1f9      	bne.n	8009042 <_vfiprintf_r+0x96>
 800904e:	ebba 0b04 	subs.w	fp, sl, r4
 8009052:	d00b      	beq.n	800906c <_vfiprintf_r+0xc0>
 8009054:	465b      	mov	r3, fp
 8009056:	4622      	mov	r2, r4
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ff93 	bl	8008f86 <__sfputs_r>
 8009060:	3001      	adds	r0, #1
 8009062:	f000 80aa 	beq.w	80091ba <_vfiprintf_r+0x20e>
 8009066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009068:	445a      	add	r2, fp
 800906a:	9209      	str	r2, [sp, #36]	; 0x24
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80a2 	beq.w	80091ba <_vfiprintf_r+0x20e>
 8009076:	2300      	movs	r3, #0
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009080:	f10a 0a01 	add.w	sl, sl, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800908c:	931a      	str	r3, [sp, #104]	; 0x68
 800908e:	4654      	mov	r4, sl
 8009090:	2205      	movs	r2, #5
 8009092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009096:	4858      	ldr	r0, [pc, #352]	; (80091f8 <_vfiprintf_r+0x24c>)
 8009098:	f7f7 f93a 	bl	8000310 <memchr>
 800909c:	9a04      	ldr	r2, [sp, #16]
 800909e:	b9d8      	cbnz	r0, 80090d8 <_vfiprintf_r+0x12c>
 80090a0:	06d1      	lsls	r1, r2, #27
 80090a2:	bf44      	itt	mi
 80090a4:	2320      	movmi	r3, #32
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090aa:	0713      	lsls	r3, r2, #28
 80090ac:	bf44      	itt	mi
 80090ae:	232b      	movmi	r3, #43	; 0x2b
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b4:	f89a 3000 	ldrb.w	r3, [sl]
 80090b8:	2b2a      	cmp	r3, #42	; 0x2a
 80090ba:	d015      	beq.n	80090e8 <_vfiprintf_r+0x13c>
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	4654      	mov	r4, sl
 80090c0:	2000      	movs	r0, #0
 80090c2:	f04f 0c0a 	mov.w	ip, #10
 80090c6:	4621      	mov	r1, r4
 80090c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090cc:	3b30      	subs	r3, #48	; 0x30
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d94e      	bls.n	8009170 <_vfiprintf_r+0x1c4>
 80090d2:	b1b0      	cbz	r0, 8009102 <_vfiprintf_r+0x156>
 80090d4:	9207      	str	r2, [sp, #28]
 80090d6:	e014      	b.n	8009102 <_vfiprintf_r+0x156>
 80090d8:	eba0 0308 	sub.w	r3, r0, r8
 80090dc:	fa09 f303 	lsl.w	r3, r9, r3
 80090e0:	4313      	orrs	r3, r2
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	46a2      	mov	sl, r4
 80090e6:	e7d2      	b.n	800908e <_vfiprintf_r+0xe2>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d19      	adds	r1, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9103      	str	r1, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfbb      	ittet	lt
 80090f4:	425b      	neglt	r3, r3
 80090f6:	f042 0202 	orrlt.w	r2, r2, #2
 80090fa:	9307      	strge	r3, [sp, #28]
 80090fc:	9307      	strlt	r3, [sp, #28]
 80090fe:	bfb8      	it	lt
 8009100:	9204      	strlt	r2, [sp, #16]
 8009102:	7823      	ldrb	r3, [r4, #0]
 8009104:	2b2e      	cmp	r3, #46	; 0x2e
 8009106:	d10c      	bne.n	8009122 <_vfiprintf_r+0x176>
 8009108:	7863      	ldrb	r3, [r4, #1]
 800910a:	2b2a      	cmp	r3, #42	; 0x2a
 800910c:	d135      	bne.n	800917a <_vfiprintf_r+0x1ce>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d1a      	adds	r2, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfb8      	it	lt
 800911a:	f04f 33ff 	movlt.w	r3, #4294967295
 800911e:	3402      	adds	r4, #2
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009208 <_vfiprintf_r+0x25c>
 8009126:	7821      	ldrb	r1, [r4, #0]
 8009128:	2203      	movs	r2, #3
 800912a:	4650      	mov	r0, sl
 800912c:	f7f7 f8f0 	bl	8000310 <memchr>
 8009130:	b140      	cbz	r0, 8009144 <_vfiprintf_r+0x198>
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	eba0 000a 	sub.w	r0, r0, sl
 8009138:	fa03 f000 	lsl.w	r0, r3, r0
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	4303      	orrs	r3, r0
 8009140:	3401      	adds	r4, #1
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009148:	482c      	ldr	r0, [pc, #176]	; (80091fc <_vfiprintf_r+0x250>)
 800914a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914e:	2206      	movs	r2, #6
 8009150:	f7f7 f8de 	bl	8000310 <memchr>
 8009154:	2800      	cmp	r0, #0
 8009156:	d03f      	beq.n	80091d8 <_vfiprintf_r+0x22c>
 8009158:	4b29      	ldr	r3, [pc, #164]	; (8009200 <_vfiprintf_r+0x254>)
 800915a:	bb1b      	cbnz	r3, 80091a4 <_vfiprintf_r+0x1f8>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	3307      	adds	r3, #7
 8009160:	f023 0307 	bic.w	r3, r3, #7
 8009164:	3308      	adds	r3, #8
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916a:	443b      	add	r3, r7
 800916c:	9309      	str	r3, [sp, #36]	; 0x24
 800916e:	e767      	b.n	8009040 <_vfiprintf_r+0x94>
 8009170:	fb0c 3202 	mla	r2, ip, r2, r3
 8009174:	460c      	mov	r4, r1
 8009176:	2001      	movs	r0, #1
 8009178:	e7a5      	b.n	80090c6 <_vfiprintf_r+0x11a>
 800917a:	2300      	movs	r3, #0
 800917c:	3401      	adds	r4, #1
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	4619      	mov	r1, r3
 8009182:	f04f 0c0a 	mov.w	ip, #10
 8009186:	4620      	mov	r0, r4
 8009188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800918c:	3a30      	subs	r2, #48	; 0x30
 800918e:	2a09      	cmp	r2, #9
 8009190:	d903      	bls.n	800919a <_vfiprintf_r+0x1ee>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0c5      	beq.n	8009122 <_vfiprintf_r+0x176>
 8009196:	9105      	str	r1, [sp, #20]
 8009198:	e7c3      	b.n	8009122 <_vfiprintf_r+0x176>
 800919a:	fb0c 2101 	mla	r1, ip, r1, r2
 800919e:	4604      	mov	r4, r0
 80091a0:	2301      	movs	r3, #1
 80091a2:	e7f0      	b.n	8009186 <_vfiprintf_r+0x1da>
 80091a4:	ab03      	add	r3, sp, #12
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	462a      	mov	r2, r5
 80091aa:	4b16      	ldr	r3, [pc, #88]	; (8009204 <_vfiprintf_r+0x258>)
 80091ac:	a904      	add	r1, sp, #16
 80091ae:	4630      	mov	r0, r6
 80091b0:	f3af 8000 	nop.w
 80091b4:	4607      	mov	r7, r0
 80091b6:	1c78      	adds	r0, r7, #1
 80091b8:	d1d6      	bne.n	8009168 <_vfiprintf_r+0x1bc>
 80091ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091bc:	07d9      	lsls	r1, r3, #31
 80091be:	d405      	bmi.n	80091cc <_vfiprintf_r+0x220>
 80091c0:	89ab      	ldrh	r3, [r5, #12]
 80091c2:	059a      	lsls	r2, r3, #22
 80091c4:	d402      	bmi.n	80091cc <_vfiprintf_r+0x220>
 80091c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091c8:	f7ff fe31 	bl	8008e2e <__retarget_lock_release_recursive>
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	065b      	lsls	r3, r3, #25
 80091d0:	f53f af12 	bmi.w	8008ff8 <_vfiprintf_r+0x4c>
 80091d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d6:	e711      	b.n	8008ffc <_vfiprintf_r+0x50>
 80091d8:	ab03      	add	r3, sp, #12
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	462a      	mov	r2, r5
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <_vfiprintf_r+0x258>)
 80091e0:	a904      	add	r1, sp, #16
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 f880 	bl	80092e8 <_printf_i>
 80091e8:	e7e4      	b.n	80091b4 <_vfiprintf_r+0x208>
 80091ea:	bf00      	nop
 80091ec:	08009ba4 	.word	0x08009ba4
 80091f0:	08009bc4 	.word	0x08009bc4
 80091f4:	08009b84 	.word	0x08009b84
 80091f8:	08009be4 	.word	0x08009be4
 80091fc:	08009bee 	.word	0x08009bee
 8009200:	00000000 	.word	0x00000000
 8009204:	08008f87 	.word	0x08008f87
 8009208:	08009bea 	.word	0x08009bea

0800920c <_printf_common>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	4616      	mov	r6, r2
 8009212:	4699      	mov	r9, r3
 8009214:	688a      	ldr	r2, [r1, #8]
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800921c:	4293      	cmp	r3, r2
 800921e:	bfb8      	it	lt
 8009220:	4613      	movlt	r3, r2
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	b10a      	cbz	r2, 8009232 <_printf_common+0x26>
 800922e:	3301      	adds	r3, #1
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	0699      	lsls	r1, r3, #26
 8009236:	bf42      	ittt	mi
 8009238:	6833      	ldrmi	r3, [r6, #0]
 800923a:	3302      	addmi	r3, #2
 800923c:	6033      	strmi	r3, [r6, #0]
 800923e:	6825      	ldr	r5, [r4, #0]
 8009240:	f015 0506 	ands.w	r5, r5, #6
 8009244:	d106      	bne.n	8009254 <_printf_common+0x48>
 8009246:	f104 0a19 	add.w	sl, r4, #25
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	6832      	ldr	r2, [r6, #0]
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	42ab      	cmp	r3, r5
 8009252:	dc26      	bgt.n	80092a2 <_printf_common+0x96>
 8009254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009258:	1e13      	subs	r3, r2, #0
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	bf18      	it	ne
 800925e:	2301      	movne	r3, #1
 8009260:	0692      	lsls	r2, r2, #26
 8009262:	d42b      	bmi.n	80092bc <_printf_common+0xb0>
 8009264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009268:	4649      	mov	r1, r9
 800926a:	4638      	mov	r0, r7
 800926c:	47c0      	blx	r8
 800926e:	3001      	adds	r0, #1
 8009270:	d01e      	beq.n	80092b0 <_printf_common+0xa4>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	68e5      	ldr	r5, [r4, #12]
 8009276:	6832      	ldr	r2, [r6, #0]
 8009278:	f003 0306 	and.w	r3, r3, #6
 800927c:	2b04      	cmp	r3, #4
 800927e:	bf08      	it	eq
 8009280:	1aad      	subeq	r5, r5, r2
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	bf0c      	ite	eq
 8009288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800928c:	2500      	movne	r5, #0
 800928e:	4293      	cmp	r3, r2
 8009290:	bfc4      	itt	gt
 8009292:	1a9b      	subgt	r3, r3, r2
 8009294:	18ed      	addgt	r5, r5, r3
 8009296:	2600      	movs	r6, #0
 8009298:	341a      	adds	r4, #26
 800929a:	42b5      	cmp	r5, r6
 800929c:	d11a      	bne.n	80092d4 <_printf_common+0xc8>
 800929e:	2000      	movs	r0, #0
 80092a0:	e008      	b.n	80092b4 <_printf_common+0xa8>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4652      	mov	r2, sl
 80092a6:	4649      	mov	r1, r9
 80092a8:	4638      	mov	r0, r7
 80092aa:	47c0      	blx	r8
 80092ac:	3001      	adds	r0, #1
 80092ae:	d103      	bne.n	80092b8 <_printf_common+0xac>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	3501      	adds	r5, #1
 80092ba:	e7c6      	b.n	800924a <_printf_common+0x3e>
 80092bc:	18e1      	adds	r1, r4, r3
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	2030      	movs	r0, #48	; 0x30
 80092c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092c6:	4422      	add	r2, r4
 80092c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092d0:	3302      	adds	r3, #2
 80092d2:	e7c7      	b.n	8009264 <_printf_common+0x58>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4622      	mov	r2, r4
 80092d8:	4649      	mov	r1, r9
 80092da:	4638      	mov	r0, r7
 80092dc:	47c0      	blx	r8
 80092de:	3001      	adds	r0, #1
 80092e0:	d0e6      	beq.n	80092b0 <_printf_common+0xa4>
 80092e2:	3601      	adds	r6, #1
 80092e4:	e7d9      	b.n	800929a <_printf_common+0x8e>
	...

080092e8 <_printf_i>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	7e0f      	ldrb	r7, [r1, #24]
 80092ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092f0:	2f78      	cmp	r7, #120	; 0x78
 80092f2:	4691      	mov	r9, r2
 80092f4:	4680      	mov	r8, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	469a      	mov	sl, r3
 80092fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092fe:	d807      	bhi.n	8009310 <_printf_i+0x28>
 8009300:	2f62      	cmp	r7, #98	; 0x62
 8009302:	d80a      	bhi.n	800931a <_printf_i+0x32>
 8009304:	2f00      	cmp	r7, #0
 8009306:	f000 80d8 	beq.w	80094ba <_printf_i+0x1d2>
 800930a:	2f58      	cmp	r7, #88	; 0x58
 800930c:	f000 80a3 	beq.w	8009456 <_printf_i+0x16e>
 8009310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009318:	e03a      	b.n	8009390 <_printf_i+0xa8>
 800931a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800931e:	2b15      	cmp	r3, #21
 8009320:	d8f6      	bhi.n	8009310 <_printf_i+0x28>
 8009322:	a101      	add	r1, pc, #4	; (adr r1, 8009328 <_printf_i+0x40>)
 8009324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009328:	08009381 	.word	0x08009381
 800932c:	08009395 	.word	0x08009395
 8009330:	08009311 	.word	0x08009311
 8009334:	08009311 	.word	0x08009311
 8009338:	08009311 	.word	0x08009311
 800933c:	08009311 	.word	0x08009311
 8009340:	08009395 	.word	0x08009395
 8009344:	08009311 	.word	0x08009311
 8009348:	08009311 	.word	0x08009311
 800934c:	08009311 	.word	0x08009311
 8009350:	08009311 	.word	0x08009311
 8009354:	080094a1 	.word	0x080094a1
 8009358:	080093c5 	.word	0x080093c5
 800935c:	08009483 	.word	0x08009483
 8009360:	08009311 	.word	0x08009311
 8009364:	08009311 	.word	0x08009311
 8009368:	080094c3 	.word	0x080094c3
 800936c:	08009311 	.word	0x08009311
 8009370:	080093c5 	.word	0x080093c5
 8009374:	08009311 	.word	0x08009311
 8009378:	08009311 	.word	0x08009311
 800937c:	0800948b 	.word	0x0800948b
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	602a      	str	r2, [r5, #0]
 8009388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800938c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009390:	2301      	movs	r3, #1
 8009392:	e0a3      	b.n	80094dc <_printf_i+0x1f4>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	6829      	ldr	r1, [r5, #0]
 8009398:	0606      	lsls	r6, r0, #24
 800939a:	f101 0304 	add.w	r3, r1, #4
 800939e:	d50a      	bpl.n	80093b6 <_printf_i+0xce>
 80093a0:	680e      	ldr	r6, [r1, #0]
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	da03      	bge.n	80093b0 <_printf_i+0xc8>
 80093a8:	232d      	movs	r3, #45	; 0x2d
 80093aa:	4276      	negs	r6, r6
 80093ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b0:	485e      	ldr	r0, [pc, #376]	; (800952c <_printf_i+0x244>)
 80093b2:	230a      	movs	r3, #10
 80093b4:	e019      	b.n	80093ea <_printf_i+0x102>
 80093b6:	680e      	ldr	r6, [r1, #0]
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093be:	bf18      	it	ne
 80093c0:	b236      	sxthne	r6, r6
 80093c2:	e7ef      	b.n	80093a4 <_printf_i+0xbc>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	6820      	ldr	r0, [r4, #0]
 80093c8:	1d19      	adds	r1, r3, #4
 80093ca:	6029      	str	r1, [r5, #0]
 80093cc:	0601      	lsls	r1, r0, #24
 80093ce:	d501      	bpl.n	80093d4 <_printf_i+0xec>
 80093d0:	681e      	ldr	r6, [r3, #0]
 80093d2:	e002      	b.n	80093da <_printf_i+0xf2>
 80093d4:	0646      	lsls	r6, r0, #25
 80093d6:	d5fb      	bpl.n	80093d0 <_printf_i+0xe8>
 80093d8:	881e      	ldrh	r6, [r3, #0]
 80093da:	4854      	ldr	r0, [pc, #336]	; (800952c <_printf_i+0x244>)
 80093dc:	2f6f      	cmp	r7, #111	; 0x6f
 80093de:	bf0c      	ite	eq
 80093e0:	2308      	moveq	r3, #8
 80093e2:	230a      	movne	r3, #10
 80093e4:	2100      	movs	r1, #0
 80093e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ea:	6865      	ldr	r5, [r4, #4]
 80093ec:	60a5      	str	r5, [r4, #8]
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	bfa2      	ittt	ge
 80093f2:	6821      	ldrge	r1, [r4, #0]
 80093f4:	f021 0104 	bicge.w	r1, r1, #4
 80093f8:	6021      	strge	r1, [r4, #0]
 80093fa:	b90e      	cbnz	r6, 8009400 <_printf_i+0x118>
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	d04d      	beq.n	800949c <_printf_i+0x1b4>
 8009400:	4615      	mov	r5, r2
 8009402:	fbb6 f1f3 	udiv	r1, r6, r3
 8009406:	fb03 6711 	mls	r7, r3, r1, r6
 800940a:	5dc7      	ldrb	r7, [r0, r7]
 800940c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009410:	4637      	mov	r7, r6
 8009412:	42bb      	cmp	r3, r7
 8009414:	460e      	mov	r6, r1
 8009416:	d9f4      	bls.n	8009402 <_printf_i+0x11a>
 8009418:	2b08      	cmp	r3, #8
 800941a:	d10b      	bne.n	8009434 <_printf_i+0x14c>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	07de      	lsls	r6, r3, #31
 8009420:	d508      	bpl.n	8009434 <_printf_i+0x14c>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4299      	cmp	r1, r3
 8009428:	bfde      	ittt	le
 800942a:	2330      	movle	r3, #48	; 0x30
 800942c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009430:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009434:	1b52      	subs	r2, r2, r5
 8009436:	6122      	str	r2, [r4, #16]
 8009438:	f8cd a000 	str.w	sl, [sp]
 800943c:	464b      	mov	r3, r9
 800943e:	aa03      	add	r2, sp, #12
 8009440:	4621      	mov	r1, r4
 8009442:	4640      	mov	r0, r8
 8009444:	f7ff fee2 	bl	800920c <_printf_common>
 8009448:	3001      	adds	r0, #1
 800944a:	d14c      	bne.n	80094e6 <_printf_i+0x1fe>
 800944c:	f04f 30ff 	mov.w	r0, #4294967295
 8009450:	b004      	add	sp, #16
 8009452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009456:	4835      	ldr	r0, [pc, #212]	; (800952c <_printf_i+0x244>)
 8009458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800945c:	6829      	ldr	r1, [r5, #0]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f851 6b04 	ldr.w	r6, [r1], #4
 8009464:	6029      	str	r1, [r5, #0]
 8009466:	061d      	lsls	r5, r3, #24
 8009468:	d514      	bpl.n	8009494 <_printf_i+0x1ac>
 800946a:	07df      	lsls	r7, r3, #31
 800946c:	bf44      	itt	mi
 800946e:	f043 0320 	orrmi.w	r3, r3, #32
 8009472:	6023      	strmi	r3, [r4, #0]
 8009474:	b91e      	cbnz	r6, 800947e <_printf_i+0x196>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	f023 0320 	bic.w	r3, r3, #32
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	2310      	movs	r3, #16
 8009480:	e7b0      	b.n	80093e4 <_printf_i+0xfc>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	f043 0320 	orr.w	r3, r3, #32
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	2378      	movs	r3, #120	; 0x78
 800948c:	4828      	ldr	r0, [pc, #160]	; (8009530 <_printf_i+0x248>)
 800948e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009492:	e7e3      	b.n	800945c <_printf_i+0x174>
 8009494:	0659      	lsls	r1, r3, #25
 8009496:	bf48      	it	mi
 8009498:	b2b6      	uxthmi	r6, r6
 800949a:	e7e6      	b.n	800946a <_printf_i+0x182>
 800949c:	4615      	mov	r5, r2
 800949e:	e7bb      	b.n	8009418 <_printf_i+0x130>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	6826      	ldr	r6, [r4, #0]
 80094a4:	6961      	ldr	r1, [r4, #20]
 80094a6:	1d18      	adds	r0, r3, #4
 80094a8:	6028      	str	r0, [r5, #0]
 80094aa:	0635      	lsls	r5, r6, #24
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	d501      	bpl.n	80094b4 <_printf_i+0x1cc>
 80094b0:	6019      	str	r1, [r3, #0]
 80094b2:	e002      	b.n	80094ba <_printf_i+0x1d2>
 80094b4:	0670      	lsls	r0, r6, #25
 80094b6:	d5fb      	bpl.n	80094b0 <_printf_i+0x1c8>
 80094b8:	8019      	strh	r1, [r3, #0]
 80094ba:	2300      	movs	r3, #0
 80094bc:	6123      	str	r3, [r4, #16]
 80094be:	4615      	mov	r5, r2
 80094c0:	e7ba      	b.n	8009438 <_printf_i+0x150>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	1d1a      	adds	r2, r3, #4
 80094c6:	602a      	str	r2, [r5, #0]
 80094c8:	681d      	ldr	r5, [r3, #0]
 80094ca:	6862      	ldr	r2, [r4, #4]
 80094cc:	2100      	movs	r1, #0
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7f6 ff1e 	bl	8000310 <memchr>
 80094d4:	b108      	cbz	r0, 80094da <_printf_i+0x1f2>
 80094d6:	1b40      	subs	r0, r0, r5
 80094d8:	6060      	str	r0, [r4, #4]
 80094da:	6863      	ldr	r3, [r4, #4]
 80094dc:	6123      	str	r3, [r4, #16]
 80094de:	2300      	movs	r3, #0
 80094e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e4:	e7a8      	b.n	8009438 <_printf_i+0x150>
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	462a      	mov	r2, r5
 80094ea:	4649      	mov	r1, r9
 80094ec:	4640      	mov	r0, r8
 80094ee:	47d0      	blx	sl
 80094f0:	3001      	adds	r0, #1
 80094f2:	d0ab      	beq.n	800944c <_printf_i+0x164>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	079b      	lsls	r3, r3, #30
 80094f8:	d413      	bmi.n	8009522 <_printf_i+0x23a>
 80094fa:	68e0      	ldr	r0, [r4, #12]
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	4298      	cmp	r0, r3
 8009500:	bfb8      	it	lt
 8009502:	4618      	movlt	r0, r3
 8009504:	e7a4      	b.n	8009450 <_printf_i+0x168>
 8009506:	2301      	movs	r3, #1
 8009508:	4632      	mov	r2, r6
 800950a:	4649      	mov	r1, r9
 800950c:	4640      	mov	r0, r8
 800950e:	47d0      	blx	sl
 8009510:	3001      	adds	r0, #1
 8009512:	d09b      	beq.n	800944c <_printf_i+0x164>
 8009514:	3501      	adds	r5, #1
 8009516:	68e3      	ldr	r3, [r4, #12]
 8009518:	9903      	ldr	r1, [sp, #12]
 800951a:	1a5b      	subs	r3, r3, r1
 800951c:	42ab      	cmp	r3, r5
 800951e:	dcf2      	bgt.n	8009506 <_printf_i+0x21e>
 8009520:	e7eb      	b.n	80094fa <_printf_i+0x212>
 8009522:	2500      	movs	r5, #0
 8009524:	f104 0619 	add.w	r6, r4, #25
 8009528:	e7f5      	b.n	8009516 <_printf_i+0x22e>
 800952a:	bf00      	nop
 800952c:	08009bf5 	.word	0x08009bf5
 8009530:	08009c06 	.word	0x08009c06

08009534 <_sbrk_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d06      	ldr	r5, [pc, #24]	; (8009550 <_sbrk_r+0x1c>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f7ff fa5c 	bl	80089fc <_sbrk>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_sbrk_r+0x1a>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_sbrk_r+0x1a>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	240003a4 	.word	0x240003a4

08009554 <__sread>:
 8009554:	b510      	push	{r4, lr}
 8009556:	460c      	mov	r4, r1
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	f000 fab2 	bl	8009ac4 <_read_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	bfab      	itete	ge
 8009564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009566:	89a3      	ldrhlt	r3, [r4, #12]
 8009568:	181b      	addge	r3, r3, r0
 800956a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800956e:	bfac      	ite	ge
 8009570:	6563      	strge	r3, [r4, #84]	; 0x54
 8009572:	81a3      	strhlt	r3, [r4, #12]
 8009574:	bd10      	pop	{r4, pc}

08009576 <__swrite>:
 8009576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	461f      	mov	r7, r3
 800957c:	898b      	ldrh	r3, [r1, #12]
 800957e:	05db      	lsls	r3, r3, #23
 8009580:	4605      	mov	r5, r0
 8009582:	460c      	mov	r4, r1
 8009584:	4616      	mov	r6, r2
 8009586:	d505      	bpl.n	8009594 <__swrite+0x1e>
 8009588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958c:	2302      	movs	r3, #2
 800958e:	2200      	movs	r2, #0
 8009590:	f000 f9c8 	bl	8009924 <_lseek_r>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800959a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	4632      	mov	r2, r6
 80095a2:	463b      	mov	r3, r7
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095aa:	f000 b869 	b.w	8009680 <_write_r>

080095ae <__sseek>:
 80095ae:	b510      	push	{r4, lr}
 80095b0:	460c      	mov	r4, r1
 80095b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b6:	f000 f9b5 	bl	8009924 <_lseek_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	bf15      	itete	ne
 80095c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80095c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095ca:	81a3      	strheq	r3, [r4, #12]
 80095cc:	bf18      	it	ne
 80095ce:	81a3      	strhne	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__sclose>:
 80095d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d6:	f000 b8d3 	b.w	8009780 <_close_r>
	...

080095dc <__swbuf_r>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	460e      	mov	r6, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	4605      	mov	r5, r0
 80095e4:	b118      	cbz	r0, 80095ee <__swbuf_r+0x12>
 80095e6:	6983      	ldr	r3, [r0, #24]
 80095e8:	b90b      	cbnz	r3, 80095ee <__swbuf_r+0x12>
 80095ea:	f7ff fb81 	bl	8008cf0 <__sinit>
 80095ee:	4b21      	ldr	r3, [pc, #132]	; (8009674 <__swbuf_r+0x98>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	d12b      	bne.n	800964c <__swbuf_r+0x70>
 80095f4:	686c      	ldr	r4, [r5, #4]
 80095f6:	69a3      	ldr	r3, [r4, #24]
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	071a      	lsls	r2, r3, #28
 80095fe:	d52f      	bpl.n	8009660 <__swbuf_r+0x84>
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	b36b      	cbz	r3, 8009660 <__swbuf_r+0x84>
 8009604:	6923      	ldr	r3, [r4, #16]
 8009606:	6820      	ldr	r0, [r4, #0]
 8009608:	1ac0      	subs	r0, r0, r3
 800960a:	6963      	ldr	r3, [r4, #20]
 800960c:	b2f6      	uxtb	r6, r6
 800960e:	4283      	cmp	r3, r0
 8009610:	4637      	mov	r7, r6
 8009612:	dc04      	bgt.n	800961e <__swbuf_r+0x42>
 8009614:	4621      	mov	r1, r4
 8009616:	4628      	mov	r0, r5
 8009618:	f000 f948 	bl	80098ac <_fflush_r>
 800961c:	bb30      	cbnz	r0, 800966c <__swbuf_r+0x90>
 800961e:	68a3      	ldr	r3, [r4, #8]
 8009620:	3b01      	subs	r3, #1
 8009622:	60a3      	str	r3, [r4, #8]
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	6022      	str	r2, [r4, #0]
 800962a:	701e      	strb	r6, [r3, #0]
 800962c:	6963      	ldr	r3, [r4, #20]
 800962e:	3001      	adds	r0, #1
 8009630:	4283      	cmp	r3, r0
 8009632:	d004      	beq.n	800963e <__swbuf_r+0x62>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	07db      	lsls	r3, r3, #31
 8009638:	d506      	bpl.n	8009648 <__swbuf_r+0x6c>
 800963a:	2e0a      	cmp	r6, #10
 800963c:	d104      	bne.n	8009648 <__swbuf_r+0x6c>
 800963e:	4621      	mov	r1, r4
 8009640:	4628      	mov	r0, r5
 8009642:	f000 f933 	bl	80098ac <_fflush_r>
 8009646:	b988      	cbnz	r0, 800966c <__swbuf_r+0x90>
 8009648:	4638      	mov	r0, r7
 800964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <__swbuf_r+0x9c>)
 800964e:	429c      	cmp	r4, r3
 8009650:	d101      	bne.n	8009656 <__swbuf_r+0x7a>
 8009652:	68ac      	ldr	r4, [r5, #8]
 8009654:	e7cf      	b.n	80095f6 <__swbuf_r+0x1a>
 8009656:	4b09      	ldr	r3, [pc, #36]	; (800967c <__swbuf_r+0xa0>)
 8009658:	429c      	cmp	r4, r3
 800965a:	bf08      	it	eq
 800965c:	68ec      	ldreq	r4, [r5, #12]
 800965e:	e7ca      	b.n	80095f6 <__swbuf_r+0x1a>
 8009660:	4621      	mov	r1, r4
 8009662:	4628      	mov	r0, r5
 8009664:	f000 f81e 	bl	80096a4 <__swsetup_r>
 8009668:	2800      	cmp	r0, #0
 800966a:	d0cb      	beq.n	8009604 <__swbuf_r+0x28>
 800966c:	f04f 37ff 	mov.w	r7, #4294967295
 8009670:	e7ea      	b.n	8009648 <__swbuf_r+0x6c>
 8009672:	bf00      	nop
 8009674:	08009ba4 	.word	0x08009ba4
 8009678:	08009bc4 	.word	0x08009bc4
 800967c:	08009b84 	.word	0x08009b84

08009680 <_write_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_write_r+0x20>)
 8009684:	4604      	mov	r4, r0
 8009686:	4608      	mov	r0, r1
 8009688:	4611      	mov	r1, r2
 800968a:	2200      	movs	r2, #0
 800968c:	602a      	str	r2, [r5, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	f7ff f963 	bl	800895a <_write>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_write_r+0x1e>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_write_r+0x1e>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	240003a4 	.word	0x240003a4

080096a4 <__swsetup_r>:
 80096a4:	4b32      	ldr	r3, [pc, #200]	; (8009770 <__swsetup_r+0xcc>)
 80096a6:	b570      	push	{r4, r5, r6, lr}
 80096a8:	681d      	ldr	r5, [r3, #0]
 80096aa:	4606      	mov	r6, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	b125      	cbz	r5, 80096ba <__swsetup_r+0x16>
 80096b0:	69ab      	ldr	r3, [r5, #24]
 80096b2:	b913      	cbnz	r3, 80096ba <__swsetup_r+0x16>
 80096b4:	4628      	mov	r0, r5
 80096b6:	f7ff fb1b 	bl	8008cf0 <__sinit>
 80096ba:	4b2e      	ldr	r3, [pc, #184]	; (8009774 <__swsetup_r+0xd0>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	d10f      	bne.n	80096e0 <__swsetup_r+0x3c>
 80096c0:	686c      	ldr	r4, [r5, #4]
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096c8:	0719      	lsls	r1, r3, #28
 80096ca:	d42c      	bmi.n	8009726 <__swsetup_r+0x82>
 80096cc:	06dd      	lsls	r5, r3, #27
 80096ce:	d411      	bmi.n	80096f4 <__swsetup_r+0x50>
 80096d0:	2309      	movs	r3, #9
 80096d2:	6033      	str	r3, [r6, #0]
 80096d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096d8:	81a3      	strh	r3, [r4, #12]
 80096da:	f04f 30ff 	mov.w	r0, #4294967295
 80096de:	e03e      	b.n	800975e <__swsetup_r+0xba>
 80096e0:	4b25      	ldr	r3, [pc, #148]	; (8009778 <__swsetup_r+0xd4>)
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d101      	bne.n	80096ea <__swsetup_r+0x46>
 80096e6:	68ac      	ldr	r4, [r5, #8]
 80096e8:	e7eb      	b.n	80096c2 <__swsetup_r+0x1e>
 80096ea:	4b24      	ldr	r3, [pc, #144]	; (800977c <__swsetup_r+0xd8>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	bf08      	it	eq
 80096f0:	68ec      	ldreq	r4, [r5, #12]
 80096f2:	e7e6      	b.n	80096c2 <__swsetup_r+0x1e>
 80096f4:	0758      	lsls	r0, r3, #29
 80096f6:	d512      	bpl.n	800971e <__swsetup_r+0x7a>
 80096f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096fa:	b141      	cbz	r1, 800970e <__swsetup_r+0x6a>
 80096fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009700:	4299      	cmp	r1, r3
 8009702:	d002      	beq.n	800970a <__swsetup_r+0x66>
 8009704:	4630      	mov	r0, r6
 8009706:	f000 f991 	bl	8009a2c <_free_r>
 800970a:	2300      	movs	r3, #0
 800970c:	6363      	str	r3, [r4, #52]	; 0x34
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009714:	81a3      	strh	r3, [r4, #12]
 8009716:	2300      	movs	r3, #0
 8009718:	6063      	str	r3, [r4, #4]
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f043 0308 	orr.w	r3, r3, #8
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	b94b      	cbnz	r3, 800973e <__swsetup_r+0x9a>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009734:	d003      	beq.n	800973e <__swsetup_r+0x9a>
 8009736:	4621      	mov	r1, r4
 8009738:	4630      	mov	r0, r6
 800973a:	f000 f92b 	bl	8009994 <__smakebuf_r>
 800973e:	89a0      	ldrh	r0, [r4, #12]
 8009740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009744:	f010 0301 	ands.w	r3, r0, #1
 8009748:	d00a      	beq.n	8009760 <__swsetup_r+0xbc>
 800974a:	2300      	movs	r3, #0
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	6963      	ldr	r3, [r4, #20]
 8009750:	425b      	negs	r3, r3
 8009752:	61a3      	str	r3, [r4, #24]
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	b943      	cbnz	r3, 800976a <__swsetup_r+0xc6>
 8009758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800975c:	d1ba      	bne.n	80096d4 <__swsetup_r+0x30>
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	0781      	lsls	r1, r0, #30
 8009762:	bf58      	it	pl
 8009764:	6963      	ldrpl	r3, [r4, #20]
 8009766:	60a3      	str	r3, [r4, #8]
 8009768:	e7f4      	b.n	8009754 <__swsetup_r+0xb0>
 800976a:	2000      	movs	r0, #0
 800976c:	e7f7      	b.n	800975e <__swsetup_r+0xba>
 800976e:	bf00      	nop
 8009770:	24000010 	.word	0x24000010
 8009774:	08009ba4 	.word	0x08009ba4
 8009778:	08009bc4 	.word	0x08009bc4
 800977c:	08009b84 	.word	0x08009b84

08009780 <_close_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d06      	ldr	r5, [pc, #24]	; (800979c <_close_r+0x1c>)
 8009784:	2300      	movs	r3, #0
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7ff f901 	bl	8008992 <_close>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_close_r+0x1a>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_close_r+0x1a>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	240003a4 	.word	0x240003a4

080097a0 <__sflush_r>:
 80097a0:	898a      	ldrh	r2, [r1, #12]
 80097a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a6:	4605      	mov	r5, r0
 80097a8:	0710      	lsls	r0, r2, #28
 80097aa:	460c      	mov	r4, r1
 80097ac:	d458      	bmi.n	8009860 <__sflush_r+0xc0>
 80097ae:	684b      	ldr	r3, [r1, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dc05      	bgt.n	80097c0 <__sflush_r+0x20>
 80097b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dc02      	bgt.n	80097c0 <__sflush_r+0x20>
 80097ba:	2000      	movs	r0, #0
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	d0f9      	beq.n	80097ba <__sflush_r+0x1a>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097cc:	682f      	ldr	r7, [r5, #0]
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	d032      	beq.n	8009838 <__sflush_r+0x98>
 80097d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	075a      	lsls	r2, r3, #29
 80097d8:	d505      	bpl.n	80097e6 <__sflush_r+0x46>
 80097da:	6863      	ldr	r3, [r4, #4]
 80097dc:	1ac0      	subs	r0, r0, r3
 80097de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097e0:	b10b      	cbz	r3, 80097e6 <__sflush_r+0x46>
 80097e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097e4:	1ac0      	subs	r0, r0, r3
 80097e6:	2300      	movs	r3, #0
 80097e8:	4602      	mov	r2, r0
 80097ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ec:	6a21      	ldr	r1, [r4, #32]
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b0      	blx	r6
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	d106      	bne.n	8009806 <__sflush_r+0x66>
 80097f8:	6829      	ldr	r1, [r5, #0]
 80097fa:	291d      	cmp	r1, #29
 80097fc:	d82c      	bhi.n	8009858 <__sflush_r+0xb8>
 80097fe:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <__sflush_r+0x108>)
 8009800:	40ca      	lsrs	r2, r1
 8009802:	07d6      	lsls	r6, r2, #31
 8009804:	d528      	bpl.n	8009858 <__sflush_r+0xb8>
 8009806:	2200      	movs	r2, #0
 8009808:	6062      	str	r2, [r4, #4]
 800980a:	04d9      	lsls	r1, r3, #19
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	6022      	str	r2, [r4, #0]
 8009810:	d504      	bpl.n	800981c <__sflush_r+0x7c>
 8009812:	1c42      	adds	r2, r0, #1
 8009814:	d101      	bne.n	800981a <__sflush_r+0x7a>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	b903      	cbnz	r3, 800981c <__sflush_r+0x7c>
 800981a:	6560      	str	r0, [r4, #84]	; 0x54
 800981c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981e:	602f      	str	r7, [r5, #0]
 8009820:	2900      	cmp	r1, #0
 8009822:	d0ca      	beq.n	80097ba <__sflush_r+0x1a>
 8009824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009828:	4299      	cmp	r1, r3
 800982a:	d002      	beq.n	8009832 <__sflush_r+0x92>
 800982c:	4628      	mov	r0, r5
 800982e:	f000 f8fd 	bl	8009a2c <_free_r>
 8009832:	2000      	movs	r0, #0
 8009834:	6360      	str	r0, [r4, #52]	; 0x34
 8009836:	e7c1      	b.n	80097bc <__sflush_r+0x1c>
 8009838:	6a21      	ldr	r1, [r4, #32]
 800983a:	2301      	movs	r3, #1
 800983c:	4628      	mov	r0, r5
 800983e:	47b0      	blx	r6
 8009840:	1c41      	adds	r1, r0, #1
 8009842:	d1c7      	bne.n	80097d4 <__sflush_r+0x34>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0c4      	beq.n	80097d4 <__sflush_r+0x34>
 800984a:	2b1d      	cmp	r3, #29
 800984c:	d001      	beq.n	8009852 <__sflush_r+0xb2>
 800984e:	2b16      	cmp	r3, #22
 8009850:	d101      	bne.n	8009856 <__sflush_r+0xb6>
 8009852:	602f      	str	r7, [r5, #0]
 8009854:	e7b1      	b.n	80097ba <__sflush_r+0x1a>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985c:	81a3      	strh	r3, [r4, #12]
 800985e:	e7ad      	b.n	80097bc <__sflush_r+0x1c>
 8009860:	690f      	ldr	r7, [r1, #16]
 8009862:	2f00      	cmp	r7, #0
 8009864:	d0a9      	beq.n	80097ba <__sflush_r+0x1a>
 8009866:	0793      	lsls	r3, r2, #30
 8009868:	680e      	ldr	r6, [r1, #0]
 800986a:	bf08      	it	eq
 800986c:	694b      	ldreq	r3, [r1, #20]
 800986e:	600f      	str	r7, [r1, #0]
 8009870:	bf18      	it	ne
 8009872:	2300      	movne	r3, #0
 8009874:	eba6 0807 	sub.w	r8, r6, r7
 8009878:	608b      	str	r3, [r1, #8]
 800987a:	f1b8 0f00 	cmp.w	r8, #0
 800987e:	dd9c      	ble.n	80097ba <__sflush_r+0x1a>
 8009880:	6a21      	ldr	r1, [r4, #32]
 8009882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009884:	4643      	mov	r3, r8
 8009886:	463a      	mov	r2, r7
 8009888:	4628      	mov	r0, r5
 800988a:	47b0      	blx	r6
 800988c:	2800      	cmp	r0, #0
 800988e:	dc06      	bgt.n	800989e <__sflush_r+0xfe>
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e78e      	b.n	80097bc <__sflush_r+0x1c>
 800989e:	4407      	add	r7, r0
 80098a0:	eba8 0800 	sub.w	r8, r8, r0
 80098a4:	e7e9      	b.n	800987a <__sflush_r+0xda>
 80098a6:	bf00      	nop
 80098a8:	20400001 	.word	0x20400001

080098ac <_fflush_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	4605      	mov	r5, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b913      	cbnz	r3, 80098bc <_fflush_r+0x10>
 80098b6:	2500      	movs	r5, #0
 80098b8:	4628      	mov	r0, r5
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	b118      	cbz	r0, 80098c6 <_fflush_r+0x1a>
 80098be:	6983      	ldr	r3, [r0, #24]
 80098c0:	b90b      	cbnz	r3, 80098c6 <_fflush_r+0x1a>
 80098c2:	f7ff fa15 	bl	8008cf0 <__sinit>
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <_fflush_r+0x6c>)
 80098c8:	429c      	cmp	r4, r3
 80098ca:	d11b      	bne.n	8009904 <_fflush_r+0x58>
 80098cc:	686c      	ldr	r4, [r5, #4]
 80098ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d0ef      	beq.n	80098b6 <_fflush_r+0xa>
 80098d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098d8:	07d0      	lsls	r0, r2, #31
 80098da:	d404      	bmi.n	80098e6 <_fflush_r+0x3a>
 80098dc:	0599      	lsls	r1, r3, #22
 80098de:	d402      	bmi.n	80098e6 <_fflush_r+0x3a>
 80098e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098e2:	f7ff faa3 	bl	8008e2c <__retarget_lock_acquire_recursive>
 80098e6:	4628      	mov	r0, r5
 80098e8:	4621      	mov	r1, r4
 80098ea:	f7ff ff59 	bl	80097a0 <__sflush_r>
 80098ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098f0:	07da      	lsls	r2, r3, #31
 80098f2:	4605      	mov	r5, r0
 80098f4:	d4e0      	bmi.n	80098b8 <_fflush_r+0xc>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	059b      	lsls	r3, r3, #22
 80098fa:	d4dd      	bmi.n	80098b8 <_fflush_r+0xc>
 80098fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098fe:	f7ff fa96 	bl	8008e2e <__retarget_lock_release_recursive>
 8009902:	e7d9      	b.n	80098b8 <_fflush_r+0xc>
 8009904:	4b05      	ldr	r3, [pc, #20]	; (800991c <_fflush_r+0x70>)
 8009906:	429c      	cmp	r4, r3
 8009908:	d101      	bne.n	800990e <_fflush_r+0x62>
 800990a:	68ac      	ldr	r4, [r5, #8]
 800990c:	e7df      	b.n	80098ce <_fflush_r+0x22>
 800990e:	4b04      	ldr	r3, [pc, #16]	; (8009920 <_fflush_r+0x74>)
 8009910:	429c      	cmp	r4, r3
 8009912:	bf08      	it	eq
 8009914:	68ec      	ldreq	r4, [r5, #12]
 8009916:	e7da      	b.n	80098ce <_fflush_r+0x22>
 8009918:	08009ba4 	.word	0x08009ba4
 800991c:	08009bc4 	.word	0x08009bc4
 8009920:	08009b84 	.word	0x08009b84

08009924 <_lseek_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	; (8009944 <_lseek_r+0x20>)
 8009928:	4604      	mov	r4, r0
 800992a:	4608      	mov	r0, r1
 800992c:	4611      	mov	r1, r2
 800992e:	2200      	movs	r2, #0
 8009930:	602a      	str	r2, [r5, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	f7ff f854 	bl	80089e0 <_lseek>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_lseek_r+0x1e>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_lseek_r+0x1e>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	240003a4 	.word	0x240003a4

08009948 <__swhatbuf_r>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	460e      	mov	r6, r1
 800994c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009950:	2900      	cmp	r1, #0
 8009952:	b096      	sub	sp, #88	; 0x58
 8009954:	4614      	mov	r4, r2
 8009956:	461d      	mov	r5, r3
 8009958:	da08      	bge.n	800996c <__swhatbuf_r+0x24>
 800995a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	602a      	str	r2, [r5, #0]
 8009962:	061a      	lsls	r2, r3, #24
 8009964:	d410      	bmi.n	8009988 <__swhatbuf_r+0x40>
 8009966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996a:	e00e      	b.n	800998a <__swhatbuf_r+0x42>
 800996c:	466a      	mov	r2, sp
 800996e:	f000 f8bb 	bl	8009ae8 <_fstat_r>
 8009972:	2800      	cmp	r0, #0
 8009974:	dbf1      	blt.n	800995a <__swhatbuf_r+0x12>
 8009976:	9a01      	ldr	r2, [sp, #4]
 8009978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800997c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009980:	425a      	negs	r2, r3
 8009982:	415a      	adcs	r2, r3
 8009984:	602a      	str	r2, [r5, #0]
 8009986:	e7ee      	b.n	8009966 <__swhatbuf_r+0x1e>
 8009988:	2340      	movs	r3, #64	; 0x40
 800998a:	2000      	movs	r0, #0
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	b016      	add	sp, #88	; 0x58
 8009990:	bd70      	pop	{r4, r5, r6, pc}
	...

08009994 <__smakebuf_r>:
 8009994:	898b      	ldrh	r3, [r1, #12]
 8009996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009998:	079d      	lsls	r5, r3, #30
 800999a:	4606      	mov	r6, r0
 800999c:	460c      	mov	r4, r1
 800999e:	d507      	bpl.n	80099b0 <__smakebuf_r+0x1c>
 80099a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	2301      	movs	r3, #1
 80099aa:	6163      	str	r3, [r4, #20]
 80099ac:	b002      	add	sp, #8
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	ab01      	add	r3, sp, #4
 80099b2:	466a      	mov	r2, sp
 80099b4:	f7ff ffc8 	bl	8009948 <__swhatbuf_r>
 80099b8:	9900      	ldr	r1, [sp, #0]
 80099ba:	4605      	mov	r5, r0
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fa57 	bl	8008e70 <_malloc_r>
 80099c2:	b948      	cbnz	r0, 80099d8 <__smakebuf_r+0x44>
 80099c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c8:	059a      	lsls	r2, r3, #22
 80099ca:	d4ef      	bmi.n	80099ac <__smakebuf_r+0x18>
 80099cc:	f023 0303 	bic.w	r3, r3, #3
 80099d0:	f043 0302 	orr.w	r3, r3, #2
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	e7e3      	b.n	80099a0 <__smakebuf_r+0xc>
 80099d8:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <__smakebuf_r+0x7c>)
 80099da:	62b3      	str	r3, [r6, #40]	; 0x28
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	6020      	str	r0, [r4, #0]
 80099e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	9b00      	ldr	r3, [sp, #0]
 80099e8:	6163      	str	r3, [r4, #20]
 80099ea:	9b01      	ldr	r3, [sp, #4]
 80099ec:	6120      	str	r0, [r4, #16]
 80099ee:	b15b      	cbz	r3, 8009a08 <__smakebuf_r+0x74>
 80099f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f889 	bl	8009b0c <_isatty_r>
 80099fa:	b128      	cbz	r0, 8009a08 <__smakebuf_r+0x74>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f023 0303 	bic.w	r3, r3, #3
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	89a0      	ldrh	r0, [r4, #12]
 8009a0a:	4305      	orrs	r5, r0
 8009a0c:	81a5      	strh	r5, [r4, #12]
 8009a0e:	e7cd      	b.n	80099ac <__smakebuf_r+0x18>
 8009a10:	08008c89 	.word	0x08008c89

08009a14 <__malloc_lock>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__malloc_lock+0x8>)
 8009a16:	f7ff ba09 	b.w	8008e2c <__retarget_lock_acquire_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	24000398 	.word	0x24000398

08009a20 <__malloc_unlock>:
 8009a20:	4801      	ldr	r0, [pc, #4]	; (8009a28 <__malloc_unlock+0x8>)
 8009a22:	f7ff ba04 	b.w	8008e2e <__retarget_lock_release_recursive>
 8009a26:	bf00      	nop
 8009a28:	24000398 	.word	0x24000398

08009a2c <_free_r>:
 8009a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a2e:	2900      	cmp	r1, #0
 8009a30:	d044      	beq.n	8009abc <_free_r+0x90>
 8009a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a36:	9001      	str	r0, [sp, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a3e:	bfb8      	it	lt
 8009a40:	18e4      	addlt	r4, r4, r3
 8009a42:	f7ff ffe7 	bl	8009a14 <__malloc_lock>
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <_free_r+0x94>)
 8009a48:	9801      	ldr	r0, [sp, #4]
 8009a4a:	6813      	ldr	r3, [r2, #0]
 8009a4c:	b933      	cbnz	r3, 8009a5c <_free_r+0x30>
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	6014      	str	r4, [r2, #0]
 8009a52:	b003      	add	sp, #12
 8009a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a58:	f7ff bfe2 	b.w	8009a20 <__malloc_unlock>
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d908      	bls.n	8009a72 <_free_r+0x46>
 8009a60:	6825      	ldr	r5, [r4, #0]
 8009a62:	1961      	adds	r1, r4, r5
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf01      	itttt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	1949      	addeq	r1, r1, r5
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	e7ed      	b.n	8009a4e <_free_r+0x22>
 8009a72:	461a      	mov	r2, r3
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	b10b      	cbz	r3, 8009a7c <_free_r+0x50>
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	d9fa      	bls.n	8009a72 <_free_r+0x46>
 8009a7c:	6811      	ldr	r1, [r2, #0]
 8009a7e:	1855      	adds	r5, r2, r1
 8009a80:	42a5      	cmp	r5, r4
 8009a82:	d10b      	bne.n	8009a9c <_free_r+0x70>
 8009a84:	6824      	ldr	r4, [r4, #0]
 8009a86:	4421      	add	r1, r4
 8009a88:	1854      	adds	r4, r2, r1
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	6011      	str	r1, [r2, #0]
 8009a8e:	d1e0      	bne.n	8009a52 <_free_r+0x26>
 8009a90:	681c      	ldr	r4, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	6053      	str	r3, [r2, #4]
 8009a96:	4421      	add	r1, r4
 8009a98:	6011      	str	r1, [r2, #0]
 8009a9a:	e7da      	b.n	8009a52 <_free_r+0x26>
 8009a9c:	d902      	bls.n	8009aa4 <_free_r+0x78>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	e7d6      	b.n	8009a52 <_free_r+0x26>
 8009aa4:	6825      	ldr	r5, [r4, #0]
 8009aa6:	1961      	adds	r1, r4, r5
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	bf04      	itt	eq
 8009aac:	6819      	ldreq	r1, [r3, #0]
 8009aae:	685b      	ldreq	r3, [r3, #4]
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	bf04      	itt	eq
 8009ab4:	1949      	addeq	r1, r1, r5
 8009ab6:	6021      	streq	r1, [r4, #0]
 8009ab8:	6054      	str	r4, [r2, #4]
 8009aba:	e7ca      	b.n	8009a52 <_free_r+0x26>
 8009abc:	b003      	add	sp, #12
 8009abe:	bd30      	pop	{r4, r5, pc}
 8009ac0:	2400039c 	.word	0x2400039c

08009ac4 <_read_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d07      	ldr	r5, [pc, #28]	; (8009ae4 <_read_r+0x20>)
 8009ac8:	4604      	mov	r4, r0
 8009aca:	4608      	mov	r0, r1
 8009acc:	4611      	mov	r1, r2
 8009ace:	2200      	movs	r2, #0
 8009ad0:	602a      	str	r2, [r5, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f7fe ff24 	bl	8008920 <_read>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_read_r+0x1e>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_read_r+0x1e>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	240003a4 	.word	0x240003a4

08009ae8 <_fstat_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d07      	ldr	r5, [pc, #28]	; (8009b08 <_fstat_r+0x20>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	4611      	mov	r1, r2
 8009af4:	602b      	str	r3, [r5, #0]
 8009af6:	f7fe ff58 	bl	80089aa <_fstat>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	d102      	bne.n	8009b04 <_fstat_r+0x1c>
 8009afe:	682b      	ldr	r3, [r5, #0]
 8009b00:	b103      	cbz	r3, 8009b04 <_fstat_r+0x1c>
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	bf00      	nop
 8009b08:	240003a4 	.word	0x240003a4

08009b0c <_isatty_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d06      	ldr	r5, [pc, #24]	; (8009b28 <_isatty_r+0x1c>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	602b      	str	r3, [r5, #0]
 8009b18:	f7fe ff57 	bl	80089ca <_isatty>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_isatty_r+0x1a>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_isatty_r+0x1a>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	240003a4 	.word	0x240003a4

08009b2c <_init>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	bf00      	nop
 8009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b32:	bc08      	pop	{r3}
 8009b34:	469e      	mov	lr, r3
 8009b36:	4770      	bx	lr

08009b38 <_fini>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	bf00      	nop
 8009b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3e:	bc08      	pop	{r3}
 8009b40:	469e      	mov	lr, r3
 8009b42:	4770      	bx	lr
