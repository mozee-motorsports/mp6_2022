
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089dc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08008cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  24000010  08008d00  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000208  08008d00  00020208  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b90e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029c7  00000000  00000000  0003b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015e0  00000000  00000000  0003e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014f8  00000000  00000000  0003f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000352e9  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ab7d  00000000  00000000  000760d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164e96  00000000  00000000  00090c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f5aec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006000  00000000  00000000  001f5b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008c90 	.word	0x08008c90

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08008c90 	.word	0x08008c90

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000616:	2003      	movs	r0, #3
 8000618:	f001 fcd2 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800061c:	f002 fca8 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8000620:	4602      	mov	r2, r0
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_Init+0x68>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	4913      	ldr	r1, [pc, #76]	; (800067c <HAL_Init+0x6c>)
 800062e:	5ccb      	ldrb	r3, [r1, r3]
 8000630:	f003 031f 	and.w	r3, r3, #31
 8000634:	fa22 f303 	lsr.w	r3, r2, r3
 8000638:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_Init+0x68>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_Init+0x6c>)
 8000644:	5cd3      	ldrb	r3, [r2, r3]
 8000646:	f003 031f 	and.w	r3, r3, #31
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	fa22 f303 	lsr.w	r3, r2, r3
 8000650:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_Init+0x70>)
 8000652:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <HAL_Init+0x74>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f814 	bl	8000688 <HAL_InitTick>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e002      	b.n	8000670 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800066a:	f008 f83d 	bl	80086e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	58024400 	.word	0x58024400
 800067c:	08008cd0 	.word	0x08008cd0
 8000680:	2400000c 	.word	0x2400000c
 8000684:	24000008 	.word	0x24000008

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_InitTick+0x60>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000698:	2301      	movs	r3, #1
 800069a:	e021      	b.n	80006e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <HAL_InitTick+0x64>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_InitTick+0x60>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fca9 	bl	800200a <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f001 fc81 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <HAL_InitTick+0x68>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	24000004 	.word	0x24000004
 80006ec:	24000008 	.word	0x24000008
 80006f0:	24000000 	.word	0x24000000

080006f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_IncTick+0x20>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x24>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_IncTick+0x24>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	24000004 	.word	0x24000004
 8000718:	2400002c 	.word	0x2400002c

0800071c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return uwTick;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_GetTick+0x14>)
 8000722:	681b      	ldr	r3, [r3, #0]
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	2400002c 	.word	0x2400002c

08000734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800073c:	f7ff ffee 	bl	800071c <HAL_GetTick>
 8000740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074c:	d005      	beq.n	800075a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_Delay+0x44>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4413      	add	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075a:	bf00      	nop
 800075c:	f7ff ffde 	bl	800071c <HAL_GetTick>
 8000760:	4602      	mov	r2, r0
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8f7      	bhi.n	800075c <HAL_Delay+0x28>
  {
  }
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	24000004 	.word	0x24000004

0800077c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	609a      	str	r2, [r3, #8]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	431a      	orrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	609a      	str	r2, [r3, #8]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3360      	adds	r3, #96	; 0x60
 80007f6:	461a      	mov	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <LL_ADC_SetOffset+0x60>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d10b      	bne.n	8000820 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4313      	orrs	r3, r2
 8000816:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800081e:	e00b      	b.n	8000838 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	430b      	orrs	r3, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	371c      	adds	r7, #28
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58026000 	.word	0x58026000

08000848 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3360      	adds	r3, #96	; 0x60
 8000856:	461a      	mov	r2, r3
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	f003 031f 	and.w	r3, r3, #31
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	431a      	orrs	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	611a      	str	r2, [r3, #16]
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d00e      	beq.n	80008da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3360      	adds	r3, #96	; 0x60
 80008c0:	461a      	mov	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	431a      	orrs	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	601a      	str	r2, [r3, #0]
  }
}
 80008da:	bf00      	nop
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	58026000 	.word	0x58026000

080008ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <LL_ADC_SetOffsetSaturation+0x40>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d10e      	bne.n	800091e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3360      	adds	r3, #96	; 0x60
 8000904:	461a      	mov	r2, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	431a      	orrs	r2, r3
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800091e:	bf00      	nop
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	58026000 	.word	0x58026000

08000930 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <LL_ADC_SetOffsetSign+0x40>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d10e      	bne.n	8000962 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3360      	adds	r3, #96	; 0x60
 8000948:	461a      	mov	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	431a      	orrs	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8000962:	bf00      	nop
 8000964:	371c      	adds	r7, #28
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	58026000 	.word	0x58026000

08000974 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3360      	adds	r3, #96	; 0x60
 8000984:	461a      	mov	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <LL_ADC_SetOffsetState+0x50>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d108      	bne.n	80009a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80009a6:	e007      	b.n	80009b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	431a      	orrs	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	58026000 	.word	0x58026000

080009c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3330      	adds	r3, #48	; 0x30
 80009d8:	461a      	mov	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	f003 030c 	and.w	r3, r3, #12
 80009e4:	4413      	add	r3, r2
 80009e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	211f      	movs	r1, #31
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	401a      	ands	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	0e9b      	lsrs	r3, r3, #26
 8000a00:	f003 011f 	and.w	r1, r3, #31
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a14:	bf00      	nop
 8000a16:	371c      	adds	r7, #28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3314      	adds	r3, #20
 8000a30:	461a      	mov	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	0e5b      	lsrs	r3, r3, #25
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	4413      	add	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	0d1b      	lsrs	r3, r3, #20
 8000a48:	f003 031f 	and.w	r3, r3, #31
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	401a      	ands	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	0d1b      	lsrs	r3, r3, #20
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a6a:	bf00      	nop
 8000a6c:	371c      	adds	r7, #28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d115      	bne.n	8000ab8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0318 	and.w	r3, r3, #24
 8000aa2:	4914      	ldr	r1, [pc, #80]	; (8000af4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8000aa4:	40d9      	lsrs	r1, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000ab6:	e014      	b.n	8000ae2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0318 	and.w	r3, r3, #24
 8000ace:	4909      	ldr	r1, [pc, #36]	; (8000af4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8000ad0:	40d9      	lsrs	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ada:	431a      	orrs	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	58026000 	.word	0x58026000
 8000af4:	000fffff 	.word	0x000fffff

08000af8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6093      	str	r3, [r2, #8]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	5fffffc0 	.word	0x5fffffc0

08000b1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b30:	d101      	bne.n	8000b36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <LL_ADC_EnableInternalRegulator+0x24>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	6fffffc0 	.word	0x6fffffc0

08000b6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b80:	d101      	bne.n	8000b86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d101      	bne.n	8000bac <LL_ADC_IsEnabled+0x18>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <LL_ADC_IsEnabled+0x1a>
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d101      	bne.n	8000bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d101      	bne.n	8000bf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1ee      	b.n	8001000 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f007 fd73 	bl	800871c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff67 	bl	8000b1c <LL_ADC_IsDeepPowerDownEnabled>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff4d 	bl	8000af8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff82 	bl	8000b6c <LL_ADC_IsInternalRegulatorEnabled>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d114      	bne.n	8000c98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff66 	bl	8000b44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c78:	4b8e      	ldr	r3, [pc, #568]	; (8000eb4 <HAL_ADC_Init+0x2ac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	099b      	lsrs	r3, r3, #6
 8000c7e:	4a8e      	ldr	r2, [pc, #568]	; (8000eb8 <HAL_ADC_Init+0x2b0>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	099b      	lsrs	r3, r3, #6
 8000c86:	3301      	adds	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c8a:	e002      	b.n	8000c92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1f9      	bne.n	8000c8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff65 	bl	8000b6c <LL_ADC_IsInternalRegulatorEnabled>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10d      	bne.n	8000cc4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cac:	f043 0210 	orr.w	r2, r3, #16
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cb8:	f043 0201 	orr.w	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff76 	bl	8000bba <LL_ADC_REG_IsConversionOngoing>
 8000cce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f040 8188 	bne.w	8000fee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 8184 	bne.w	8000fee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cee:	f043 0202 	orr.w	r2, r3, #2
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff4a 	bl	8000b94 <LL_ADC_IsEnabled>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d136      	bne.n	8000d74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a6c      	ldr	r2, [pc, #432]	; (8000ebc <HAL_ADC_Init+0x2b4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d004      	beq.n	8000d1a <HAL_ADC_Init+0x112>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a6a      	ldr	r2, [pc, #424]	; (8000ec0 <HAL_ADC_Init+0x2b8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d10e      	bne.n	8000d38 <HAL_ADC_Init+0x130>
 8000d1a:	4868      	ldr	r0, [pc, #416]	; (8000ebc <HAL_ADC_Init+0x2b4>)
 8000d1c:	f7ff ff3a 	bl	8000b94 <LL_ADC_IsEnabled>
 8000d20:	4604      	mov	r4, r0
 8000d22:	4867      	ldr	r0, [pc, #412]	; (8000ec0 <HAL_ADC_Init+0x2b8>)
 8000d24:	f7ff ff36 	bl	8000b94 <LL_ADC_IsEnabled>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4323      	orrs	r3, r4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	e008      	b.n	8000d4a <HAL_ADC_Init+0x142>
 8000d38:	4862      	ldr	r0, [pc, #392]	; (8000ec4 <HAL_ADC_Init+0x2bc>)
 8000d3a:	f7ff ff2b 	bl	8000b94 <LL_ADC_IsEnabled>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d012      	beq.n	8000d74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <HAL_ADC_Init+0x2b4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d004      	beq.n	8000d62 <HAL_ADC_Init+0x15a>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a58      	ldr	r2, [pc, #352]	; (8000ec0 <HAL_ADC_Init+0x2b8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_ADC_Init+0x15e>
 8000d62:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <HAL_ADC_Init+0x2c0>)
 8000d64:	e000      	b.n	8000d68 <HAL_ADC_Init+0x160>
 8000d66:	4a59      	ldr	r2, [pc, #356]	; (8000ecc <HAL_ADC_Init+0x2c4>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4610      	mov	r0, r2
 8000d70:	f7ff fd04 	bl	800077c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <HAL_ADC_Init+0x2bc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d129      	bne.n	8000dd2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7e5b      	ldrb	r3, [r3, #25]
 8000d82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8000d88:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8000d8e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d013      	beq.n	8000dc0 <HAL_ADC_Init+0x1b8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b0c      	cmp	r3, #12
 8000d9e:	d00d      	beq.n	8000dbc <HAL_ADC_Init+0x1b4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b1c      	cmp	r3, #28
 8000da6:	d007      	beq.n	8000db8 <HAL_ADC_Init+0x1b0>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b18      	cmp	r3, #24
 8000dae:	d101      	bne.n	8000db4 <HAL_ADC_Init+0x1ac>
 8000db0:	2318      	movs	r3, #24
 8000db2:	e006      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000db4:	2300      	movs	r3, #0
 8000db6:	e004      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000db8:	2310      	movs	r3, #16
 8000dba:	e002      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	e000      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000dc0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8000dc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	e00e      	b.n	8000df0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e5b      	ldrb	r3, [r3, #25]
 8000dd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ddc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000de2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d106      	bne.n	8000e08 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	045b      	lsls	r3, r3, #17
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <HAL_ADC_Init+0x2bc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d115      	bne.n	8000e5a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_ADC_Init+0x2c8>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	611a      	str	r2, [r3, #16]
 8000e58:	e009      	b.n	8000e6e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_ADC_Init+0x2cc>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	69b9      	ldr	r1, [r7, #24]
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fea1 	bl	8000bba <LL_ADC_REG_IsConversionOngoing>
 8000e78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff feae 	bl	8000be0 <LL_ADC_INJ_IsConversionOngoing>
 8000e84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f040 808e 	bne.w	8000faa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 808a 	bne.w	8000faa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_ADC_Init+0x2bc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d11b      	bne.n	8000ed8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7e1b      	ldrb	r3, [r3, #24]
 8000ea4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000eac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	e018      	b.n	8000ee6 <HAL_ADC_Init+0x2de>
 8000eb4:	24000008 	.word	0x24000008
 8000eb8:	053e2d63 	.word	0x053e2d63
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	40022100 	.word	0x40022100
 8000ec4:	58026000 	.word	0x58026000
 8000ec8:	40022300 	.word	0x40022300
 8000ecc:	58026300 	.word	0x58026300
 8000ed0:	fff04007 	.word	0xfff04007
 8000ed4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e1b      	ldrb	r3, [r3, #24]
 8000edc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <HAL_ADC_Init+0x400>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	69b9      	ldr	r1, [r7, #24]
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d137      	bne.n	8000f74 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <HAL_ADC_Init+0x404>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d116      	bne.n	8000f42 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <HAL_ADC_Init+0x408>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f26:	4311      	orrs	r1, r2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f2c:	4311      	orrs	r1, r2
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000f32:	430a      	orrs	r2, r1
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	e020      	b.n	8000f84 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_ADC_Init+0x40c>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000f50:	3a01      	subs	r2, #1
 8000f52:	0411      	lsls	r1, r2, #16
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f58:	4311      	orrs	r1, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f5e:	4311      	orrs	r1, r2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000f64:	430a      	orrs	r2, r1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	e007      	b.n	8000f84 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1b      	ldr	r2, [pc, #108]	; (800100c <HAL_ADC_Init+0x404>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d002      	beq.n	8000faa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fd63 	bl	8001a70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10c      	bne.n	8000fcc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f023 010f 	bic.w	r1, r3, #15
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fca:	e007      	b.n	8000fdc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 020f 	bic.w	r2, r2, #15
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	f023 0303 	bic.w	r3, r3, #3
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	661a      	str	r2, [r3, #96]	; 0x60
 8000fec:	e007      	b.n	8000ffe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3724      	adds	r7, #36	; 0x24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	ffffbffc 	.word	0xffffbffc
 800100c:	58026000 	.word	0x58026000
 8001010:	fc00f81f 	.word	0xfc00f81f
 8001014:	fc00f81e 	.word	0xfc00f81e

08001018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b0b9      	sub	sp, #228	; 0xe4
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001032:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4aa9      	ldr	r2, [pc, #676]	; (80012e0 <HAL_ADC_ConfigChannel+0x2c8>)
 800103a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <HAL_ADC_ConfigChannel+0x34>
 8001046:	2302      	movs	r3, #2
 8001048:	f000 bcfa 	b.w	8001a40 <HAL_ADC_ConfigChannel+0xa28>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fdae 	bl	8000bba <LL_ADC_REG_IsConversionOngoing>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	f040 84de 	bne.w	8001a22 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a9e      	ldr	r2, [pc, #632]	; (80012e4 <HAL_ADC_ConfigChannel+0x2cc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d033      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <HAL_ADC_ConfigChannel+0x76>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0e9b      	lsrs	r3, r3, #26
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	2201      	movs	r2, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	e01d      	b.n	80010ca <HAL_ADC_ConfigChannel+0xb2>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80010b2:	2320      	movs	r3, #32
 80010b4:	e004      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80010b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	2201      	movs	r2, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	69d1      	ldr	r1, [r2, #28]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6859      	ldr	r1, [r3, #4]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f7ff fc6f 	bl	80009c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd63 	bl	8000bba <LL_ADC_REG_IsConversionOngoing>
 80010f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd6f 	bl	8000be0 <LL_ADC_INJ_IsConversionOngoing>
 8001102:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8270 	bne.w	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 826b 	bne.w	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	461a      	mov	r2, r3
 8001128:	f7ff fc7a 	bl	8000a20 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6c      	ldr	r2, [pc, #432]	; (80012e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10d      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001150:	e032      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_ADC_ConfigChannel+0x2d0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800115a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x160>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	e01d      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x19c>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <HAL_ADC_ConfigChannel+0x186>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	e00a      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x19c>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d048      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6919      	ldr	r1, [r3, #16]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011d0:	f7ff fb08 	bl	80007e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_ADC_ConfigChannel+0x2cc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d119      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6919      	ldr	r1, [r3, #16]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f7ff fba0 	bl	8000930 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6919      	ldr	r1, [r3, #16]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x1f0>
 8001202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001206:	e000      	b.n	800120a <HAL_ADC_ConfigChannel+0x1f2>
 8001208:	2300      	movs	r3, #0
 800120a:	461a      	mov	r2, r3
 800120c:	f7ff fb6e 	bl	80008ec <LL_ADC_SetOffsetSaturation>
 8001210:	e1ee      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6919      	ldr	r1, [r3, #16]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001220:	2b01      	cmp	r3, #1
 8001222:	d102      	bne.n	800122a <HAL_ADC_ConfigChannel+0x212>
 8001224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001228:	e000      	b.n	800122c <HAL_ADC_ConfigChannel+0x214>
 800122a:	2300      	movs	r3, #0
 800122c:	461a      	mov	r2, r3
 800122e:	f7ff fb3b 	bl	80008a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6919      	ldr	r1, [r3, #16]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	7e1b      	ldrb	r3, [r3, #24]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x230>
 8001242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001246:	e000      	b.n	800124a <HAL_ADC_ConfigChannel+0x232>
 8001248:	2300      	movs	r3, #0
 800124a:	461a      	mov	r2, r3
 800124c:	f7ff fb12 	bl	8000874 <LL_ADC_SetDataRightShift>
 8001250:	e1ce      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	f040 8181 	bne.w	8001560 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff faef 	bl	8000848 <LL_ADC_GetOffsetChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10a      	bne.n	800128a <HAL_ADC_ConfigChannel+0x272>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fae4 	bl	8000848 <LL_ADC_GetOffsetChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	0e9b      	lsrs	r3, r3, #26
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	e01e      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x2b0>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fad9 	bl	8000848 <LL_ADC_GetOffsetChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80012a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80012b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80012b8:	2320      	movs	r3, #32
 80012ba:	e004      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80012bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10b      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x2d4>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0e9b      	lsrs	r3, r3, #26
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	e01e      	b.n	800131e <HAL_ADC_ConfigChannel+0x306>
 80012e0:	47ff0000 	.word	0x47ff0000
 80012e4:	58026000 	.word	0x58026000
 80012e8:	5c001000 	.word	0x5c001000
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8001310:	2320      	movs	r3, #32
 8001312:	e004      	b.n	800131e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8001314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	429a      	cmp	r2, r3
 8001320:	d106      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb22 	bl	8000974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fa86 	bl	8000848 <LL_ADC_GetOffsetChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <HAL_ADC_ConfigChannel+0x344>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fa7b 	bl	8000848 <LL_ADC_GetOffsetChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	0e9b      	lsrs	r3, r3, #26
 8001356:	f003 021f 	and.w	r2, r3, #31
 800135a:	e01e      	b.n	800139a <HAL_ADC_ConfigChannel+0x382>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fa70 	bl	8000848 <LL_ADC_GetOffsetChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800137a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800137e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800138a:	2320      	movs	r3, #32
 800138c:	e004      	b.n	8001398 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800138e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x39a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0e9b      	lsrs	r3, r3, #26
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	e018      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x3cc>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80013c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80013ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80013d6:	2320      	movs	r3, #32
 80013d8:	e004      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80013da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d106      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fabf 	bl	8000974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2102      	movs	r1, #2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fa23 	bl	8000848 <LL_ADC_GetOffsetChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10a      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x40a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2102      	movs	r1, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fa18 	bl	8000848 <LL_ADC_GetOffsetChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	0e9b      	lsrs	r3, r3, #26
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	e01e      	b.n	8001460 <HAL_ADC_ConfigChannel+0x448>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2102      	movs	r1, #2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fa0d 	bl	8000848 <LL_ADC_GetOffsetChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8001450:	2320      	movs	r3, #32
 8001452:	e004      	b.n	800145e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8001454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x460>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0e9b      	lsrs	r3, r3, #26
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	e014      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x48a>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800148c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8001494:	2320      	movs	r3, #32
 8001496:	e004      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8001498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d106      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fa60 	bl	8000974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2103      	movs	r1, #3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f9c4 	bl	8000848 <LL_ADC_GetOffsetChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x4c8>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2103      	movs	r1, #3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f9b9 	bl	8000848 <LL_ADC_GetOffsetChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	0e9b      	lsrs	r3, r3, #26
 80014da:	f003 021f 	and.w	r2, r3, #31
 80014de:	e017      	b.n	8001510 <HAL_ADC_ConfigChannel+0x4f8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2103      	movs	r1, #3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f9ae 	bl	8000848 <LL_ADC_GetOffsetChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80014f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80014fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001502:	2320      	movs	r3, #32
 8001504:	e003      	b.n	800150e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x510>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0e9b      	lsrs	r3, r3, #26
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	e011      	b.n	800154c <HAL_ADC_ConfigChannel+0x534>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001538:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800153a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8001540:	2320      	movs	r3, #32
 8001542:	e003      	b.n	800154c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8001544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	429a      	cmp	r2, r3
 800154e:	d14f      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2200      	movs	r2, #0
 8001556:	2103      	movs	r1, #3
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fa0b 	bl	8000974 <LL_ADC_SetOffsetState>
 800155e:	e047      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	069b      	lsls	r3, r3, #26
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001582:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800158a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	069b      	lsls	r3, r3, #26
 8001594:	429a      	cmp	r2, r3
 8001596:	d107      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	069b      	lsls	r3, r3, #26
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	069b      	lsls	r3, r3, #26
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff facd 	bl	8000b94 <LL_ADC_IsEnabled>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 8219 	bne.w	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	461a      	mov	r2, r3
 8001610:	f7ff fa32 	bl	8000a78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4aa1      	ldr	r2, [pc, #644]	; (80018a0 <HAL_ADC_ConfigChannel+0x888>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 812e 	bne.w	800187c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10b      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x630>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0e9b      	lsrs	r3, r3, #26
 8001636:	3301      	adds	r3, #1
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2b09      	cmp	r3, #9
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	e019      	b.n	800167c <HAL_ADC_ConfigChannel+0x664>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001658:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800165a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8001660:	2320      	movs	r3, #32
 8001662:	e003      	b.n	800166c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8001664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b09      	cmp	r3, #9
 8001674:	bf94      	ite	ls
 8001676:	2301      	movls	r3, #1
 8001678:	2300      	movhi	r3, #0
 800167a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800167c:	2b00      	cmp	r3, #0
 800167e:	d079      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_ADC_ConfigChannel+0x684>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0e9b      	lsrs	r3, r3, #26
 8001692:	3301      	adds	r3, #1
 8001694:	069b      	lsls	r3, r3, #26
 8001696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800169a:	e015      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x6b0>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80016aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80016ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80016b4:	2320      	movs	r3, #32
 80016b6:	e003      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80016b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	069b      	lsls	r3, r3, #26
 80016c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x6d0>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0e9b      	lsrs	r3, r3, #26
 80016da:	3301      	adds	r3, #1
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	e017      	b.n	8001718 <HAL_ADC_ConfigChannel+0x700>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80016f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80016fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8001700:	2320      	movs	r3, #32
 8001702:	e003      	b.n	800170c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8001704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	ea42 0103 	orr.w	r1, r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10a      	bne.n	800173e <HAL_ADC_ConfigChannel+0x726>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0e9b      	lsrs	r3, r3, #26
 800172e:	3301      	adds	r3, #1
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	051b      	lsls	r3, r3, #20
 800173c:	e018      	b.n	8001770 <HAL_ADC_ConfigChannel+0x758>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8001756:	2320      	movs	r3, #32
 8001758:	e003      	b.n	8001762 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	3301      	adds	r3, #1
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001770:	430b      	orrs	r3, r1
 8001772:	e07e      	b.n	8001872 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x778>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0e9b      	lsrs	r3, r3, #26
 8001786:	3301      	adds	r3, #1
 8001788:	069b      	lsls	r3, r3, #26
 800178a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800178e:	e015      	b.n	80017bc <HAL_ADC_ConfigChannel+0x7a4>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80017a8:	2320      	movs	r3, #32
 80017aa:	e003      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80017ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	069b      	lsls	r3, r3, #26
 80017b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x7c4>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0e9b      	lsrs	r3, r3, #26
 80017ce:	3301      	adds	r3, #1
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	e017      	b.n	800180c <HAL_ADC_ConfigChannel+0x7f4>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	61bb      	str	r3, [r7, #24]
  return result;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80017f4:	2320      	movs	r3, #32
 80017f6:	e003      	b.n	8001800 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	ea42 0103 	orr.w	r1, r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x820>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0e9b      	lsrs	r3, r3, #26
 8001822:	3301      	adds	r3, #1
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	3b1e      	subs	r3, #30
 8001830:	051b      	lsls	r3, r3, #20
 8001832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001836:	e01b      	b.n	8001870 <HAL_ADC_ConfigChannel+0x858>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	60fb      	str	r3, [r7, #12]
  return result;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8001850:	2320      	movs	r3, #32
 8001852:	e003      	b.n	800185c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3301      	adds	r3, #1
 800185e:	f003 021f 	and.w	r2, r3, #31
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	3b1e      	subs	r3, #30
 800186a:	051b      	lsls	r3, r3, #20
 800186c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001870:	430b      	orrs	r3, r1
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	6892      	ldr	r2, [r2, #8]
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f8d2 	bl	8000a20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f280 80d7 	bge.w	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_ADC_ConfigChannel+0x88c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d004      	beq.n	800189a <HAL_ADC_ConfigChannel+0x882>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_ADC_ConfigChannel+0x890>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10a      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x898>
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_ADC_ConfigChannel+0x894>)
 800189c:	e009      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x89a>
 800189e:	bf00      	nop
 80018a0:	47ff0000 	.word	0x47ff0000
 80018a4:	40022000 	.word	0x40022000
 80018a8:	40022100 	.word	0x40022100
 80018ac:	40022300 	.word	0x40022300
 80018b0:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <HAL_ADC_ConfigChannel+0xa30>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ff88 	bl	80007c8 <LL_ADC_GetCommonPathInternalCh>
 80018b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a62      	ldr	r2, [pc, #392]	; (8001a4c <HAL_ADC_ConfigChannel+0xa34>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d004      	beq.n	80018d0 <HAL_ADC_ConfigChannel+0x8b8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a61      	ldr	r2, [pc, #388]	; (8001a50 <HAL_ADC_ConfigChannel+0xa38>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d10e      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x8d6>
 80018d0:	485e      	ldr	r0, [pc, #376]	; (8001a4c <HAL_ADC_ConfigChannel+0xa34>)
 80018d2:	f7ff f95f 	bl	8000b94 <LL_ADC_IsEnabled>
 80018d6:	4604      	mov	r4, r0
 80018d8:	485d      	ldr	r0, [pc, #372]	; (8001a50 <HAL_ADC_ConfigChannel+0xa38>)
 80018da:	f7ff f95b 	bl	8000b94 <LL_ADC_IsEnabled>
 80018de:	4603      	mov	r3, r0
 80018e0:	4323      	orrs	r3, r4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	e008      	b.n	8001900 <HAL_ADC_ConfigChannel+0x8e8>
 80018ee:	4859      	ldr	r0, [pc, #356]	; (8001a54 <HAL_ADC_ConfigChannel+0xa3c>)
 80018f0:	f7ff f950 	bl	8000b94 <LL_ADC_IsEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8084 	beq.w	8001a0e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a53      	ldr	r2, [pc, #332]	; (8001a58 <HAL_ADC_ConfigChannel+0xa40>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d132      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x95e>
 8001910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12c      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_ADC_ConfigChannel+0xa3c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	f040 8086 	bne.w	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <HAL_ADC_ConfigChannel+0xa34>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_ADC_ConfigChannel+0x924>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_ADC_ConfigChannel+0xa38>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x928>
 800193c:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <HAL_ADC_ConfigChannel+0xa44>)
 800193e:	e000      	b.n	8001942 <HAL_ADC_ConfigChannel+0x92a>
 8001940:	4a41      	ldr	r2, [pc, #260]	; (8001a48 <HAL_ADC_ConfigChannel+0xa30>)
 8001942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7fe ff28 	bl	80007a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_ADC_ConfigChannel+0xa48>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <HAL_ADC_ConfigChannel+0xa4c>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	3301      	adds	r3, #1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001966:	e002      	b.n	800196e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3b01      	subs	r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f9      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001974:	e05e      	b.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_ADC_ConfigChannel+0xa50>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d120      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x9aa>
 8001980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d11a      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_ADC_ConfigChannel+0xa3c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d14e      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_ADC_ConfigChannel+0xa34>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d004      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x992>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_ADC_ConfigChannel+0xa38>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x996>
 80019aa:	4a2c      	ldr	r2, [pc, #176]	; (8001a5c <HAL_ADC_ConfigChannel+0xa44>)
 80019ac:	e000      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x998>
 80019ae:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_ADC_ConfigChannel+0xa30>)
 80019b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7fe fef1 	bl	80007a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019c0:	e038      	b.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a29      	ldr	r2, [pc, #164]	; (8001a6c <HAL_ADC_ConfigChannel+0xa54>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d133      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
 80019cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d12d      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_ADC_ConfigChannel+0xa3c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d128      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_ADC_ConfigChannel+0xa34>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x9de>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_ADC_ConfigChannel+0xa38>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x9e2>
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_ADC_ConfigChannel+0xa44>)
 80019f8:	e000      	b.n	80019fc <HAL_ADC_ConfigChannel+0x9e4>
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <HAL_ADC_ConfigChannel+0xa30>)
 80019fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f7fe fecb 	bl	80007a2 <LL_ADC_SetCommonPathInternalCh>
 8001a0c:	e012      	b.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a12:	f043 0220 	orr.w	r2, r3, #32
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001a20:	e008      	b.n	8001a34 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	f043 0220 	orr.w	r2, r3, #32
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	37e4      	adds	r7, #228	; 0xe4
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}
 8001a48:	58026300 	.word	0x58026300
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40022100 	.word	0x40022100
 8001a54:	58026000 	.word	0x58026000
 8001a58:	c7520000 	.word	0xc7520000
 8001a5c:	40022300 	.word	0x40022300
 8001a60:	24000008 	.word	0x24000008
 8001a64:	053e2d63 	.word	0x053e2d63
 8001a68:	c3210000 	.word	0xc3210000
 8001a6c:	cb840000 	.word	0xcb840000

08001a70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6c      	ldr	r2, [pc, #432]	; (8001c30 <ADC_ConfigureBoostMode+0x1c0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <ADC_ConfigureBoostMode+0x1c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6b      	ldr	r2, [pc, #428]	; (8001c34 <ADC_ConfigureBoostMode+0x1c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d109      	bne.n	8001aa0 <ADC_ConfigureBoostMode+0x30>
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <ADC_ConfigureBoostMode+0x1c8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e008      	b.n	8001ab2 <ADC_ConfigureBoostMode+0x42>
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <ADC_ConfigureBoostMode+0x1cc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01c      	beq.n	8001af0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001ab6:	f001 fbd5 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8001aba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ac4:	d010      	beq.n	8001ae8 <ADC_ConfigureBoostMode+0x78>
 8001ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001aca:	d873      	bhi.n	8001bb4 <ADC_ConfigureBoostMode+0x144>
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d002      	beq.n	8001ad8 <ADC_ConfigureBoostMode+0x68>
 8001ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ad6:	d16d      	bne.n	8001bb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
        break;
 8001ae6:	e068      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	60fb      	str	r3, [r7, #12]
        break;
 8001aee:	e064      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001af0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	f002 fdb0 	bl	800465c <HAL_RCCEx_GetPeriphCLKFreq>
 8001afc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001b06:	d051      	beq.n	8001bac <ADC_ConfigureBoostMode+0x13c>
 8001b08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001b0c:	d854      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001b12:	d047      	beq.n	8001ba4 <ADC_ConfigureBoostMode+0x134>
 8001b14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001b18:	d84e      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001b1e:	d03d      	beq.n	8001b9c <ADC_ConfigureBoostMode+0x12c>
 8001b20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001b24:	d848      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b2a:	d033      	beq.n	8001b94 <ADC_ConfigureBoostMode+0x124>
 8001b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b30:	d842      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001b36:	d029      	beq.n	8001b8c <ADC_ConfigureBoostMode+0x11c>
 8001b38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001b3c:	d83c      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001b42:	d01a      	beq.n	8001b7a <ADC_ConfigureBoostMode+0x10a>
 8001b44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001b48:	d836      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001b4e:	d014      	beq.n	8001b7a <ADC_ConfigureBoostMode+0x10a>
 8001b50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001b54:	d830      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5a:	d00e      	beq.n	8001b7a <ADC_ConfigureBoostMode+0x10a>
 8001b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b60:	d82a      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b66:	d008      	beq.n	8001b7a <ADC_ConfigureBoostMode+0x10a>
 8001b68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b6c:	d824      	bhi.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
 8001b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b72:	d002      	beq.n	8001b7a <ADC_ConfigureBoostMode+0x10a>
 8001b74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b78:	d11e      	bne.n	8001bb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	60fb      	str	r3, [r7, #12]
        break;
 8001b8a:	e016      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
        break;
 8001b92:	e012      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	60fb      	str	r3, [r7, #12]
        break;
 8001b9a:	e00e      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	60fb      	str	r3, [r7, #12]
        break;
 8001ba2:	e00a      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	09db      	lsrs	r3, r3, #7
 8001ba8:	60fb      	str	r3, [r7, #12]
        break;
 8001baa:	e006      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	60fb      	str	r3, [r7, #12]
        break;
 8001bb2:	e002      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
        break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001bb8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <ADC_ConfigureBoostMode+0x1d0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d808      	bhi.n	8001bda <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001bd6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001bd8:	e025      	b.n	8001c26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <ADC_ConfigureBoostMode+0x1d4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d80a      	bhi.n	8001bf8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf4:	609a      	str	r2, [r3, #8]
}
 8001bf6:	e016      	b.n	8001c26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <ADC_ConfigureBoostMode+0x1d8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d80a      	bhi.n	8001c16 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c12:	609a      	str	r2, [r3, #8]
}
 8001c14:	e007      	b.n	8001c26 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001c24:	609a      	str	r2, [r3, #8]
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022100 	.word	0x40022100
 8001c38:	40022300 	.word	0x40022300
 8001c3c:	58026300 	.word	0x58026300
 8001c40:	005f5e10 	.word	0x005f5e10
 8001c44:	00bebc20 	.word	0x00bebc20
 8001c48:	017d7840 	.word	0x017d7840

08001c4c <LL_ADC_IsEnabled>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <LL_ADC_IsEnabled+0x18>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <LL_ADC_IsEnabled+0x1a>
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_REG_IsConversionOngoing>:
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b0a3      	sub	sp, #140	; 0x8c
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e0c1      	b.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5e      	ldr	r2, [pc, #376]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001cd0:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e001      	b.n	8001cda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0a0      	b.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffb9 	bl	8001c72 <LL_ADC_REG_IsConversionOngoing>
 8001d00:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffb2 	bl	8001c72 <LL_ADC_REG_IsConversionOngoing>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 8081 	bne.w	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d17c      	bne.n	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a46      	ldr	r2, [pc, #280]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001d34:	e000      	b.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001d38:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d039      	beq.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3a      	ldr	r2, [pc, #232]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d10e      	bne.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8001d68:	4836      	ldr	r0, [pc, #216]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001d6a:	f7ff ff6f 	bl	8001c4c <LL_ADC_IsEnabled>
 8001d6e:	4604      	mov	r4, r0
 8001d70:	4835      	ldr	r0, [pc, #212]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001d72:	f7ff ff6b 	bl	8001c4c <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4323      	orrs	r3, r4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e008      	b.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8001d86:	4833      	ldr	r0, [pc, #204]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8001d88:	f7ff ff60 	bl	8001c4c <LL_ADC_IsEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d047      	beq.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	6811      	ldr	r1, [r2, #0]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001db2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001db4:	e03a      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10e      	bne.n	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8001dd6:	481b      	ldr	r0, [pc, #108]	; (8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001dd8:	f7ff ff38 	bl	8001c4c <LL_ADC_IsEnabled>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	481a      	ldr	r0, [pc, #104]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001de0:	f7ff ff34 	bl	8001c4c <LL_ADC_IsEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4323      	orrs	r3, r4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e008      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8001df6:	f7ff ff29 	bl	8001c4c <LL_ADC_IsEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e16:	e009      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001e2a:	e000      	b.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001e36:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	378c      	adds	r7, #140	; 0x8c
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40022100 	.word	0x40022100
 8001e4c:	40022300 	.word	0x40022300
 8001e50:	58026300 	.word	0x58026300
 8001e54:	58026000 	.word	0x58026000
 8001e58:	fffff0e0 	.word	0xfffff0e0

08001e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <__NVIC_SetPriorityGrouping+0x40>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x40>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	05fa0000 	.word	0x05fa0000

08001ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff47 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff5e 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff90 	bl	8001f14 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5f 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffb2 	bl	8001f7c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002032:	4b86      	ldr	r3, [pc, #536]	; (800224c <HAL_GPIO_Init+0x228>)
 8002034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002036:	e18c      	b.n	8002352 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 817e 	beq.w	800234c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_GPIO_Init+0x44>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0201 	and.w	r2, r3, #1
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d017      	beq.n	8002106 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d123      	bne.n	800215a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	69b9      	ldr	r1, [r7, #24]
 8002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80d8 	beq.w	800234c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_GPIO_Init+0x22c>)
 800219e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021a2:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <HAL_GPIO_Init+0x22c>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_GPIO_Init+0x22c>)
 80021ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_GPIO_Init+0x230>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_GPIO_Init+0x234>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d04a      	beq.n	800227c <HAL_GPIO_Init+0x258>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_GPIO_Init+0x238>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02b      	beq.n	8002246 <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_GPIO_Init+0x23c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d025      	beq.n	8002242 <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_GPIO_Init+0x240>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01f      	beq.n	800223e <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_GPIO_Init+0x244>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d019      	beq.n	800223a <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_GPIO_Init+0x248>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_GPIO_Init+0x24c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_GPIO_Init+0x250>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x20a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_GPIO_Init+0x254>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x206>
 8002226:	2309      	movs	r3, #9
 8002228:	e029      	b.n	800227e <HAL_GPIO_Init+0x25a>
 800222a:	230a      	movs	r3, #10
 800222c:	e027      	b.n	800227e <HAL_GPIO_Init+0x25a>
 800222e:	2307      	movs	r3, #7
 8002230:	e025      	b.n	800227e <HAL_GPIO_Init+0x25a>
 8002232:	2306      	movs	r3, #6
 8002234:	e023      	b.n	800227e <HAL_GPIO_Init+0x25a>
 8002236:	2305      	movs	r3, #5
 8002238:	e021      	b.n	800227e <HAL_GPIO_Init+0x25a>
 800223a:	2304      	movs	r3, #4
 800223c:	e01f      	b.n	800227e <HAL_GPIO_Init+0x25a>
 800223e:	2303      	movs	r3, #3
 8002240:	e01d      	b.n	800227e <HAL_GPIO_Init+0x25a>
 8002242:	2302      	movs	r3, #2
 8002244:	e01b      	b.n	800227e <HAL_GPIO_Init+0x25a>
 8002246:	2301      	movs	r3, #1
 8002248:	e019      	b.n	800227e <HAL_GPIO_Init+0x25a>
 800224a:	bf00      	nop
 800224c:	58000080 	.word	0x58000080
 8002250:	58024400 	.word	0x58024400
 8002254:	58000400 	.word	0x58000400
 8002258:	58020000 	.word	0x58020000
 800225c:	58020400 	.word	0x58020400
 8002260:	58020800 	.word	0x58020800
 8002264:	58020c00 	.word	0x58020c00
 8002268:	58021000 	.word	0x58021000
 800226c:	58021400 	.word	0x58021400
 8002270:	58021800 	.word	0x58021800
 8002274:	58021c00 	.word	0x58021c00
 8002278:	58022400 	.word	0x58022400
 800227c:	2300      	movs	r3, #0
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	f002 0203 	and.w	r2, r2, #3
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4093      	lsls	r3, r2
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228e:	4938      	ldr	r1, [pc, #224]	; (8002370 <HAL_GPIO_Init+0x34c>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f ae6b 	bne.w	8002038 <HAL_GPIO_Init+0x14>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	3724      	adds	r7, #36	; 0x24
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	58000400 	.word	0x58000400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	041a      	lsls	r2, r3, #16
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	400b      	ands	r3, r1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_PWREx_ConfigSupply+0x70>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00a      	beq.n	8002406 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_PWREx_ConfigSupply+0x70>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e01f      	b.n	8002442 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e01d      	b.n	8002442 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_PWREx_ConfigSupply+0x70>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	490f      	ldr	r1, [pc, #60]	; (800244c <HAL_PWREx_ConfigSupply+0x70>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4313      	orrs	r3, r2
 8002414:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002416:	f7fe f981 	bl	800071c <HAL_GetTick>
 800241a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800241c:	e009      	b.n	8002432 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800241e:	f7fe f97d 	bl	800071c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242c:	d901      	bls.n	8002432 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_PWREx_ConfigSupply+0x70>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	d1ee      	bne.n	800241e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	58024800 	.word	0x58024800

08002450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3c8      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8087 	beq.w	800257e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002470:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	2b10      	cmp	r3, #16
 8002484:	d007      	beq.n	8002496 <HAL_RCC_OscConfig+0x46>
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	2b18      	cmp	r3, #24
 800248a:	d110      	bne.n	80024ae <HAL_RCC_OscConfig+0x5e>
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d10b      	bne.n	80024ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06c      	beq.n	800257c <HAL_RCC_OscConfig+0x12c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d168      	bne.n	800257c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e3a2      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x76>
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e02e      	b.n	8002524 <HAL_RCC_OscConfig+0xd4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a70      	ldr	r2, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6e      	ldr	r3, [pc, #440]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6d      	ldr	r2, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xd4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0xbc>
 80024f2:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a67      	ldr	r2, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a64      	ldr	r2, [pc, #400]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xd4>
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a60      	ldr	r2, [pc, #384]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a5d      	ldr	r2, [pc, #372]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe f8f6 	bl	800071c <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe f8f2 	bl	800071c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e356      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xe4>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe f8e2 	bl	800071c <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe f8de 	bl	800071c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e342      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x10c>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 808c 	beq.w	80026a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258c:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002594:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_RCC_OscConfig+0x162>
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	2b18      	cmp	r3, #24
 80025a6:	d137      	bne.n	8002618 <HAL_RCC_OscConfig+0x1c8>
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d132      	bne.n	8002618 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_RCC_OscConfig+0x17a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e314      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0219 	bic.w	r2, r3, #25
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	492f      	ldr	r1, [pc, #188]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe f89e 	bl	800071c <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe f89a 	bl	800071c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e2fe      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f6:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	061b      	lsls	r3, r3, #24
 8002610:	4920      	ldr	r1, [pc, #128]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002616:	e045      	b.n	80026a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d026      	beq.n	800266e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 0219 	bic.w	r2, r3, #25
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4919      	ldr	r1, [pc, #100]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe f873 	bl	800071c <HAL_GetTick>
 8002636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7fe f86f 	bl	800071c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e2d3      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	490b      	ldr	r1, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
 800266c:	e01a      	b.n	80026a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe f84f 	bl	800071c <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe f84b 	bl	800071c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d903      	bls.n	8002698 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e2af      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
 8002694:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002698:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06a      	beq.n	8002786 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b0:	4b90      	ldr	r3, [pc, #576]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ba:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d007      	beq.n	80026d6 <HAL_RCC_OscConfig+0x286>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b18      	cmp	r3, #24
 80026ca:	d11b      	bne.n	8002704 <HAL_RCC_OscConfig+0x2b4>
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026d6:	4b87      	ldr	r3, [pc, #540]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x29e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e282      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	497d      	ldr	r1, [pc, #500]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002702:	e040      	b.n	8002786 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d023      	beq.n	8002754 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800270c:	4b79      	ldr	r3, [pc, #484]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a78      	ldr	r2, [pc, #480]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe f800 	bl	800071c <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002720:	f7fd fffc 	bl	800071c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e260      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002732:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800273e:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	4969      	ldr	r1, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
 8002752:	e018      	b.n	8002786 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002754:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800275a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fd ffdc 	bl	800071c <HAL_GetTick>
 8002764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002768:	f7fd ffd8 	bl	800071c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e23c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800277a:	4b5e      	ldr	r3, [pc, #376]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d036      	beq.n	8002800 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d019      	beq.n	80027ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279a:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fd ffb9 	bl	800071c <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fd ffb5 	bl	800071c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e219      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x35e>
 80027cc:	e018      	b.n	8002800 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80027d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d2:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fd ff9f 	bl	800071c <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e2:	f7fd ff9b 	bl	800071c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1ff      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027f4:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80027f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d036      	beq.n	800287a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d019      	beq.n	8002848 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002814:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800281a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800281e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002820:	f7fd ff7c 	bl	800071c <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002828:	f7fd ff78 	bl	800071c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1dc      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x3d8>
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a29      	ldr	r2, [pc, #164]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 800284e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002852:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002854:	f7fd ff62 	bl	800071c <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285c:	f7fd ff5e 	bl	800071c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1c2      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800286e:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8086 	beq.w	8002994 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x4a8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_RCC_OscConfig+0x4a8>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002894:	f7fd ff42 	bl	800071c <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fd ff3e 	bl	800071c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1a2      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_RCC_OscConfig+0x4a8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x480>
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	e032      	b.n	8002936 <HAL_RCC_OscConfig+0x4e6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x4ac>
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a02      	ldr	r2, [pc, #8]	; (80028f4 <HAL_RCC_OscConfig+0x4a4>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e021      	b.n	8002936 <HAL_RCC_OscConfig+0x4e6>
 80028f2:	bf00      	nop
 80028f4:	58024400 	.word	0x58024400
 80028f8:	58024800 	.word	0x58024800
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x4ce>
 8002904:	4b83      	ldr	r3, [pc, #524]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a82      	ldr	r2, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b80      	ldr	r3, [pc, #512]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a7f      	ldr	r2, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	e00b      	b.n	8002936 <HAL_RCC_OscConfig+0x4e6>
 800291e:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a7c      	ldr	r2, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	4b7a      	ldr	r3, [pc, #488]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a79      	ldr	r2, [pc, #484]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d015      	beq.n	800296a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fd feed 	bl	800071c <HAL_GetTick>
 8002942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fd fee9 	bl	800071c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e14b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295c:	4b6d      	ldr	r3, [pc, #436]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ee      	beq.n	8002946 <HAL_RCC_OscConfig+0x4f6>
 8002968:	e014      	b.n	8002994 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7fd fed7 	bl	800071c <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fd fed3 	bl	800071c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e135      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002988:	4b62      	ldr	r3, [pc, #392]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 812a 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800299e:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	f000 80ba 	beq.w	8002b20 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f040 8095 	bne.w	8002ae0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 80029bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fd feab 	bl	800071c <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fd fea7 	bl	800071c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e10b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029dc:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e8:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 80029ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ec:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_RCC_OscConfig+0x6c8>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	430a      	orrs	r2, r1
 80029fc:	4945      	ldr	r1, [pc, #276]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	628b      	str	r3, [r1, #40]	; 0x28
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	3b01      	subs	r3, #1
 8002a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	3b01      	subs	r3, #1
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a32:	4938      	ldr	r1, [pc, #224]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a48:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <HAL_RCC_OscConfig+0x6cc>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a50:	00d2      	lsls	r2, r2, #3
 8002a52:	4930      	ldr	r1, [pc, #192]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f023 020c 	bic.w	r2, r3, #12
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	492b      	ldr	r1, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f023 0202 	bic.w	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4927      	ldr	r1, [pc, #156]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fd fe30 	bl	800071c <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fd fe2c 	bl	800071c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e090      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x670>
 8002ade:	e088      	b.n	8002bf2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fd fe16 	bl	800071c <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fd fe12 	bl	800071c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e076      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_OscConfig+0x6c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x6a4>
 8002b12:	e06e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x7a2>
 8002b14:	58024400 	.word	0x58024400
 8002b18:	fffffc0c 	.word	0xfffffc0c
 8002b1c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d031      	beq.n	8002b98 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d12a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d122      	bne.n	8002b98 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d11a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0a5b      	lsrs	r3, r3, #9
 8002b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d111      	bne.n	8002b98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d108      	bne.n	8002b98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0e1b      	lsrs	r3, r3, #24
 8002b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e02b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	08db      	lsrs	r3, r3, #3
 8002ba2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ba6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bbe:	f7fd fdad 	bl	800071c <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bc4:	bf00      	nop
 8002bc6:	f7fd fda9 	bl	800071c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d0f9      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bde:	00d2      	lsls	r2, r2, #3
 8002be0:	4906      	ldr	r1, [pc, #24]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_RCC_OscConfig+0x7ac>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3730      	adds	r7, #48	; 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	58024400 	.word	0x58024400
 8002c00:	ffff0007 	.word	0xffff0007

08002c04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e19c      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d910      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b87      	ldr	r3, [pc, #540]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	4985      	ldr	r1, [pc, #532]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b83      	ldr	r3, [pc, #524]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e184      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d010      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d908      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c64:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4975      	ldr	r1, [pc, #468]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	4b70      	ldr	r3, [pc, #448]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	496a      	ldr	r1, [pc, #424]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d010      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	4b64      	ldr	r3, [pc, #400]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d908      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cc0:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	495e      	ldr	r1, [pc, #376]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d010      	beq.n	8002d00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d908      	bls.n	8002d00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4953      	ldr	r1, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d908      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f023 020f 	bic.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4947      	ldr	r1, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d055      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4940      	ldr	r1, [pc, #256]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d54:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0f6      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d115      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0ea      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d84:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0de      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0d6      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f023 0207 	bic.w	r2, r3, #7
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4925      	ldr	r1, [pc, #148]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db6:	f7fd fcb1 	bl	800071c <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbe:	f7fd fcad 	bl	800071c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0be      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d1eb      	bne.n	8002dbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d208      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d214      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e086      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
 8002e44:	52002000 	.word	0x52002000
 8002e48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d208      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e68:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4939      	ldr	r1, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d208      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e96:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	492e      	ldr	r1, [pc, #184]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d208      	bcs.n	8002ed6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4922      	ldr	r1, [pc, #136]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d208      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4917      	ldr	r1, [pc, #92]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f04:	f000 f834 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	4912      	ldr	r1, [pc, #72]	; (8002f60 <HAL_RCC_ClockConfig+0x35c>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_RCC_ClockConfig+0x35c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x360>)
 8002f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x364>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x368>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fb9e 	bl	8000688 <HAL_InitTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	08008cd0 	.word	0x08008cd0
 8002f64:	2400000c 	.word	0x2400000c
 8002f68:	24000008 	.word	0x24000008
 8002f6c:	24000000 	.word	0x24000000

08002f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f76:	4bb3      	ldr	r3, [pc, #716]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f7e:	2b18      	cmp	r3, #24
 8002f80:	f200 8155 	bhi.w	800322e <HAL_RCC_GetSysClockFreq+0x2be>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002ff1 	.word	0x08002ff1
 8002f90:	0800322f 	.word	0x0800322f
 8002f94:	0800322f 	.word	0x0800322f
 8002f98:	0800322f 	.word	0x0800322f
 8002f9c:	0800322f 	.word	0x0800322f
 8002fa0:	0800322f 	.word	0x0800322f
 8002fa4:	0800322f 	.word	0x0800322f
 8002fa8:	0800322f 	.word	0x0800322f
 8002fac:	08003017 	.word	0x08003017
 8002fb0:	0800322f 	.word	0x0800322f
 8002fb4:	0800322f 	.word	0x0800322f
 8002fb8:	0800322f 	.word	0x0800322f
 8002fbc:	0800322f 	.word	0x0800322f
 8002fc0:	0800322f 	.word	0x0800322f
 8002fc4:	0800322f 	.word	0x0800322f
 8002fc8:	0800322f 	.word	0x0800322f
 8002fcc:	0800301d 	.word	0x0800301d
 8002fd0:	0800322f 	.word	0x0800322f
 8002fd4:	0800322f 	.word	0x0800322f
 8002fd8:	0800322f 	.word	0x0800322f
 8002fdc:	0800322f 	.word	0x0800322f
 8002fe0:	0800322f 	.word	0x0800322f
 8002fe4:	0800322f 	.word	0x0800322f
 8002fe8:	0800322f 	.word	0x0800322f
 8002fec:	08003023 	.word	0x08003023
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff0:	4b94      	ldr	r3, [pc, #592]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ffc:	4b91      	ldr	r3, [pc, #580]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	08db      	lsrs	r3, r3, #3
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	4a90      	ldr	r2, [pc, #576]	; (8003248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800300e:	e111      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003010:	4b8d      	ldr	r3, [pc, #564]	; (8003248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003012:	61bb      	str	r3, [r7, #24]
      break;
 8003014:	e10e      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003018:	61bb      	str	r3, [r7, #24]
      break;
 800301a:	e10b      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800301e:	61bb      	str	r3, [r7, #24]
      break;
 8003020:	e108      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003022:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800302c:	4b85      	ldr	r3, [pc, #532]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003036:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003038:	4b82      	ldr	r3, [pc, #520]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003042:	4b80      	ldr	r3, [pc, #512]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80e1 	beq.w	8003228 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f000 8083 	beq.w	8003174 <HAL_RCC_GetSysClockFreq+0x204>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b02      	cmp	r3, #2
 8003072:	f200 80a1 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x114>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d056      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003082:	e099      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02d      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003090:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	4a6b      	ldr	r2, [pc, #428]	; (8003248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b62      	ldr	r3, [pc, #392]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030ea:	e087      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003258 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003112:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800312e:	e065      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800325c <HAL_RCC_GetSysClockFreq+0x2ec>
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a02 	vldr	s12, [r7, #8]
 8003156:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003172:	e043      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031b6:	e021      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800325c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a02 	vldr	s12, [r7, #8]
 80031de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	0a5b      	lsrs	r3, r3, #9
 8003202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003206:	3301      	adds	r3, #1
 8003208:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003214:	edd7 6a07 	vldr	s13, [r7, #28]
 8003218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800321c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003220:	ee17 3a90 	vmov	r3, s15
 8003224:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003226:	e005      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
      break;
 800322c:	e002      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003230:	61bb      	str	r3, [r7, #24]
      break;
 8003232:	bf00      	nop
  }

  return sysclockfreq;
 8003234:	69bb      	ldr	r3, [r7, #24]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
 8003248:	03d09000 	.word	0x03d09000
 800324c:	003d0900 	.word	0x003d0900
 8003250:	007a1200 	.word	0x007a1200
 8003254:	46000000 	.word	0x46000000
 8003258:	4c742400 	.word	0x4c742400
 800325c:	4a742400 	.word	0x4a742400
 8003260:	4af42400 	.word	0x4af42400

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800326a:	f7ff fe81 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490f      	ldr	r1, [pc, #60]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_RCC_GetHCLKFreq+0x58>)
 80032a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_RCC_GetHCLKFreq+0x58>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400
 80032b8:	08008cd0 	.word	0x08008cd0
 80032bc:	2400000c 	.word	0x2400000c
 80032c0:	24000008 	.word	0x24000008

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032c8:	f7ff ffcc 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4904      	ldr	r1, [pc, #16]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	58024400 	.word	0x58024400
 80032ec:	08008cd0 	.word	0x08008cd0

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032f4:	f7ff ffb6 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58024400 	.word	0x58024400
 8003318:	08008cd0 	.word	0x08008cd0

0800331c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b0c6      	sub	sp, #280	; 0x118
 8003322:	af00      	add	r7, sp, #0
 8003324:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800332e:	2300      	movs	r3, #0
 8003330:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003340:	2500      	movs	r5, #0
 8003342:	ea54 0305 	orrs.w	r3, r4, r5
 8003346:	d049      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800334c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003352:	d02f      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003354:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003358:	d828      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800335a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800335e:	d01a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003364:	d822      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800336a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336e:	d007      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003370:	e01c      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003372:	4bab      	ldr	r3, [pc, #684]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	4aaa      	ldr	r2, [pc, #680]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800337e:	e01a      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003384:	3308      	adds	r3, #8
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fa49 	bl	8005820 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003394:	e00f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800339a:	3328      	adds	r3, #40	; 0x28
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 faf0 	bl	8005984 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033aa:	e004      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033be:	4b98      	ldr	r3, [pc, #608]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033cc:	4a94      	ldr	r2, [pc, #592]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6513      	str	r3, [r2, #80]	; 0x50
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033e8:	f04f 0900 	mov.w	r9, #0
 80033ec:	ea58 0309 	orrs.w	r3, r8, r9
 80033f0:	d047      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d82a      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003419 	.word	0x08003419
 8003408:	08003427 	.word	0x08003427
 800340c:	0800343d 	.word	0x0800343d
 8003410:	0800345b 	.word	0x0800345b
 8003414:	0800345b 	.word	0x0800345b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003418:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4a80      	ldr	r2, [pc, #512]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800341e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003424:	e01a      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800342a:	3308      	adds	r3, #8
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f002 f9f6 	bl	8005820 <RCCEx_PLL2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800343a:	e00f      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003440:	3328      	adds	r3, #40	; 0x28
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f002 fa9d 	bl	8005984 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003450:	e004      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800345a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003464:	4b6e      	ldr	r3, [pc, #440]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	f023 0107 	bic.w	r1, r3, #7
 800346c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003474:	430b      	orrs	r3, r1
 8003476:	6513      	str	r3, [r2, #80]	; 0x50
 8003478:	e003      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800347e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800348e:	f04f 0b00 	mov.w	fp, #0
 8003492:	ea5a 030b 	orrs.w	r3, sl, fp
 8003496:	d05b      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800349c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034a0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80034a4:	d03b      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80034a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80034aa:	d834      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b0:	d037      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80034b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b6:	d82e      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034bc:	d033      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034c2:	d828      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d01a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80034ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ce:	d822      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80034d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d8:	d007      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80034da:	e01c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4a4f      	ldr	r2, [pc, #316]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e01e      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ee:	3308      	adds	r3, #8
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 f994 	bl	8005820 <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034fe:	e013      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003504:	3328      	adds	r3, #40	; 0x28
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f002 fa3b 	bl	8005984 <RCCEx_PLL3_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003514:	e008      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800351c:	e004      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003528:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003540:	4a37      	ldr	r2, [pc, #220]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003542:	430b      	orrs	r3, r1
 8003544:	6593      	str	r3, [r2, #88]	; 0x58
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800354c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800355c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003566:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d05d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003574:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003578:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800357c:	d03b      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800357e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003582:	d834      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003588:	d037      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358e:	d82e      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003590:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003594:	d033      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003596:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800359a:	d828      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800359c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a0:	d01a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80035a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a6:	d822      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80035ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b0:	d007      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80035b2:	e01c      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c0:	e01e      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c6:	3308      	adds	r3, #8
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 f928 	bl	8005820 <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035d6:	e013      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035dc:	3328      	adds	r3, #40	; 0x28
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 f9cf 	bl	8005984 <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003614:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003618:	4a01      	ldr	r2, [pc, #4]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800361a:	430b      	orrs	r3, r1
 800361c:	6593      	str	r3, [r2, #88]	; 0x58
 800361e:	e005      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003620:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003628:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800362c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003638:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003642:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003646:	460b      	mov	r3, r1
 8003648:	4313      	orrs	r3, r2
 800364a:	d03a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800364c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	2b30      	cmp	r3, #48	; 0x30
 8003654:	d01f      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003656:	2b30      	cmp	r3, #48	; 0x30
 8003658:	d819      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800365a:	2b20      	cmp	r3, #32
 800365c:	d00c      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800365e:	2b20      	cmp	r3, #32
 8003660:	d815      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d019      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003666:	2b10      	cmp	r3, #16
 8003668:	d111      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366a:	4baa      	ldr	r3, [pc, #680]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4aa9      	ldr	r2, [pc, #676]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003676:	e011      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800367c:	3308      	adds	r3, #8
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f002 f8cd 	bl	8005820 <RCCEx_PLL2_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800368c:	e006      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003694:	e002      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800369a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036a4:	4b9b      	ldr	r3, [pc, #620]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80036ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	4a98      	ldr	r2, [pc, #608]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80036ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80036d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80036dc:	460b      	mov	r3, r1
 80036de:	4313      	orrs	r3, r2
 80036e0:	d051      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ec:	d035      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80036ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f2:	d82e      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036f8:	d031      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80036fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036fe:	d828      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003704:	d01a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	d822      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003714:	d007      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003716:	e01c      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4a7d      	ldr	r2, [pc, #500]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800371e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003724:	e01c      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800372a:	3308      	adds	r3, #8
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f002 f876 	bl	8005820 <RCCEx_PLL2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800373a:	e011      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800373c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003740:	3328      	adds	r3, #40	; 0x28
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f002 f91d 	bl	8005984 <RCCEx_PLL3_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003750:	e006      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003758:	e002      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800375e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003768:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003778:	430b      	orrs	r3, r1
 800377a:	6513      	str	r3, [r2, #80]	; 0x50
 800377c:	e003      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003782:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003792:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800379c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d053      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d033      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80037b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b6:	d82c      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037bc:	d02f      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80037be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c2:	d826      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c8:	d02b      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80037ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037ce:	d820      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d4:	d012      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80037d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037da:	d81a      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d022      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d115      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ea:	3308      	adds	r3, #8
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 f816 	bl	8005820 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037fa:	e015      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003800:	3328      	adds	r3, #40	; 0x28
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f002 f8bd 	bl	8005984 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003810:	e00a      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003818:	e006      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800381a:	bf00      	nop
 800381c:	e004      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003830:	4b38      	ldr	r3, [pc, #224]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	4a35      	ldr	r2, [pc, #212]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6513      	str	r3, [r2, #80]	; 0x50
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800384a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800384e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800385a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003864:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d058      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800386e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387a:	d033      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800387c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003880:	d82c      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d02f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d826      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800388e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003892:	d02b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003894:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003898:	d820      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800389a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389e:	d012      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d81a      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d022      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ae:	d115      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038b4:	3308      	adds	r3, #8
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 ffb1 	bl	8005820 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038c4:	e015      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ca:	3328      	adds	r3, #40	; 0x28
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 f858 	bl	8005984 <RCCEx_PLL3_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038da:	e00a      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038e2:	e006      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038e4:	bf00      	nop
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10e      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003906:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800390a:	4a02      	ldr	r2, [pc, #8]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800390c:	430b      	orrs	r3, r1
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800391c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003936:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d037      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800394a:	d00e      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003950:	d816      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d018      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395a:	d111      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4bc4      	ldr	r3, [pc, #784]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4ac3      	ldr	r2, [pc, #780]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003968:	e00f      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800396e:	3308      	adds	r3, #8
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f001 ff54 	bl	8005820 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800397e:	e004      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003992:	4bb7      	ldr	r3, [pc, #732]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800399a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800399e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a0:	4ab3      	ldr	r2, [pc, #716]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a2:	430b      	orrs	r3, r1
 80039a4:	6513      	str	r3, [r2, #80]	; 0x50
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80039bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80039ca:	460b      	mov	r3, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	d039      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d81c      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	080039f1 	.word	0x080039f1
 80039e8:	080039ff 	.word	0x080039ff
 80039ec:	08003a1d 	.word	0x08003a1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4b9f      	ldr	r3, [pc, #636]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a9e      	ldr	r2, [pc, #632]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039fc:	e00f      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a02:	3308      	adds	r3, #8
 8003a04:	2102      	movs	r1, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 ff0a 	bl	8005820 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a12:	e004      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a26:	4b92      	ldr	r3, [pc, #584]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	f023 0103 	bic.w	r1, r3, #3
 8003a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	4a8e      	ldr	r2, [pc, #568]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f000 8099 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a66:	4b83      	ldr	r3, [pc, #524]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a82      	ldr	r2, [pc, #520]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a72:	f7fc fe53 	bl	800071c <HAL_GetTick>
 8003a76:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fc fe4e 	bl	800071c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b64      	cmp	r3, #100	; 0x64
 8003a8a:	d903      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a92:	e005      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a94:	4b77      	ldr	r3, [pc, #476]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ed      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d173      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003aa8:	4b71      	ldr	r3, [pc, #452]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab4:	4053      	eors	r3, r2
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d015      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aca:	4b69      	ldr	r3, [pc, #420]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a68      	ldr	r2, [pc, #416]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad6:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ae2:	4a63      	ldr	r2, [pc, #396]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d118      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fc fe10 	bl	800071c <HAL_GetTick>
 8003afc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b00:	e00d      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fc fe0b 	bl	800071c <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b0c:	1ad2      	subs	r2, r2, r3
 8003b0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d903      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003b1c:	e005      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b1e:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0eb      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d129      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b42:	d10e      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b44:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b54:	091a      	lsrs	r2, r3, #4
 8003b56:	4b48      	ldr	r3, [pc, #288]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	4a45      	ldr	r2, [pc, #276]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6113      	str	r3, [r2, #16]
 8003b60:	e005      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003b62:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	4a42      	ldr	r2, [pc, #264]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b6c:	6113      	str	r3, [r2, #16]
 8003b6e:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
 8003b84:	e008      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003b8e:	e003      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f002 0301 	and.w	r3, r2, #1
 8003ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f000 808f 	beq.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc0:	2b28      	cmp	r3, #40	; 0x28
 8003bc2:	d871      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003cb1 	.word	0x08003cb1
 8003bd0:	08003ca9 	.word	0x08003ca9
 8003bd4:	08003ca9 	.word	0x08003ca9
 8003bd8:	08003ca9 	.word	0x08003ca9
 8003bdc:	08003ca9 	.word	0x08003ca9
 8003be0:	08003ca9 	.word	0x08003ca9
 8003be4:	08003ca9 	.word	0x08003ca9
 8003be8:	08003ca9 	.word	0x08003ca9
 8003bec:	08003c7d 	.word	0x08003c7d
 8003bf0:	08003ca9 	.word	0x08003ca9
 8003bf4:	08003ca9 	.word	0x08003ca9
 8003bf8:	08003ca9 	.word	0x08003ca9
 8003bfc:	08003ca9 	.word	0x08003ca9
 8003c00:	08003ca9 	.word	0x08003ca9
 8003c04:	08003ca9 	.word	0x08003ca9
 8003c08:	08003ca9 	.word	0x08003ca9
 8003c0c:	08003c93 	.word	0x08003c93
 8003c10:	08003ca9 	.word	0x08003ca9
 8003c14:	08003ca9 	.word	0x08003ca9
 8003c18:	08003ca9 	.word	0x08003ca9
 8003c1c:	08003ca9 	.word	0x08003ca9
 8003c20:	08003ca9 	.word	0x08003ca9
 8003c24:	08003ca9 	.word	0x08003ca9
 8003c28:	08003ca9 	.word	0x08003ca9
 8003c2c:	08003cb1 	.word	0x08003cb1
 8003c30:	08003ca9 	.word	0x08003ca9
 8003c34:	08003ca9 	.word	0x08003ca9
 8003c38:	08003ca9 	.word	0x08003ca9
 8003c3c:	08003ca9 	.word	0x08003ca9
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003ca9 	.word	0x08003ca9
 8003c48:	08003ca9 	.word	0x08003ca9
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003ca9 	.word	0x08003ca9
 8003c5c:	08003ca9 	.word	0x08003ca9
 8003c60:	08003ca9 	.word	0x08003ca9
 8003c64:	08003ca9 	.word	0x08003ca9
 8003c68:	08003ca9 	.word	0x08003ca9
 8003c6c:	08003cb1 	.word	0x08003cb1
 8003c70:	58024400 	.word	0x58024400
 8003c74:	58024800 	.word	0x58024800
 8003c78:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c80:	3308      	adds	r3, #8
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fdcb 	bl	8005820 <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c96:	3328      	adds	r3, #40	; 0x28
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fe72 	bl	8005984 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cba:	4bbf      	ldr	r3, [pc, #764]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc8:	4abb      	ldr	r2, [pc, #748]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	6553      	str	r3, [r2, #84]	; 0x54
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 0302 	and.w	r3, r2, #2
 8003ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d041      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d824      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d55 	.word	0x08003d55
 8003d0c:	08003d21 	.word	0x08003d21
 8003d10:	08003d37 	.word	0x08003d37
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d55 	.word	0x08003d55
 8003d1c:	08003d55 	.word	0x08003d55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d24:	3308      	adds	r3, #8
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fd79 	bl	8005820 <RCCEx_PLL2_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d34:	e00f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d3a:	3328      	adds	r3, #40	; 0x28
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fe20 	bl	8005984 <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d5e:	4b96      	ldr	r3, [pc, #600]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f023 0107 	bic.w	r1, r3, #7
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6c:	4a92      	ldr	r2, [pc, #584]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6553      	str	r3, [r2, #84]	; 0x54
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f002 0304 	and.w	r3, r2, #4
 8003d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d044      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d825      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003da8:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003dfd 	.word	0x08003dfd
 8003db4:	08003dc9 	.word	0x08003dc9
 8003db8:	08003ddf 	.word	0x08003ddf
 8003dbc:	08003dfd 	.word	0x08003dfd
 8003dc0:	08003dfd 	.word	0x08003dfd
 8003dc4:	08003dfd 	.word	0x08003dfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dcc:	3308      	adds	r3, #8
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fd25 	bl	8005820 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e00f      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de2:	3328      	adds	r3, #40	; 0x28
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 fdcc 	bl	8005984 <RCCEx_PLL3_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003df2:	e004      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f023 0107 	bic.w	r1, r3, #7
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1c:	e003      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f002 0320 	and.w	r3, r2, #32
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d055      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e52:	d033      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e58:	d82c      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d02f      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d826      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e6a:	d02b      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e70:	d820      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e76:	d012      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7c:	d81a      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d022      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e86:	d115      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fcc5 	bl	8005820 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e015      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea2:	3328      	adds	r3, #40	; 0x28
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fd6c 	bl	8005984 <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eb2:	e00a      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003eba:	e006      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ebc:	bf00      	nop
 8003ebe:	e004      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ec0:	bf00      	nop
 8003ec2:	e002      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee2:	4a35      	ldr	r2, [pc, #212]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d058      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f1e:	d033      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003f20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f24:	d82c      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d02f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d826      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f36:	d02b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3c:	d820      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f42:	d012      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d81a      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d022      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d115      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f58:	3308      	adds	r3, #8
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fc5f 	bl	8005820 <RCCEx_PLL2_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f68:	e015      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f6e:	3328      	adds	r3, #40	; 0x28
 8003f70:	2102      	movs	r1, #2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 fd06 	bl	8005984 <RCCEx_PLL3_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f86:	e006      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f88:	bf00      	nop
 8003f8a:	e004      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f8c:	bf00      	nop
 8003f8e:	e002      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10e      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fae:	4a02      	ldr	r2, [pc, #8]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003fb6:	bf00      	nop
 8003fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d055      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ff0:	d033      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003ff2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ff6:	d82c      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffc:	d02f      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004002:	d826      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004004:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004008:	d02b      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800400a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800400e:	d820      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004014:	d012      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401a:	d81a      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d022      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d115      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800402a:	3308      	adds	r3, #8
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fbf6 	bl	8005820 <RCCEx_PLL2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800403a:	e015      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004040:	3328      	adds	r3, #40	; 0x28
 8004042:	2102      	movs	r1, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fc9d 	bl	8005984 <RCCEx_PLL3_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004050:	e00a      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004058:	e006      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800405a:	bf00      	nop
 800405c:	e004      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004068:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004070:	4ba0      	ldr	r3, [pc, #640]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800407c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004080:	4a9c      	ldr	r2, [pc, #624]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6593      	str	r3, [r2, #88]	; 0x58
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800408c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 0308 	and.w	r3, r2, #8
 800409c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d01e      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c2:	3328      	adds	r3, #40	; 0x28
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fc5c 	bl	8005984 <RCCEx_PLL3_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80040d8:	4b86      	ldr	r3, [pc, #536]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e8:	4a82      	ldr	r2, [pc, #520]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f002 0310 	and.w	r3, r2, #16
 80040fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004104:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d01e      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800410e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d10c      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004120:	3328      	adds	r3, #40	; 0x28
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fc2d 	bl	8005984 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004136:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800413e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	4a6b      	ldr	r2, [pc, #428]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004148:	430b      	orrs	r3, r1
 800414a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004158:	67bb      	str	r3, [r7, #120]	; 0x78
 800415a:	2300      	movs	r3, #0
 800415c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800415e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d03e      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004174:	d022      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800417a:	d81b      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d00b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004186:	e015      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800418c:	3308      	adds	r3, #8
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fb45 	bl	8005820 <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800419c:	e00f      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a2:	3328      	adds	r3, #40	; 0x28
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fbec 	bl	8005984 <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c6:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041d6:	4a47      	ldr	r2, [pc, #284]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	6593      	str	r3, [r2, #88]	; 0x58
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80041f2:	673b      	str	r3, [r7, #112]	; 0x70
 80041f4:	2300      	movs	r3, #0
 80041f6:	677b      	str	r3, [r7, #116]	; 0x74
 80041f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80041fc:	460b      	mov	r3, r1
 80041fe:	4313      	orrs	r3, r2
 8004200:	d03b      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800420e:	d01f      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004214:	d818      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d003      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800421c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004220:	d007      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004222:	e011      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004224:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a32      	ldr	r2, [pc, #200]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800422a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004236:	3328      	adds	r3, #40	; 0x28
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f001 fba2 	bl	8005984 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426a:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800426c:	430b      	orrs	r3, r1
 800426e:	6553      	str	r3, [r2, #84]	; 0x54
 8004270:	e003      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004272:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004276:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004286:	66bb      	str	r3, [r7, #104]	; 0x68
 8004288:	2300      	movs	r3, #0
 800428a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800428c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d034      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d007      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80042a6:	e011      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042b4:	e00e      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ba:	3308      	adds	r3, #8
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 faae 	bl	8005820 <RCCEx_PLL2_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042ca:	e003      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10d      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ea:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042f0:	e006      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	2300      	movs	r3, #0
 8004310:	667b      	str	r3, [r7, #100]	; 0x64
 8004312:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d00c      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004320:	3328      	adds	r3, #40	; 0x28
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f001 fb2d 	bl	8005984 <RCCEx_PLL3_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004342:	65bb      	str	r3, [r7, #88]	; 0x58
 8004344:	2300      	movs	r3, #0
 8004346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004348:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d036      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435c:	d018      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800435e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004362:	d811      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d014      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436e:	d80b      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d011      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d106      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437a:	4bb7      	ldr	r3, [pc, #732]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	4ab6      	ldr	r2, [pc, #728]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004384:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004386:	e008      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800438e:	e004      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a2:	4bad      	ldr	r3, [pc, #692]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b0:	4aa9      	ldr	r2, [pc, #676]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6553      	str	r3, [r2, #84]	; 0x54
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80043cc:	653b      	str	r3, [r7, #80]	; 0x50
 80043ce:	2300      	movs	r3, #0
 80043d0:	657b      	str	r3, [r7, #84]	; 0x54
 80043d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043dc:	4b9e      	ldr	r3, [pc, #632]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80043e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a9b      	ldr	r2, [pc, #620]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80043fe:	2300      	movs	r3, #0
 8004400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004402:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800440c:	4b92      	ldr	r3, [pc, #584]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441a:	4a8f      	ldr	r2, [pc, #572]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	2300      	movs	r3, #0
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
 8004432:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800443c:	4b86      	ldr	r3, [pc, #536]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4a85      	ldr	r2, [pc, #532]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004442:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004446:	6113      	str	r3, [r2, #16]
 8004448:	4b83      	ldr	r3, [pc, #524]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800444a:	6919      	ldr	r1, [r3, #16]
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004450:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004454:	4a80      	ldr	r2, [pc, #512]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004456:	430b      	orrs	r3, r1
 8004458:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
 8004468:	2300      	movs	r3, #0
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004470:	460b      	mov	r3, r1
 8004472:	4313      	orrs	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004476:	4b78      	ldr	r3, [pc, #480]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800447e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	4a74      	ldr	r2, [pc, #464]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004486:	430b      	orrs	r3, r1
 8004488:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800448a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
 8004498:	2300      	movs	r3, #0
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a6:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80044ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	4a68      	ldr	r2, [pc, #416]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	2100      	movs	r1, #0
 80044c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d011      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044dc:	3308      	adds	r3, #8
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 f99d 	bl	8005820 <RCCEx_PLL2_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80044ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	2100      	movs	r1, #0
 8004506:	6239      	str	r1, [r7, #32]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d011      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800451c:	3308      	adds	r3, #8
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f001 f97d 	bl	8005820 <RCCEx_PLL2_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800452c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004538:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800453c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	2100      	movs	r1, #0
 8004546:	61b9      	str	r1, [r7, #24]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d011      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455c:	3308      	adds	r3, #8
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f001 f95d 	bl	8005820 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800456c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004578:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	2100      	movs	r1, #0
 8004586:	6139      	str	r1, [r7, #16]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d011      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459c:	3328      	adds	r3, #40	; 0x28
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 f9ef 	bl	8005984 <RCCEx_PLL3_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	2100      	movs	r1, #0
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d011      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045dc:	3328      	adds	r3, #40	; 0x28
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 f9cf 	bl	8005984 <RCCEx_PLL3_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	2100      	movs	r1, #0
 8004606:	6039      	str	r1, [r7, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d011      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461c:	3328      	adds	r3, #40	; 0x28
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f9af 	bl	8005984 <RCCEx_PLL3_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800462c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800463c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
}
 800464a:	4618      	mov	r0, r3
 800464c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400

0800465c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b090      	sub	sp, #64	; 0x40
 8004660:	af00      	add	r7, sp, #0
 8004662:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800466e:	430b      	orrs	r3, r1
 8004670:	f040 8094 	bne.w	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004674:	4b9b      	ldr	r3, [pc, #620]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b04      	cmp	r3, #4
 8004682:	f200 8087 	bhi.w	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	080046a1 	.word	0x080046a1
 8004690:	080046c9 	.word	0x080046c9
 8004694:	080046f1 	.word	0x080046f1
 8004698:	0800478d 	.word	0x0800478d
 800469c:	08004719 	.word	0x08004719
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046a0:	4b90      	ldr	r3, [pc, #576]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ac:	d108      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 ff62 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046bc:	f000 bc93 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046c4:	f000 bc8f 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046c8:	4b86      	ldr	r3, [pc, #536]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d4:	d108      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046d6:	f107 0318 	add.w	r3, r7, #24
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fca6 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046e4:	f000 bc7f 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046ec:	f000 bc7b 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046f0:	4b7c      	ldr	r3, [pc, #496]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fc:	d108      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046fe:	f107 030c 	add.w	r3, r7, #12
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fde6 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800470c:	f000 bc6b 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004714:	f000 bc67 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004718:	4b72      	ldr	r3, [pc, #456]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800471a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004720:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004722:	4b70      	ldr	r3, [pc, #448]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004734:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004746:	e01f      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004748:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	d106      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475c:	d102      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800475e:	4b63      	ldr	r3, [pc, #396]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004762:	e011      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004764:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004770:	d106      	bne.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004778:	d102      	bne.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800477a:	4b5d      	ldr	r3, [pc, #372]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477e:	e003      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004784:	f000 bc2f 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004788:	f000 bc2d 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004790:	f000 bc29 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004798:	f000 bc25 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800479c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80047a4:	430b      	orrs	r3, r1
 80047a6:	f040 80a7 	bne.w	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80047aa:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ba:	d054      	beq.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c2:	f200 808b 	bhi.w	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047cc:	f000 8083 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047d6:	f200 8081 	bhi.w	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e0:	d02f      	beq.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e8:	d878      	bhi.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f6:	d012      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80047f8:	e070      	b.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047fa:	4b3a      	ldr	r3, [pc, #232]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004806:	d107      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f000 feb5 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004816:	e3e6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800481c:	e3e3      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800482a:	d107      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800482c:	f107 0318 	add.w	r3, r7, #24
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fbfb 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800483a:	e3d4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004840:	e3d1      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004842:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484e:	d107      	bne.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fd3d 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800485e:	e3c2      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004864:	e3bf      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800486e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d10c      	bne.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004882:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	08db      	lsrs	r3, r3, #3
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800488e:	fa22 f303 	lsr.w	r3, r2, r3
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004894:	e01e      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a2:	d106      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048aa:	d102      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	e010      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048be:	d106      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c6:	d102      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048cc:	e002      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80048d2:	e388      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80048d4:	e387      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048da:	e384      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e0:	e381      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	03d09000 	.word	0x03d09000
 80048ec:	003d0900 	.word	0x003d0900
 80048f0:	007a1200 	.word	0x007a1200
 80048f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80048f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048fc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004900:	430b      	orrs	r3, r1
 8004902:	f040 809c 	bne.w	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004906:	4b9e      	ldr	r3, [pc, #632]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800490e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004916:	d054      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800491e:	f200 808b 	bhi.w	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004928:	f000 8083 	beq.w	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004932:	f200 8081 	bhi.w	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800493c:	d02f      	beq.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004944:	d878      	bhi.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004952:	d012      	beq.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004954:	e070      	b.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004956:	4b8a      	ldr	r3, [pc, #552]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004962:	d107      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fe07 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004972:	e338      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004978:	e335      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800497a:	4b81      	ldr	r3, [pc, #516]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004986:	d107      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004988:	f107 0318 	add.w	r3, r7, #24
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb4d 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004996:	e326      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800499c:	e323      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800499e:	4b78      	ldr	r3, [pc, #480]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049aa:	d107      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ac:	f107 030c 	add.w	r3, r7, #12
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fc8f 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049ba:	e314      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049c0:	e311      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049c2:	4b6f      	ldr	r3, [pc, #444]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049cc:	4b6c      	ldr	r3, [pc, #432]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d10c      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80049d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049de:	4b68      	ldr	r3, [pc, #416]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	08db      	lsrs	r3, r3, #3
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	4a66      	ldr	r2, [pc, #408]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f0:	e01e      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d106      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a06:	d102      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a08:	4b5f      	ldr	r3, [pc, #380]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0c:	e010      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a0e:	4b5c      	ldr	r3, [pc, #368]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a22:	d102      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004a2e:	e2da      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a30:	e2d9      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a32:	4b57      	ldr	r3, [pc, #348]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a36:	e2d6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a3c:	e2d3      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a42:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004a46:	430b      	orrs	r3, r1
 8004a48:	f040 80a7 	bne.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004a4c:	4b4c      	ldr	r3, [pc, #304]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5c:	d055      	beq.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a64:	f200 8096 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a6e:	f000 8084 	beq.w	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a78:	f200 808c 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a82:	d030      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8a:	f200 8083 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d012      	beq.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004a9c:	e07a      	b.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aaa:	d107      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fd63 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004aba:	e294      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ac0:	e291      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ac2:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad0:	f107 0318 	add.w	r3, r7, #24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 faa9 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ade:	e282      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ae4:	e27f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af2:	d107      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fbeb 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b02:	e270      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b08:	e26d      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b26:	4b16      	ldr	r3, [pc, #88]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	08db      	lsrs	r3, r3, #3
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e01e      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b46:	d106      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4e:	d102      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b54:	e010      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b62:	d106      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d102      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	e002      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004b76:	e236      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b78:	e235      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b7e:	e232      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b80:	58024400 	.word	0x58024400
 8004b84:	03d09000 	.word	0x03d09000
 8004b88:	003d0900 	.word	0x003d0900
 8004b8c:	007a1200 	.word	0x007a1200
 8004b90:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b98:	e225      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	f040 8085 	bne.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004ba8:	4b9c      	ldr	r3, [pc, #624]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb8:	d06b      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc0:	d874      	bhi.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bc8:	d056      	beq.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bd0:	d86c      	bhi.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bd8:	d03b      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be0:	d864      	bhi.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be8:	d021      	beq.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf0:	d85c      	bhi.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d004      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8004c00:	e054      	b.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004c02:	f7fe fb5f 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8004c06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c08:	e1ed      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c0a:	4b84      	ldr	r3, [pc, #528]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c16:	d107      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c18:	f107 0318 	add.w	r3, r7, #24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fa05 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c26:	e1de      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c2c:	e1db      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c2e:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3a:	d107      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fb47 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c4a:	e1cc      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c50:	e1c9      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c52:	4b72      	ldr	r3, [pc, #456]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c5e:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	08db      	lsrs	r3, r3, #3
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	4a6d      	ldr	r2, [pc, #436]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c70:	e1b9      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c76:	e1b6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c78:	4b68      	ldr	r3, [pc, #416]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c84:	d102      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8004c86:	4b67      	ldr	r3, [pc, #412]	; (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c8a:	e1ac      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c90:	e1a9      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c92:	4b62      	ldr	r3, [pc, #392]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c9e:	d102      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ca4:	e19f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004caa:	e19c      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb0:	e199      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	d173      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004cbe:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cce:	d02f      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd6:	d863      	bhi.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d012      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8004ce6:	e05b      	b.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ce8:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cf6:	f107 0318 	add.w	r3, r7, #24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f996 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d04:	e16f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d0a:	e16c      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d0c:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d18:	d107      	bne.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fad8 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d28:	e15d      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d2e:	e15a      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d30:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d3a:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5e:	e01e      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d60:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d74:	d102      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d76:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d7a:	e010      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d7c:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d88:	d106      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d90:	d102      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004d92:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d96:	e002      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004d9c:	e123      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004d9e:	e122      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004da4:	e11f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004daa:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004dae:	430b      	orrs	r3, r1
 8004db0:	d13c      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004db2:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc8:	d012      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8004dca:	e023      	b.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd8:	d107      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fbcc 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004de8:	e0fd      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dee:	e0fa      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dfe:	f107 0318 	add.w	r3, r7, #24
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f912 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e0c:	e0eb      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e12:	e0e8      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e18:	e0e5      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	03d09000 	.word	0x03d09000
 8004e24:	003d0900 	.word	0x003d0900
 8004e28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e30:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004e34:	430b      	orrs	r3, r1
 8004e36:	f040 8085 	bne.w	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004e3a:	4b6d      	ldr	r3, [pc, #436]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e42:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4a:	d06b      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e52:	d874      	bhi.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d056      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d86c      	bhi.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e6a:	d03b      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e72:	d864      	bhi.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7a:	d021      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e82:	d85c      	bhi.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e90:	d004      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004e92:	e054      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e94:	f000 f8b4 	bl	8005000 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e98:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e9a:	e0a4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e9c:	4b54      	ldr	r3, [pc, #336]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea8:	d107      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eaa:	f107 0318 	add.w	r3, r7, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f8bc 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eb8:	e095      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ebe:	e092      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ecc:	d107      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f9fe 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004edc:	e083      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ee2:	e080      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee4:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d109      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef0:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	08db      	lsrs	r3, r3, #3
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	4a3e      	ldr	r2, [pc, #248]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f02:	e070      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f08:	e06d      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f16:	d102      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8004f18:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f1c:	e063      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f22:	e060      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f30:	d102      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8004f32:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f36:	e056      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f3c:	e053      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f42:	e050      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f48:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	d148      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004f50:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f60:	d02a      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f68:	d838      	bhi.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004f78:	e030      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f86:	d102      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8004f88:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f8c:	e02b      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f92:	e028      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f94:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fae8 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fb0:	e019      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb6:	e016      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fc6:	f107 0318 	add.w	r3, r7, #24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f82e 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fd4:	e007      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe0:	e001      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3740      	adds	r7, #64	; 0x40
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	003d0900 	.word	0x003d0900
 8004ffc:	007a1200 	.word	0x007a1200

08005000 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005004:	f7fe f92e 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4904      	ldr	r1, [pc, #16]	; (8005028 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd80      	pop	{r7, pc}
 8005024:	58024400 	.word	0x58024400
 8005028:	08008cd0 	.word	0x08008cd0

0800502c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800503e:	4b9f      	ldr	r3, [pc, #636]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	0b1b      	lsrs	r3, r3, #12
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800504a:	4b9c      	ldr	r3, [pc, #624]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005056:	4b99      	ldr	r3, [pc, #612]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	08db      	lsrs	r3, r3, #3
 800505c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8111 	beq.w	800529c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f000 8083 	beq.w	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b02      	cmp	r3, #2
 8005086:	f200 80a1 	bhi.w	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d056      	beq.n	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005096:	e099      	b.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005098:	4b88      	ldr	r3, [pc, #544]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02d      	beq.n	8005100 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050a4:	4b85      	ldr	r3, [pc, #532]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	4a84      	ldr	r2, [pc, #528]	; (80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050de:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050fe:	e087      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b6a      	ldr	r3, [pc, #424]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005142:	e065      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b59      	ldr	r3, [pc, #356]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005186:	e043      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ca:	e021      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	0a5b      	lsrs	r3, r3, #9
 8005216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800522a:	edd7 6a07 	vldr	s13, [r7, #28]
 800522e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005236:	ee17 2a90 	vmov	r2, s15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800523e:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005258:	edd7 6a07 	vldr	s13, [r7, #28]
 800525c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005264:	ee17 2a90 	vmov	r2, s15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800526c:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005286:	edd7 6a07 	vldr	s13, [r7, #28]
 800528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005292:	ee17 2a90 	vmov	r2, s15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800529a:	e008      	b.n	80052ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
 80052c0:	03d09000 	.word	0x03d09000
 80052c4:	46000000 	.word	0x46000000
 80052c8:	4c742400 	.word	0x4c742400
 80052cc:	4a742400 	.word	0x4a742400
 80052d0:	4af42400 	.word	0x4af42400

080052d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052dc:	4ba1      	ldr	r3, [pc, #644]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052e6:	4b9f      	ldr	r3, [pc, #636]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	0d1b      	lsrs	r3, r3, #20
 80052ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052f2:	4b9c      	ldr	r3, [pc, #624]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052fe:	4b99      	ldr	r3, [pc, #612]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	08db      	lsrs	r3, r3, #3
 8005304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8111 	beq.w	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f000 8083 	beq.w	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b02      	cmp	r3, #2
 800532e:	f200 80a1 	bhi.w	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d056      	beq.n	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800533e:	e099      	b.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005340:	4b88      	ldr	r3, [pc, #544]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02d      	beq.n	80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800534c:	4b85      	ldr	r3, [pc, #532]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	4a84      	ldr	r2, [pc, #528]	; (8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
 800535c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b7b      	ldr	r3, [pc, #492]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a03 	vldr	s12, [r7, #12]
 800538a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053a6:	e087      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b6a      	ldr	r3, [pc, #424]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ea:	e065      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b59      	ldr	r3, [pc, #356]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800542e:	e043      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b48      	ldr	r3, [pc, #288]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a03 	vldr	s12, [r7, #12]
 8005456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005472:	e021      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a03 	vldr	s12, [r7, #12]
 800549a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054b8:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	0a5b      	lsrs	r3, r3, #9
 80054be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054de:	ee17 2a90 	vmov	r2, s15
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054e6:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005500:	edd7 6a07 	vldr	s13, [r7, #28]
 8005504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550c:	ee17 2a90 	vmov	r2, s15
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	0e1b      	lsrs	r3, r3, #24
 800551a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800552a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553a:	ee17 2a90 	vmov	r2, s15
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
}
 8005556:	bf00      	nop
 8005558:	3724      	adds	r7, #36	; 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	03d09000 	.word	0x03d09000
 800556c:	46000000 	.word	0x46000000
 8005570:	4c742400 	.word	0x4c742400
 8005574:	4a742400 	.word	0x4a742400
 8005578:	4af42400 	.word	0x4af42400

0800557c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005584:	4ba0      	ldr	r3, [pc, #640]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800558e:	4b9e      	ldr	r3, [pc, #632]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005598:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800559a:	4b9b      	ldr	r3, [pc, #620]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055a4:	4b98      	ldr	r3, [pc, #608]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8111 	beq.w	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	f000 8083 	beq.w	80056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	f200 80a1 	bhi.w	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d056      	beq.n	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055e4:	e099      	b.n	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e6:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02d      	beq.n	800564e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	4a83      	ldr	r2, [pc, #524]	; (800580c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561c:	4b7a      	ldr	r3, [pc, #488]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005630:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005648:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800564c:	e087      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005658:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800565c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005660:	4b69      	ldr	r3, [pc, #420]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005670:	ed97 6a03 	vldr	s12, [r7, #12]
 8005674:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005690:	e065      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80056a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a4:	4b58      	ldr	r3, [pc, #352]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d4:	e043      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800581c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e8:	4b47      	ldr	r3, [pc, #284]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80056fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005714:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005718:	e021      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005724:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005758:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800575c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	0a5b      	lsrs	r3, r3, #9
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005778:	edd7 6a07 	vldr	s13, [r7, #28]
 800577c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005784:	ee17 2a90 	vmov	r2, s15
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b2:	ee17 2a90 	vmov	r2, s15
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	0e1b      	lsrs	r3, r3, #24
 80057c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e0:	ee17 2a90 	vmov	r2, s15
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057e8:	e008      	b.n	80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3724      	adds	r7, #36	; 0x24
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	58024400 	.word	0x58024400
 800580c:	03d09000 	.word	0x03d09000
 8005810:	46000000 	.word	0x46000000
 8005814:	4c742400 	.word	0x4c742400
 8005818:	4a742400 	.word	0x4a742400
 800581c:	4af42400 	.word	0x4af42400

08005820 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800582e:	4b53      	ldr	r3, [pc, #332]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b03      	cmp	r3, #3
 8005838:	d101      	bne.n	800583e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e099      	b.n	8005972 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800583e:	4b4f      	ldr	r3, [pc, #316]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a4e      	ldr	r2, [pc, #312]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005844:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584a:	f7fa ff67 	bl	800071c <HAL_GetTick>
 800584e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005850:	e008      	b.n	8005864 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005852:	f7fa ff63 	bl	800071c <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e086      	b.n	8005972 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005864:	4b45      	ldr	r3, [pc, #276]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005870:	4b42      	ldr	r3, [pc, #264]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	031b      	lsls	r3, r3, #12
 800587e:	493f      	ldr	r1, [pc, #252]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005880:	4313      	orrs	r3, r2
 8005882:	628b      	str	r3, [r1, #40]	; 0x28
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	3b01      	subs	r3, #1
 800588a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	3b01      	subs	r3, #1
 8005894:	025b      	lsls	r3, r3, #9
 8005896:	b29b      	uxth	r3, r3
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	3b01      	subs	r3, #1
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	061b      	lsls	r3, r3, #24
 80058b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058b4:	4931      	ldr	r1, [pc, #196]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058ba:	4b30      	ldr	r3, [pc, #192]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	492d      	ldr	r1, [pc, #180]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058cc:	4b2b      	ldr	r3, [pc, #172]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	f023 0220 	bic.w	r2, r3, #32
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	4928      	ldr	r1, [pc, #160]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058e4:	f023 0310 	bic.w	r3, r3, #16
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ee:	4b24      	ldr	r3, [pc, #144]	; (8005980 <RCCEx_PLL2_Config+0x160>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	69d2      	ldr	r2, [r2, #28]
 80058f6:	00d2      	lsls	r2, r2, #3
 80058f8:	4920      	ldr	r1, [pc, #128]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a1e      	ldr	r2, [pc, #120]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005904:	f043 0310 	orr.w	r3, r3, #16
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800591c:	e00f      	b.n	800593e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d106      	bne.n	8005932 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a14      	ldr	r2, [pc, #80]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 800592a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005930:	e005      	b.n	800593e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	4a11      	ldr	r2, [pc, #68]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800593c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a0e      	ldr	r2, [pc, #56]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fa fee7 	bl	800071c <HAL_GetTick>
 800594e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005950:	e008      	b.n	8005964 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005952:	f7fa fee3 	bl	800071c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
 8005980:	ffff0007 	.word	0xffff0007

08005984 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005992:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d101      	bne.n	80059a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e099      	b.n	8005ad6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059a2:	4b4f      	ldr	r3, [pc, #316]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a4e      	ldr	r2, [pc, #312]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ae:	f7fa feb5 	bl	800071c <HAL_GetTick>
 80059b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059b6:	f7fa feb1 	bl	800071c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e086      	b.n	8005ad6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059c8:	4b45      	ldr	r3, [pc, #276]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059d4:	4b42      	ldr	r3, [pc, #264]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	051b      	lsls	r3, r3, #20
 80059e2:	493f      	ldr	r1, [pc, #252]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	628b      	str	r3, [r1, #40]	; 0x28
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	025b      	lsls	r3, r3, #9
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	061b      	lsls	r3, r3, #24
 8005a14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a18:	4931      	ldr	r1, [pc, #196]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a1e:	4b30      	ldr	r3, [pc, #192]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	492d      	ldr	r1, [pc, #180]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a30:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	4928      	ldr	r1, [pc, #160]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a42:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4a26      	ldr	r2, [pc, #152]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <RCCEx_PLL3_Config+0x160>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	69d2      	ldr	r2, [r2, #28]
 8005a5a:	00d2      	lsls	r2, r2, #3
 8005a5c:	4920      	ldr	r1, [pc, #128]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a62:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a80:	e00f      	b.n	8005aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d106      	bne.n	8005a96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a94:	e005      	b.n	8005aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aae:	f7fa fe35 	bl	800071c <HAL_GetTick>
 8005ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab4:	e008      	b.n	8005ac8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ab6:	f7fa fe31 	bl	800071c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e006      	b.n	8005ad6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	ffff0007 	.word	0xffff0007

08005ae8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e10f      	b.n	8005d1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a87      	ldr	r2, [pc, #540]	; (8005d24 <HAL_SPI_Init+0x23c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <HAL_SPI_Init+0x42>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a86      	ldr	r2, [pc, #536]	; (8005d28 <HAL_SPI_Init+0x240>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00a      	beq.n	8005b2a <HAL_SPI_Init+0x42>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a84      	ldr	r2, [pc, #528]	; (8005d2c <HAL_SPI_Init+0x244>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d005      	beq.n	8005b2a <HAL_SPI_Init+0x42>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b0f      	cmp	r3, #15
 8005b24:	d901      	bls.n	8005b2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0f7      	b.n	8005d1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f900 	bl	8005d30 <SPI_GetPacketSize>
 8005b30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a7b      	ldr	r2, [pc, #492]	; (8005d24 <HAL_SPI_Init+0x23c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00c      	beq.n	8005b56 <HAL_SPI_Init+0x6e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a79      	ldr	r2, [pc, #484]	; (8005d28 <HAL_SPI_Init+0x240>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <HAL_SPI_Init+0x6e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a78      	ldr	r2, [pc, #480]	; (8005d2c <HAL_SPI_Init+0x244>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_Init+0x6e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d811      	bhi.n	8005b7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b5a:	4a72      	ldr	r2, [pc, #456]	; (8005d24 <HAL_SPI_Init+0x23c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a70      	ldr	r2, [pc, #448]	; (8005d28 <HAL_SPI_Init+0x240>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_SPI_Init+0x8c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a6f      	ldr	r2, [pc, #444]	; (8005d2c <HAL_SPI_Init+0x244>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d104      	bne.n	8005b7e <HAL_SPI_Init+0x96>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d901      	bls.n	8005b7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e0cd      	b.n	8005d1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f002 fe34 	bl	8008800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005bba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc4:	d119      	bne.n	8005bfa <HAL_SPI_Init+0x112>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bce:	d103      	bne.n	8005bd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10c      	bne.n	8005bfa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be8:	d107      	bne.n	8005bfa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00f      	beq.n	8005c26 <HAL_SPI_Init+0x13e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d90b      	bls.n	8005c26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e007      	b.n	8005c36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69da      	ldr	r2, [r3, #28]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	ea42 0103 	orr.w	r1, r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	ea42 0103 	orr.w	r1, r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d113      	bne.n	8005cd6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cd4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40013000 	.word	0x40013000
 8005d28:	40003800 	.word	0x40003800
 8005d2c:	40003c00 	.word	0x40003c00

08005d30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	3307      	adds	r3, #7
 8005d4e:	08db      	lsrs	r3, r3, #3
 8005d50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e049      	b.n	8005e0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 fdc5 	bl	800891c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f000 faa3 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e049      	b.n	8005eba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f841 	bl	8005ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f000 fa4c 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e0ff      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b14      	cmp	r3, #20
 8005f02:	f200 80f0 	bhi.w	80060e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	080060e7 	.word	0x080060e7
 8005f14:	080060e7 	.word	0x080060e7
 8005f18:	080060e7 	.word	0x080060e7
 8005f1c:	08005fa1 	.word	0x08005fa1
 8005f20:	080060e7 	.word	0x080060e7
 8005f24:	080060e7 	.word	0x080060e7
 8005f28:	080060e7 	.word	0x080060e7
 8005f2c:	08005fe3 	.word	0x08005fe3
 8005f30:	080060e7 	.word	0x080060e7
 8005f34:	080060e7 	.word	0x080060e7
 8005f38:	080060e7 	.word	0x080060e7
 8005f3c:	08006023 	.word	0x08006023
 8005f40:	080060e7 	.word	0x080060e7
 8005f44:	080060e7 	.word	0x080060e7
 8005f48:	080060e7 	.word	0x080060e7
 8005f4c:	08006065 	.word	0x08006065
 8005f50:	080060e7 	.word	0x080060e7
 8005f54:	080060e7 	.word	0x080060e7
 8005f58:	080060e7 	.word	0x080060e7
 8005f5c:	080060a5 	.word	0x080060a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fa68 	bl	800643c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0208 	orr.w	r2, r2, #8
 8005f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6999      	ldr	r1, [r3, #24]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	619a      	str	r2, [r3, #24]
      break;
 8005f9e:	e0a5      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fad8 	bl	800655c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6999      	ldr	r1, [r3, #24]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	021a      	lsls	r2, r3, #8
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	619a      	str	r2, [r3, #24]
      break;
 8005fe0:	e084      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fb41 	bl	8006670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0208 	orr.w	r2, r2, #8
 8005ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0204 	bic.w	r2, r2, #4
 800600c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	61da      	str	r2, [r3, #28]
      break;
 8006020:	e064      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fba9 	bl	8006780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800603c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69d9      	ldr	r1, [r3, #28]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	021a      	lsls	r2, r3, #8
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	61da      	str	r2, [r3, #28]
      break;
 8006062:	e043      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fbf2 	bl	8006854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0208 	orr.w	r2, r2, #8
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0204 	bic.w	r2, r2, #4
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060a2:	e023      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fc36 	bl	800691c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060e4:	e002      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop

08006100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIM_ConfigClockSource+0x1c>
 8006118:	2302      	movs	r3, #2
 800611a:	e0dc      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4b6a      	ldr	r3, [pc, #424]	; (80062e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a64      	ldr	r2, [pc, #400]	; (80062e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	f000 80a9 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006158:	4a62      	ldr	r2, [pc, #392]	; (80062e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	f200 80ae 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006160:	4a61      	ldr	r2, [pc, #388]	; (80062e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	f000 80a1 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006168:	4a5f      	ldr	r2, [pc, #380]	; (80062e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	f200 80a6 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006170:	4a5e      	ldr	r2, [pc, #376]	; (80062ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f000 8099 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006178:	4a5c      	ldr	r2, [pc, #368]	; (80062ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f200 809e 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006180:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006184:	f000 8091 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800618c:	f200 8096 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006194:	f000 8089 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619c:	f200 808e 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a4:	d03e      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x124>
 80061a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061aa:	f200 8087 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	f000 8086 	beq.w	80062c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	d87f      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d01a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xf6>
 80061c0:	2b70      	cmp	r3, #112	; 0x70
 80061c2:	d87b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d050      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x16a>
 80061c8:	2b60      	cmp	r3, #96	; 0x60
 80061ca:	d877      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d03c      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x14a>
 80061d0:	2b50      	cmp	r3, #80	; 0x50
 80061d2:	d873      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d058      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x18a>
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d86f      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d064      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061e0:	2b30      	cmp	r3, #48	; 0x30
 80061e2:	d86b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d060      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	d867      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05c      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d05a      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061f4:	e062      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6899      	ldr	r1, [r3, #8]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f000 fc6d 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	609a      	str	r2, [r3, #8]
      break;
 8006222:	e04f      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	6899      	ldr	r1, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f000 fc56 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006246:	609a      	str	r2, [r3, #8]
      break;
 8006248:	e03c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 fbc6 	bl	80069e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2150      	movs	r1, #80	; 0x50
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fc20 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 8006268:	e02c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 fbe5 	bl	8006a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2160      	movs	r1, #96	; 0x60
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fc10 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 8006288:	e01c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	461a      	mov	r2, r3
 8006298:	f000 fba6 	bl	80069e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fc00 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 80062a8:	e00c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f000 fbf7 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 80062ba:	e003      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e000      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80062c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	ffceff88 	.word	0xffceff88
 80062e4:	00100040 	.word	0x00100040
 80062e8:	00100030 	.word	0x00100030
 80062ec:	00100020 	.word	0x00100020

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a44      	ldr	r2, [pc, #272]	; (8006414 <TIM_Base_SetConfig+0x124>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d00f      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a41      	ldr	r2, [pc, #260]	; (8006418 <TIM_Base_SetConfig+0x128>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00b      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a40      	ldr	r2, [pc, #256]	; (800641c <TIM_Base_SetConfig+0x12c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3f      	ldr	r2, [pc, #252]	; (8006420 <TIM_Base_SetConfig+0x130>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3e      	ldr	r2, [pc, #248]	; (8006424 <TIM_Base_SetConfig+0x134>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d108      	bne.n	8006342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a33      	ldr	r2, [pc, #204]	; (8006414 <TIM_Base_SetConfig+0x124>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d027      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006350:	d023      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a30      	ldr	r2, [pc, #192]	; (8006418 <TIM_Base_SetConfig+0x128>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01f      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TIM_Base_SetConfig+0x12c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01b      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <TIM_Base_SetConfig+0x130>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d017      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <TIM_Base_SetConfig+0x134>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <TIM_Base_SetConfig+0x138>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2b      	ldr	r2, [pc, #172]	; (800642c <TIM_Base_SetConfig+0x13c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <TIM_Base_SetConfig+0x140>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a29      	ldr	r2, [pc, #164]	; (8006434 <TIM_Base_SetConfig+0x144>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a28      	ldr	r2, [pc, #160]	; (8006438 <TIM_Base_SetConfig+0x148>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a10      	ldr	r2, [pc, #64]	; (8006414 <TIM_Base_SetConfig+0x124>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00f      	beq.n	80063f8 <TIM_Base_SetConfig+0x108>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a12      	ldr	r2, [pc, #72]	; (8006424 <TIM_Base_SetConfig+0x134>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00b      	beq.n	80063f8 <TIM_Base_SetConfig+0x108>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a11      	ldr	r2, [pc, #68]	; (8006428 <TIM_Base_SetConfig+0x138>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d007      	beq.n	80063f8 <TIM_Base_SetConfig+0x108>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <TIM_Base_SetConfig+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_Base_SetConfig+0x108>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <TIM_Base_SetConfig+0x140>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d103      	bne.n	8006400 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	615a      	str	r2, [r3, #20]
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40010000 	.word	0x40010000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40010400 	.word	0x40010400
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	4000e000 	.word	0x4000e000
 8006438:	4000e400 	.word	0x4000e400

0800643c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4b37      	ldr	r3, [pc, #220]	; (8006544 <TIM_OC1_SetConfig+0x108>)
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 0302 	bic.w	r3, r3, #2
 8006484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2d      	ldr	r2, [pc, #180]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2c      	ldr	r2, [pc, #176]	; (800654c <TIM_OC1_SetConfig+0x110>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1b      	ldr	r2, [pc, #108]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d111      	bne.n	800651e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	fffeff8f 	.word	0xfffeff8f
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4b34      	ldr	r3, [pc, #208]	; (8006658 <TIM_OC2_SetConfig+0xfc>)
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0320 	bic.w	r3, r3, #32
 80065a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a29      	ldr	r2, [pc, #164]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC2_SetConfig+0x68>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a28      	ldr	r2, [pc, #160]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10d      	bne.n	80065e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a1e      	ldr	r2, [pc, #120]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <TIM_OC2_SetConfig+0x108>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1b      	ldr	r2, [pc, #108]	; (8006668 <TIM_OC2_SetConfig+0x10c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1a      	ldr	r2, [pc, #104]	; (800666c <TIM_OC2_SetConfig+0x110>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d113      	bne.n	8006630 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800660e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	feff8fff 	.word	0xfeff8fff
 800665c:	40010000 	.word	0x40010000
 8006660:	40010400 	.word	0x40010400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4b33      	ldr	r3, [pc, #204]	; (8006768 <TIM_OC3_SetConfig+0xf8>)
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a28      	ldr	r2, [pc, #160]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC3_SetConfig+0x66>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d10d      	bne.n	80066f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00f      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00b      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <TIM_OC3_SetConfig+0x104>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d007      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <TIM_OC3_SetConfig+0x108>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d003      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <TIM_OC3_SetConfig+0x10c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d113      	bne.n	8006742 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	fffeff8f 	.word	0xfffeff8f
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <TIM_OC4_SetConfig+0xbc>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	031b      	lsls	r3, r3, #12
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <TIM_OC4_SetConfig+0xc0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <TIM_OC4_SetConfig+0xc4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <TIM_OC4_SetConfig+0xc8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a16      	ldr	r2, [pc, #88]	; (800684c <TIM_OC4_SetConfig+0xcc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <TIM_OC4_SetConfig+0xd0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	feff8fff 	.word	0xfeff8fff
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4b21      	ldr	r3, [pc, #132]	; (8006904 <TIM_OC5_SetConfig+0xb0>)
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a18      	ldr	r2, [pc, #96]	; (8006908 <TIM_OC5_SetConfig+0xb4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a17      	ldr	r2, [pc, #92]	; (800690c <TIM_OC5_SetConfig+0xb8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a16      	ldr	r2, [pc, #88]	; (8006910 <TIM_OC5_SetConfig+0xbc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <TIM_OC5_SetConfig+0xc0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a14      	ldr	r2, [pc, #80]	; (8006918 <TIM_OC5_SetConfig+0xc4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d109      	bne.n	80068de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	fffeff8f 	.word	0xfffeff8f
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4b22      	ldr	r3, [pc, #136]	; (80069d0 <TIM_OC6_SetConfig+0xb4>)
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800695e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	051b      	lsls	r3, r3, #20
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a19      	ldr	r2, [pc, #100]	; (80069d4 <TIM_OC6_SetConfig+0xb8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00f      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <TIM_OC6_SetConfig+0xbc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC6_SetConfig+0xc0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC6_SetConfig+0xc4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC6_SetConfig+0xc8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d109      	bne.n	80069a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	feff8fff 	.word	0xfeff8fff
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 030a 	bic.w	r3, r3, #10
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0210 	bic.w	r2, r3, #16
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <TIM_ITRx_SetConfig+0x38>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f043 0307 	orr.w	r3, r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	609a      	str	r2, [r3, #8]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	ffcfff8f 	.word	0xffcfff8f

08006ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e077      	b.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a35      	ldr	r2, [pc, #212]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a34      	ldr	r2, [pc, #208]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d108      	bne.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a25      	ldr	r2, [pc, #148]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02c      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bae:	d027      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a22      	ldr	r2, [pc, #136]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d022      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d01d      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d018      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1a      	ldr	r2, [pc, #104]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d013      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00e      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d009      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d004      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10c      	bne.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40001800 	.word	0x40001800
 8006c50:	40014000 	.word	0x40014000
 8006c54:	4000e000 	.word	0x4000e000
 8006c58:	4000e400 	.word	0x4000e400

08006c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e042      	b.n	8006cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d106      	bne.n	8006c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fea3 	bl	80089cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2224      	movs	r2, #36	; 0x24
 8006c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f82c 	bl	8006cfc <UART_SetConfig>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e022      	b.n	8006cf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fe8c 	bl	80079d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 ff13 	bl	8007b18 <UART_CheckIdleState>
 8006cf2:	4603      	mov	r3, r0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d00:	b092      	sub	sp, #72	; 0x48
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4bbe      	ldr	r3, [pc, #760]	; (8007024 <UART_SetConfig+0x328>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4ab3      	ldr	r2, [pc, #716]	; (8007028 <UART_SetConfig+0x32c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d64:	4313      	orrs	r3, r2
 8006d66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	4baf      	ldr	r3, [pc, #700]	; (800702c <UART_SetConfig+0x330>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	f023 010f 	bic.w	r1, r3, #15
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4aa6      	ldr	r2, [pc, #664]	; (8007030 <UART_SetConfig+0x334>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d177      	bne.n	8006e8c <UART_SetConfig+0x190>
 8006d9c:	4ba5      	ldr	r3, [pc, #660]	; (8007034 <UART_SetConfig+0x338>)
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006da4:	2b28      	cmp	r3, #40	; 0x28
 8006da6:	d86d      	bhi.n	8006e84 <UART_SetConfig+0x188>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0xb4>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006e55 	.word	0x08006e55
 8006db4:	08006e85 	.word	0x08006e85
 8006db8:	08006e85 	.word	0x08006e85
 8006dbc:	08006e85 	.word	0x08006e85
 8006dc0:	08006e85 	.word	0x08006e85
 8006dc4:	08006e85 	.word	0x08006e85
 8006dc8:	08006e85 	.word	0x08006e85
 8006dcc:	08006e85 	.word	0x08006e85
 8006dd0:	08006e5d 	.word	0x08006e5d
 8006dd4:	08006e85 	.word	0x08006e85
 8006dd8:	08006e85 	.word	0x08006e85
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006e85 	.word	0x08006e85
 8006de4:	08006e85 	.word	0x08006e85
 8006de8:	08006e85 	.word	0x08006e85
 8006dec:	08006e85 	.word	0x08006e85
 8006df0:	08006e65 	.word	0x08006e65
 8006df4:	08006e85 	.word	0x08006e85
 8006df8:	08006e85 	.word	0x08006e85
 8006dfc:	08006e85 	.word	0x08006e85
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006e85 	.word	0x08006e85
 8006e08:	08006e85 	.word	0x08006e85
 8006e0c:	08006e85 	.word	0x08006e85
 8006e10:	08006e6d 	.word	0x08006e6d
 8006e14:	08006e85 	.word	0x08006e85
 8006e18:	08006e85 	.word	0x08006e85
 8006e1c:	08006e85 	.word	0x08006e85
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006e85 	.word	0x08006e85
 8006e28:	08006e85 	.word	0x08006e85
 8006e2c:	08006e85 	.word	0x08006e85
 8006e30:	08006e75 	.word	0x08006e75
 8006e34:	08006e85 	.word	0x08006e85
 8006e38:	08006e85 	.word	0x08006e85
 8006e3c:	08006e85 	.word	0x08006e85
 8006e40:	08006e85 	.word	0x08006e85
 8006e44:	08006e85 	.word	0x08006e85
 8006e48:	08006e85 	.word	0x08006e85
 8006e4c:	08006e85 	.word	0x08006e85
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e326      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e322      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e31e      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e31a      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e74:	2320      	movs	r3, #32
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e316      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e312      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e30e      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a69      	ldr	r2, [pc, #420]	; (8007038 <UART_SetConfig+0x33c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d130      	bne.n	8006ef8 <UART_SetConfig+0x1fc>
 8006e96:	4b67      	ldr	r3, [pc, #412]	; (8007034 <UART_SetConfig+0x338>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d826      	bhi.n	8006ef0 <UART_SetConfig+0x1f4>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x1ac>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ec1 	.word	0x08006ec1
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	08006ed1 	.word	0x08006ed1
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ee1 	.word	0x08006ee1
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e2f0      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e2ec      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e2e8      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e2e4      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee6:	e2e0      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e2dc      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ef0:	2380      	movs	r3, #128	; 0x80
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e2d8      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a4f      	ldr	r2, [pc, #316]	; (800703c <UART_SetConfig+0x340>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d130      	bne.n	8006f64 <UART_SetConfig+0x268>
 8006f02:	4b4c      	ldr	r3, [pc, #304]	; (8007034 <UART_SetConfig+0x338>)
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d826      	bhi.n	8006f5c <UART_SetConfig+0x260>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <UART_SetConfig+0x218>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f2d 	.word	0x08006f2d
 8006f18:	08006f35 	.word	0x08006f35
 8006f1c:	08006f3d 	.word	0x08006f3d
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e2ba      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f34:	2304      	movs	r3, #4
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e2b6      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e2b2      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f44:	2310      	movs	r3, #16
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e2ae      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e2aa      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e2a6      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e2a2      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a35      	ldr	r2, [pc, #212]	; (8007040 <UART_SetConfig+0x344>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d130      	bne.n	8006fd0 <UART_SetConfig+0x2d4>
 8006f6e:	4b31      	ldr	r3, [pc, #196]	; (8007034 <UART_SetConfig+0x338>)
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d826      	bhi.n	8006fc8 <UART_SetConfig+0x2cc>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <UART_SetConfig+0x284>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f99 	.word	0x08006f99
 8006f84:	08006fa1 	.word	0x08006fa1
 8006f88:	08006fa9 	.word	0x08006fa9
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e284      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e280      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e27c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e278      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e274      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fc0:	2340      	movs	r3, #64	; 0x40
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e270      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e26c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1b      	ldr	r2, [pc, #108]	; (8007044 <UART_SetConfig+0x348>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d142      	bne.n	8007060 <UART_SetConfig+0x364>
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <UART_SetConfig+0x338>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	d838      	bhi.n	8007058 <UART_SetConfig+0x35c>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <UART_SetConfig+0x2f0>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007005 	.word	0x08007005
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007015 	.word	0x08007015
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007049 	.word	0x08007049
 8007000:	08007051 	.word	0x08007051
 8007004:	2300      	movs	r3, #0
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e24e      	b.n	80074aa <UART_SetConfig+0x7ae>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e24a      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e246      	b.n	80074aa <UART_SetConfig+0x7ae>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e242      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007024:	cfff69f3 	.word	0xcfff69f3
 8007028:	58000c00 	.word	0x58000c00
 800702c:	11fff4ff 	.word	0x11fff4ff
 8007030:	40011000 	.word	0x40011000
 8007034:	58024400 	.word	0x58024400
 8007038:	40004400 	.word	0x40004400
 800703c:	40004800 	.word	0x40004800
 8007040:	40004c00 	.word	0x40004c00
 8007044:	40005000 	.word	0x40005000
 8007048:	2320      	movs	r3, #32
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e22c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e228      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e224      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4ab1      	ldr	r2, [pc, #708]	; (800732c <UART_SetConfig+0x630>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d176      	bne.n	8007158 <UART_SetConfig+0x45c>
 800706a:	4bb1      	ldr	r3, [pc, #708]	; (8007330 <UART_SetConfig+0x634>)
 800706c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007072:	2b28      	cmp	r3, #40	; 0x28
 8007074:	d86c      	bhi.n	8007150 <UART_SetConfig+0x454>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <UART_SetConfig+0x380>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	08007121 	.word	0x08007121
 8007080:	08007151 	.word	0x08007151
 8007084:	08007151 	.word	0x08007151
 8007088:	08007151 	.word	0x08007151
 800708c:	08007151 	.word	0x08007151
 8007090:	08007151 	.word	0x08007151
 8007094:	08007151 	.word	0x08007151
 8007098:	08007151 	.word	0x08007151
 800709c:	08007129 	.word	0x08007129
 80070a0:	08007151 	.word	0x08007151
 80070a4:	08007151 	.word	0x08007151
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007151 	.word	0x08007151
 80070b4:	08007151 	.word	0x08007151
 80070b8:	08007151 	.word	0x08007151
 80070bc:	08007131 	.word	0x08007131
 80070c0:	08007151 	.word	0x08007151
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007151 	.word	0x08007151
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007151 	.word	0x08007151
 80070d4:	08007151 	.word	0x08007151
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007139 	.word	0x08007139
 80070e0:	08007151 	.word	0x08007151
 80070e4:	08007151 	.word	0x08007151
 80070e8:	08007151 	.word	0x08007151
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007151 	.word	0x08007151
 80070f4:	08007151 	.word	0x08007151
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007141 	.word	0x08007141
 8007100:	08007151 	.word	0x08007151
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007151 	.word	0x08007151
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007149 	.word	0x08007149
 8007120:	2301      	movs	r3, #1
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e1c0      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e1bc      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e1b8      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e1b4      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007140:	2320      	movs	r3, #32
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e1b0      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007148:	2340      	movs	r3, #64	; 0x40
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e1ac      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007150:	2380      	movs	r3, #128	; 0x80
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e1a8      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a75      	ldr	r2, [pc, #468]	; (8007334 <UART_SetConfig+0x638>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d130      	bne.n	80071c4 <UART_SetConfig+0x4c8>
 8007162:	4b73      	ldr	r3, [pc, #460]	; (8007330 <UART_SetConfig+0x634>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b05      	cmp	r3, #5
 800716c:	d826      	bhi.n	80071bc <UART_SetConfig+0x4c0>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x478>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	0800718d 	.word	0x0800718d
 8007178:	08007195 	.word	0x08007195
 800717c:	0800719d 	.word	0x0800719d
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071b5 	.word	0x080071b5
 800718c:	2300      	movs	r3, #0
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e18a      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e186      	b.n	80074aa <UART_SetConfig+0x7ae>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e182      	b.n	80074aa <UART_SetConfig+0x7ae>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e17e      	b.n	80074aa <UART_SetConfig+0x7ae>
 80071ac:	2320      	movs	r3, #32
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b2:	e17a      	b.n	80074aa <UART_SetConfig+0x7ae>
 80071b4:	2340      	movs	r3, #64	; 0x40
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ba:	e176      	b.n	80074aa <UART_SetConfig+0x7ae>
 80071bc:	2380      	movs	r3, #128	; 0x80
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e172      	b.n	80074aa <UART_SetConfig+0x7ae>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a5b      	ldr	r2, [pc, #364]	; (8007338 <UART_SetConfig+0x63c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d130      	bne.n	8007230 <UART_SetConfig+0x534>
 80071ce:	4b58      	ldr	r3, [pc, #352]	; (8007330 <UART_SetConfig+0x634>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d826      	bhi.n	8007228 <UART_SetConfig+0x52c>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0x4e4>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f9 	.word	0x080071f9
 80071e4:	08007201 	.word	0x08007201
 80071e8:	08007209 	.word	0x08007209
 80071ec:	08007211 	.word	0x08007211
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007221 	.word	0x08007221
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e154      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e150      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e14c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e148      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007218:	2320      	movs	r3, #32
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e144      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e140      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e13c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a41      	ldr	r2, [pc, #260]	; (800733c <UART_SetConfig+0x640>)
 8007236:	4293      	cmp	r3, r2
 8007238:	f040 8082 	bne.w	8007340 <UART_SetConfig+0x644>
 800723c:	4b3c      	ldr	r3, [pc, #240]	; (8007330 <UART_SetConfig+0x634>)
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007244:	2b28      	cmp	r3, #40	; 0x28
 8007246:	d86d      	bhi.n	8007324 <UART_SetConfig+0x628>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x554>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	080072f5 	.word	0x080072f5
 8007254:	08007325 	.word	0x08007325
 8007258:	08007325 	.word	0x08007325
 800725c:	08007325 	.word	0x08007325
 8007260:	08007325 	.word	0x08007325
 8007264:	08007325 	.word	0x08007325
 8007268:	08007325 	.word	0x08007325
 800726c:	08007325 	.word	0x08007325
 8007270:	080072fd 	.word	0x080072fd
 8007274:	08007325 	.word	0x08007325
 8007278:	08007325 	.word	0x08007325
 800727c:	08007325 	.word	0x08007325
 8007280:	08007325 	.word	0x08007325
 8007284:	08007325 	.word	0x08007325
 8007288:	08007325 	.word	0x08007325
 800728c:	08007325 	.word	0x08007325
 8007290:	08007305 	.word	0x08007305
 8007294:	08007325 	.word	0x08007325
 8007298:	08007325 	.word	0x08007325
 800729c:	08007325 	.word	0x08007325
 80072a0:	08007325 	.word	0x08007325
 80072a4:	08007325 	.word	0x08007325
 80072a8:	08007325 	.word	0x08007325
 80072ac:	08007325 	.word	0x08007325
 80072b0:	0800730d 	.word	0x0800730d
 80072b4:	08007325 	.word	0x08007325
 80072b8:	08007325 	.word	0x08007325
 80072bc:	08007325 	.word	0x08007325
 80072c0:	08007325 	.word	0x08007325
 80072c4:	08007325 	.word	0x08007325
 80072c8:	08007325 	.word	0x08007325
 80072cc:	08007325 	.word	0x08007325
 80072d0:	08007315 	.word	0x08007315
 80072d4:	08007325 	.word	0x08007325
 80072d8:	08007325 	.word	0x08007325
 80072dc:	08007325 	.word	0x08007325
 80072e0:	08007325 	.word	0x08007325
 80072e4:	08007325 	.word	0x08007325
 80072e8:	08007325 	.word	0x08007325
 80072ec:	08007325 	.word	0x08007325
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fa:	e0d6      	b.n	80074aa <UART_SetConfig+0x7ae>
 80072fc:	2304      	movs	r3, #4
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007302:	e0d2      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007304:	2308      	movs	r3, #8
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730a:	e0ce      	b.n	80074aa <UART_SetConfig+0x7ae>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007312:	e0ca      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007314:	2320      	movs	r3, #32
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731a:	e0c6      	b.n	80074aa <UART_SetConfig+0x7ae>
 800731c:	2340      	movs	r3, #64	; 0x40
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007322:	e0c2      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732a:	e0be      	b.n	80074aa <UART_SetConfig+0x7ae>
 800732c:	40011400 	.word	0x40011400
 8007330:	58024400 	.word	0x58024400
 8007334:	40007800 	.word	0x40007800
 8007338:	40007c00 	.word	0x40007c00
 800733c:	40011800 	.word	0x40011800
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4aad      	ldr	r2, [pc, #692]	; (80075fc <UART_SetConfig+0x900>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d176      	bne.n	8007438 <UART_SetConfig+0x73c>
 800734a:	4bad      	ldr	r3, [pc, #692]	; (8007600 <UART_SetConfig+0x904>)
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007352:	2b28      	cmp	r3, #40	; 0x28
 8007354:	d86c      	bhi.n	8007430 <UART_SetConfig+0x734>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x660>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	08007401 	.word	0x08007401
 8007360:	08007431 	.word	0x08007431
 8007364:	08007431 	.word	0x08007431
 8007368:	08007431 	.word	0x08007431
 800736c:	08007431 	.word	0x08007431
 8007370:	08007431 	.word	0x08007431
 8007374:	08007431 	.word	0x08007431
 8007378:	08007431 	.word	0x08007431
 800737c:	08007409 	.word	0x08007409
 8007380:	08007431 	.word	0x08007431
 8007384:	08007431 	.word	0x08007431
 8007388:	08007431 	.word	0x08007431
 800738c:	08007431 	.word	0x08007431
 8007390:	08007431 	.word	0x08007431
 8007394:	08007431 	.word	0x08007431
 8007398:	08007431 	.word	0x08007431
 800739c:	08007411 	.word	0x08007411
 80073a0:	08007431 	.word	0x08007431
 80073a4:	08007431 	.word	0x08007431
 80073a8:	08007431 	.word	0x08007431
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007431 	.word	0x08007431
 80073b4:	08007431 	.word	0x08007431
 80073b8:	08007431 	.word	0x08007431
 80073bc:	08007419 	.word	0x08007419
 80073c0:	08007431 	.word	0x08007431
 80073c4:	08007431 	.word	0x08007431
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007431 	.word	0x08007431
 80073d0:	08007431 	.word	0x08007431
 80073d4:	08007431 	.word	0x08007431
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007421 	.word	0x08007421
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007431 	.word	0x08007431
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007429 	.word	0x08007429
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e050      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e04c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e048      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e044      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e040      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e03c      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e038      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a71      	ldr	r2, [pc, #452]	; (8007604 <UART_SetConfig+0x908>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d130      	bne.n	80074a4 <UART_SetConfig+0x7a8>
 8007442:	4b6f      	ldr	r3, [pc, #444]	; (8007600 <UART_SetConfig+0x904>)
 8007444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b05      	cmp	r3, #5
 800744c:	d826      	bhi.n	800749c <UART_SetConfig+0x7a0>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x758>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	0800746d 	.word	0x0800746d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	2302      	movs	r3, #2
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e01a      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e016      	b.n	80074aa <UART_SetConfig+0x7ae>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e012      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e00e      	b.n	80074aa <UART_SetConfig+0x7ae>
 800748c:	2320      	movs	r3, #32
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007492:	e00a      	b.n	80074aa <UART_SetConfig+0x7ae>
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749a:	e006      	b.n	80074aa <UART_SetConfig+0x7ae>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e002      	b.n	80074aa <UART_SetConfig+0x7ae>
 80074a4:	2380      	movs	r3, #128	; 0x80
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a55      	ldr	r2, [pc, #340]	; (8007604 <UART_SetConfig+0x908>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	f040 80f8 	bne.w	80076a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	dc46      	bgt.n	800754c <UART_SetConfig+0x850>
 80074be:	2b02      	cmp	r3, #2
 80074c0:	db75      	blt.n	80075ae <UART_SetConfig+0x8b2>
 80074c2:	3b02      	subs	r3, #2
 80074c4:	2b1e      	cmp	r3, #30
 80074c6:	d872      	bhi.n	80075ae <UART_SetConfig+0x8b2>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0x7d4>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	08007553 	.word	0x08007553
 80074d4:	080075af 	.word	0x080075af
 80074d8:	0800755b 	.word	0x0800755b
 80074dc:	080075af 	.word	0x080075af
 80074e0:	080075af 	.word	0x080075af
 80074e4:	080075af 	.word	0x080075af
 80074e8:	0800756b 	.word	0x0800756b
 80074ec:	080075af 	.word	0x080075af
 80074f0:	080075af 	.word	0x080075af
 80074f4:	080075af 	.word	0x080075af
 80074f8:	080075af 	.word	0x080075af
 80074fc:	080075af 	.word	0x080075af
 8007500:	080075af 	.word	0x080075af
 8007504:	080075af 	.word	0x080075af
 8007508:	0800757b 	.word	0x0800757b
 800750c:	080075af 	.word	0x080075af
 8007510:	080075af 	.word	0x080075af
 8007514:	080075af 	.word	0x080075af
 8007518:	080075af 	.word	0x080075af
 800751c:	080075af 	.word	0x080075af
 8007520:	080075af 	.word	0x080075af
 8007524:	080075af 	.word	0x080075af
 8007528:	080075af 	.word	0x080075af
 800752c:	080075af 	.word	0x080075af
 8007530:	080075af 	.word	0x080075af
 8007534:	080075af 	.word	0x080075af
 8007538:	080075af 	.word	0x080075af
 800753c:	080075af 	.word	0x080075af
 8007540:	080075af 	.word	0x080075af
 8007544:	080075af 	.word	0x080075af
 8007548:	080075a1 	.word	0x080075a1
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d02a      	beq.n	80075a6 <UART_SetConfig+0x8aa>
 8007550:	e02d      	b.n	80075ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007552:	f7fd fd55 	bl	8005000 <HAL_RCCEx_GetD3PCLK1Freq>
 8007556:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007558:	e02f      	b.n	80075ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800755a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755e:	4618      	mov	r0, r3
 8007560:	f7fd fd64 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007568:	e027      	b.n	80075ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800756a:	f107 0318 	add.w	r3, r7, #24
 800756e:	4618      	mov	r0, r3
 8007570:	f7fd feb0 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007578:	e01f      	b.n	80075ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800757a:	4b21      	ldr	r3, [pc, #132]	; (8007600 <UART_SetConfig+0x904>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007586:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <UART_SetConfig+0x904>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	08db      	lsrs	r3, r3, #3
 800758c:	f003 0303 	and.w	r3, r3, #3
 8007590:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <UART_SetConfig+0x90c>)
 8007592:	fa22 f303 	lsr.w	r3, r2, r3
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007598:	e00f      	b.n	80075ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <UART_SetConfig+0x90c>)
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759e:	e00c      	b.n	80075ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075a0:	4b1a      	ldr	r3, [pc, #104]	; (800760c <UART_SetConfig+0x910>)
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ac:	e005      	b.n	80075ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 81ee 	beq.w	800799e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	4a12      	ldr	r2, [pc, #72]	; (8007610 <UART_SetConfig+0x914>)
 80075c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4413      	add	r3, r2
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d305      	bcc.n	80075f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d910      	bls.n	8007614 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075f8:	e1d1      	b.n	800799e <UART_SetConfig+0xca2>
 80075fa:	bf00      	nop
 80075fc:	40011c00 	.word	0x40011c00
 8007600:	58024400 	.word	0x58024400
 8007604:	58000c00 	.word	0x58000c00
 8007608:	03d09000 	.word	0x03d09000
 800760c:	003d0900 	.word	0x003d0900
 8007610:	08008ca8 	.word	0x08008ca8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007616:	2200      	movs	r2, #0
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	60fa      	str	r2, [r7, #12]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	4ac0      	ldr	r2, [pc, #768]	; (8007924 <UART_SetConfig+0xc28>)
 8007622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007626:	b29b      	uxth	r3, r3
 8007628:	2200      	movs	r2, #0
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007636:	f7f8 fe69 	bl	800030c <__aeabi_uldivmod>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4610      	mov	r0, r2
 8007640:	4619      	mov	r1, r3
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	020b      	lsls	r3, r1, #8
 800764c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007650:	0202      	lsls	r2, r0, #8
 8007652:	6979      	ldr	r1, [r7, #20]
 8007654:	6849      	ldr	r1, [r1, #4]
 8007656:	0849      	lsrs	r1, r1, #1
 8007658:	2000      	movs	r0, #0
 800765a:	460c      	mov	r4, r1
 800765c:	4605      	mov	r5, r0
 800765e:	eb12 0804 	adds.w	r8, r2, r4
 8007662:	eb43 0905 	adc.w	r9, r3, r5
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	469a      	mov	sl, r3
 800766e:	4693      	mov	fp, r2
 8007670:	4652      	mov	r2, sl
 8007672:	465b      	mov	r3, fp
 8007674:	4640      	mov	r0, r8
 8007676:	4649      	mov	r1, r9
 8007678:	f7f8 fe48 	bl	800030c <__aeabi_uldivmod>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4613      	mov	r3, r2
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768a:	d308      	bcc.n	800769e <UART_SetConfig+0x9a2>
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007692:	d204      	bcs.n	800769e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769a:	60da      	str	r2, [r3, #12]
 800769c:	e17f      	b.n	800799e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076a4:	e17b      	b.n	800799e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ae:	f040 80bd 	bne.w	800782c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80076b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	dc48      	bgt.n	800774c <UART_SetConfig+0xa50>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	db7b      	blt.n	80077b6 <UART_SetConfig+0xaba>
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d879      	bhi.n	80077b6 <UART_SetConfig+0xaba>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0x9cc>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	08007753 	.word	0x08007753
 80076cc:	0800775b 	.word	0x0800775b
 80076d0:	080077b7 	.word	0x080077b7
 80076d4:	080077b7 	.word	0x080077b7
 80076d8:	08007763 	.word	0x08007763
 80076dc:	080077b7 	.word	0x080077b7
 80076e0:	080077b7 	.word	0x080077b7
 80076e4:	080077b7 	.word	0x080077b7
 80076e8:	08007773 	.word	0x08007773
 80076ec:	080077b7 	.word	0x080077b7
 80076f0:	080077b7 	.word	0x080077b7
 80076f4:	080077b7 	.word	0x080077b7
 80076f8:	080077b7 	.word	0x080077b7
 80076fc:	080077b7 	.word	0x080077b7
 8007700:	080077b7 	.word	0x080077b7
 8007704:	080077b7 	.word	0x080077b7
 8007708:	08007783 	.word	0x08007783
 800770c:	080077b7 	.word	0x080077b7
 8007710:	080077b7 	.word	0x080077b7
 8007714:	080077b7 	.word	0x080077b7
 8007718:	080077b7 	.word	0x080077b7
 800771c:	080077b7 	.word	0x080077b7
 8007720:	080077b7 	.word	0x080077b7
 8007724:	080077b7 	.word	0x080077b7
 8007728:	080077b7 	.word	0x080077b7
 800772c:	080077b7 	.word	0x080077b7
 8007730:	080077b7 	.word	0x080077b7
 8007734:	080077b7 	.word	0x080077b7
 8007738:	080077b7 	.word	0x080077b7
 800773c:	080077b7 	.word	0x080077b7
 8007740:	080077b7 	.word	0x080077b7
 8007744:	080077b7 	.word	0x080077b7
 8007748:	080077a9 	.word	0x080077a9
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d02e      	beq.n	80077ae <UART_SetConfig+0xab2>
 8007750:	e031      	b.n	80077b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007752:	f7fb fdb7 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8007756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007758:	e033      	b.n	80077c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800775a:	f7fb fdc9 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 800775e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007760:	e02f      	b.n	80077c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007766:	4618      	mov	r0, r3
 8007768:	f7fd fc60 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007770:	e027      	b.n	80077c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007772:	f107 0318 	add.w	r3, r7, #24
 8007776:	4618      	mov	r0, r3
 8007778:	f7fd fdac 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007780:	e01f      	b.n	80077c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007782:	4b69      	ldr	r3, [pc, #420]	; (8007928 <UART_SetConfig+0xc2c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800778e:	4b66      	ldr	r3, [pc, #408]	; (8007928 <UART_SetConfig+0xc2c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	08db      	lsrs	r3, r3, #3
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	4a64      	ldr	r2, [pc, #400]	; (800792c <UART_SetConfig+0xc30>)
 800779a:	fa22 f303 	lsr.w	r3, r2, r3
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077a0:	e00f      	b.n	80077c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80077a2:	4b62      	ldr	r3, [pc, #392]	; (800792c <UART_SetConfig+0xc30>)
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a6:	e00c      	b.n	80077c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077a8:	4b61      	ldr	r3, [pc, #388]	; (8007930 <UART_SetConfig+0xc34>)
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ac:	e009      	b.n	80077c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b4:	e005      	b.n	80077c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80ea 	beq.w	800799e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	4a55      	ldr	r2, [pc, #340]	; (8007924 <UART_SetConfig+0xc28>)
 80077d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077dc:	005a      	lsls	r2, r3, #1
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	085b      	lsrs	r3, r3, #1
 80077e4:	441a      	add	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	2b0f      	cmp	r3, #15
 80077f4:	d916      	bls.n	8007824 <UART_SetConfig+0xb28>
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fc:	d212      	bcs.n	8007824 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	b29b      	uxth	r3, r3
 8007802:	f023 030f 	bic.w	r3, r3, #15
 8007806:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	b29b      	uxth	r3, r3
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	b29a      	uxth	r2, r3
 8007814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007816:	4313      	orrs	r3, r2
 8007818:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	e0bc      	b.n	800799e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800782a:	e0b8      	b.n	800799e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800782c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007830:	2b20      	cmp	r3, #32
 8007832:	dc4b      	bgt.n	80078cc <UART_SetConfig+0xbd0>
 8007834:	2b00      	cmp	r3, #0
 8007836:	f2c0 8087 	blt.w	8007948 <UART_SetConfig+0xc4c>
 800783a:	2b20      	cmp	r3, #32
 800783c:	f200 8084 	bhi.w	8007948 <UART_SetConfig+0xc4c>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <UART_SetConfig+0xb4c>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	080078d3 	.word	0x080078d3
 800784c:	080078db 	.word	0x080078db
 8007850:	08007949 	.word	0x08007949
 8007854:	08007949 	.word	0x08007949
 8007858:	080078e3 	.word	0x080078e3
 800785c:	08007949 	.word	0x08007949
 8007860:	08007949 	.word	0x08007949
 8007864:	08007949 	.word	0x08007949
 8007868:	080078f3 	.word	0x080078f3
 800786c:	08007949 	.word	0x08007949
 8007870:	08007949 	.word	0x08007949
 8007874:	08007949 	.word	0x08007949
 8007878:	08007949 	.word	0x08007949
 800787c:	08007949 	.word	0x08007949
 8007880:	08007949 	.word	0x08007949
 8007884:	08007949 	.word	0x08007949
 8007888:	08007903 	.word	0x08007903
 800788c:	08007949 	.word	0x08007949
 8007890:	08007949 	.word	0x08007949
 8007894:	08007949 	.word	0x08007949
 8007898:	08007949 	.word	0x08007949
 800789c:	08007949 	.word	0x08007949
 80078a0:	08007949 	.word	0x08007949
 80078a4:	08007949 	.word	0x08007949
 80078a8:	08007949 	.word	0x08007949
 80078ac:	08007949 	.word	0x08007949
 80078b0:	08007949 	.word	0x08007949
 80078b4:	08007949 	.word	0x08007949
 80078b8:	08007949 	.word	0x08007949
 80078bc:	08007949 	.word	0x08007949
 80078c0:	08007949 	.word	0x08007949
 80078c4:	08007949 	.word	0x08007949
 80078c8:	0800793b 	.word	0x0800793b
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d037      	beq.n	8007940 <UART_SetConfig+0xc44>
 80078d0:	e03a      	b.n	8007948 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d2:	f7fb fcf7 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 80078d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078d8:	e03c      	b.n	8007954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078da:	f7fb fd09 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 80078de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078e0:	e038      	b.n	8007954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd fba0 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f0:	e030      	b.n	8007954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f2:	f107 0318 	add.w	r3, r7, #24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fd fcec 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007900:	e028      	b.n	8007954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <UART_SetConfig+0xc2c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d012      	beq.n	8007934 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <UART_SetConfig+0xc2c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	08db      	lsrs	r3, r3, #3
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	4a04      	ldr	r2, [pc, #16]	; (800792c <UART_SetConfig+0xc30>)
 800791a:	fa22 f303 	lsr.w	r3, r2, r3
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007920:	e018      	b.n	8007954 <UART_SetConfig+0xc58>
 8007922:	bf00      	nop
 8007924:	08008ca8 	.word	0x08008ca8
 8007928:	58024400 	.word	0x58024400
 800792c:	03d09000 	.word	0x03d09000
 8007930:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <UART_SetConfig+0xccc>)
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007938:	e00c      	b.n	8007954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800793a:	4b24      	ldr	r3, [pc, #144]	; (80079cc <UART_SetConfig+0xcd0>)
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800793e:	e009      	b.n	8007954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007946:	e005      	b.n	8007954 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007952:	bf00      	nop
    }

    if (pclk != 0U)
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d021      	beq.n	800799e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <UART_SetConfig+0xcd4>)
 8007960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007964:	461a      	mov	r2, r3
 8007966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007968:	fbb3 f2f2 	udiv	r2, r3, r2
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	441a      	add	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	fbb2 f3f3 	udiv	r3, r2, r3
 800797c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	2b0f      	cmp	r3, #15
 8007982:	d909      	bls.n	8007998 <UART_SetConfig+0xc9c>
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798a:	d205      	bcs.n	8007998 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	b29a      	uxth	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e002      	b.n	800799e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2200      	movs	r2, #0
 80079b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2200      	movs	r2, #0
 80079b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80079ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3748      	adds	r7, #72	; 0x48
 80079c2:	46bd      	mov	sp, r7
 80079c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079c8:	03d09000 	.word	0x03d09000
 80079cc:	003d0900 	.word	0x003d0900
 80079d0:	08008ca8 	.word	0x08008ca8

080079d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad2:	d10a      	bne.n	8007aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b098      	sub	sp, #96	; 0x60
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b28:	f7f8 fdf8 	bl	800071c <HAL_GetTick>
 8007b2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d12f      	bne.n	8007b9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b44:	2200      	movs	r2, #0
 8007b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f88e 	bl	8007c6c <UART_WaitOnFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d022      	beq.n	8007b9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
 8007b76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e6      	bne.n	8007b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e063      	b.n	8007c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d149      	bne.n	8007c3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007baa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f857 	bl	8007c6c <UART_WaitOnFlagUntilTimeout>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d03c      	beq.n	8007c3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30
 8007be4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e6      	bne.n	8007bc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c16:	61fa      	str	r2, [r7, #28]
 8007c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	69b9      	ldr	r1, [r7, #24]
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	617b      	str	r3, [r7, #20]
   return(result);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e5      	bne.n	8007bf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e012      	b.n	8007c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3758      	adds	r7, #88	; 0x58
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7c:	e049      	b.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d045      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c86:	f7f8 fd49 	bl	800071c <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d302      	bcc.n	8007c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e048      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d031      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d110      	bne.n	8007cde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f839 	bl	8007d3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e029      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cec:	d111      	bne.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f81f 	bl	8007d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e00f      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d0a6      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b095      	sub	sp, #84	; 0x54
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d62:	643b      	str	r3, [r7, #64]	; 0x40
 8007d64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <UART_EndRxTransfer+0xc8>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e5      	bne.n	8007d76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d118      	bne.n	8007de4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007df8:	bf00      	nop
 8007dfa:	3754      	adds	r7, #84	; 0x54
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	effffffe 	.word	0xeffffffe

08007e08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_UARTEx_DisableFifoMode+0x16>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e027      	b.n	8007e6e <HAL_UARTEx_DisableFifoMode+0x66>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2224      	movs	r2, #36	; 0x24
 8007e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e02d      	b.n	8007eee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2224      	movs	r2, #36	; 0x24
 8007e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f850 	bl	8007f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e02d      	b.n	8007f6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2224      	movs	r2, #36	; 0x24
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f812 	bl	8007f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d108      	bne.n	8007f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f94:	e031      	b.n	8007ffa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f96:	2310      	movs	r3, #16
 8007f98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f9a:	2310      	movs	r3, #16
 8007f9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	0e5b      	lsrs	r3, r3, #25
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	0f5b      	lsrs	r3, r3, #29
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	7b3a      	ldrb	r2, [r7, #12]
 8007fc2:	4911      	ldr	r1, [pc, #68]	; (8008008 <UARTEx_SetNbDataToProcess+0x94>)
 8007fc4:	5c8a      	ldrb	r2, [r1, r2]
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fca:	7b3a      	ldrb	r2, [r7, #12]
 8007fcc:	490f      	ldr	r1, [pc, #60]	; (800800c <UARTEx_SetNbDataToProcess+0x98>)
 8007fce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	7b7a      	ldrb	r2, [r7, #13]
 8007fe0:	4909      	ldr	r1, [pc, #36]	; (8008008 <UARTEx_SetNbDataToProcess+0x94>)
 8007fe2:	5c8a      	ldrb	r2, [r1, r2]
 8007fe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fe8:	7b7a      	ldrb	r2, [r7, #13]
 8007fea:	4908      	ldr	r1, [pc, #32]	; (800800c <UARTEx_SetNbDataToProcess+0x98>)
 8007fec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	08008cc0 	.word	0x08008cc0
 800800c:	08008cc8 	.word	0x08008cc8

08008010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
int main(void)
 8008016:	f107 0310 	add.w	r3, r7, #16
 800801a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800801c:	f7f8 faf8 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008020:	f000 f816 	bl	8008050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008024:	f000 fa1c 	bl	8008460 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8008028:	f000 f9c6 	bl	80083b8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800802c:	f000 fa10 	bl	8008450 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8008030:	f000 f87e 	bl	8008130 <MX_ADC1_Init>
  MX_TIM2_Init();
 8008034:	f000 f94a 	bl	80082cc <MX_TIM2_Init>
  MX_SPI1_Init();
 8008038:	f000 f8f2 	bl	8008220 <MX_SPI1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 800803c:	2101      	movs	r1, #1
 800803e:	4803      	ldr	r0, [pc, #12]	; (800804c <main+0x3c>)
 8008040:	f7fa f9b1 	bl	80023a6 <HAL_GPIO_TogglePin>
	      }
	      return hal_status;
	  }


	  HAL_Delay (100);   /* Insert delay 100 ms */
 8008044:	2064      	movs	r0, #100	; 0x64
 8008046:	f7f8 fb75 	bl	8000734 <HAL_Delay>
  {
 800804a:	e7f7      	b.n	800803c <main+0x2c>
 800804c:	58020400 	.word	0x58020400

08008050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b09c      	sub	sp, #112	; 0x70
 8008054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805a:	224c      	movs	r2, #76	; 0x4c
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fe0e 	bl	8008c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008064:	1d3b      	adds	r3, r7, #4
 8008066:	2220      	movs	r2, #32
 8008068:	2100      	movs	r1, #0
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fe08 	bl	8008c80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008070:	2002      	movs	r0, #2
 8008072:	f7fa f9b3 	bl	80023dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008076:	2300      	movs	r3, #0
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	4b2c      	ldr	r3, [pc, #176]	; (800812c <SystemClock_Config+0xdc>)
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	4a2b      	ldr	r2, [pc, #172]	; (800812c <SystemClock_Config+0xdc>)
 8008080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008084:	6193      	str	r3, [r2, #24]
 8008086:	4b29      	ldr	r3, [pc, #164]	; (800812c <SystemClock_Config+0xdc>)
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008092:	bf00      	nop
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <SystemClock_Config+0xdc>)
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800809c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a0:	d1f8      	bne.n	8008094 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80080a2:	2321      	movs	r3, #33	; 0x21
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80080a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80080aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80080ac:	2301      	movs	r3, #1
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080b0:	2302      	movs	r3, #2
 80080b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080b4:	2302      	movs	r3, #2
 80080b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80080b8:	2304      	movs	r3, #4
 80080ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80080bc:	f240 1313 	movw	r3, #275	; 0x113
 80080c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80080c2:	2301      	movs	r3, #1
 80080c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80080c6:	2304      	movs	r3, #4
 80080c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80080ca:	2302      	movs	r3, #2
 80080cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80080ce:	2304      	movs	r3, #4
 80080d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fa f9b6 	bl	8002450 <HAL_RCC_OscConfig>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80080ea:	f000 faf7 	bl	80086dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080ee:	233f      	movs	r3, #63	; 0x3f
 80080f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080f2:	2303      	movs	r3, #3
 80080f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80080fa:	2308      	movs	r3, #8
 80080fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008102:	2340      	movs	r3, #64	; 0x40
 8008104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008110:	1d3b      	adds	r3, r7, #4
 8008112:	2103      	movs	r1, #3
 8008114:	4618      	mov	r0, r3
 8008116:	f7fa fd75 	bl	8002c04 <HAL_RCC_ClockConfig>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008120:	f000 fadc 	bl	80086dc <Error_Handler>
  }
}
 8008124:	bf00      	nop
 8008126:	3770      	adds	r7, #112	; 0x70
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	58024800 	.word	0x58024800

08008130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08c      	sub	sp, #48	; 0x30
 8008134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008142:	463b      	mov	r3, r7
 8008144:	2224      	movs	r2, #36	; 0x24
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fd99 	bl	8008c80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008150:	4a31      	ldr	r2, [pc, #196]	; (8008218 <MX_ADC1_Init+0xe8>)
 8008152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008154:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008156:	2200      	movs	r2, #0
 8008158:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800815a:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <MX_ADC1_Init+0xe4>)
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008160:	4b2c      	ldr	r3, [pc, #176]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008162:	2200      	movs	r2, #0
 8008164:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008166:	4b2b      	ldr	r3, [pc, #172]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008168:	2204      	movs	r2, #4
 800816a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800816c:	4b29      	ldr	r3, [pc, #164]	; (8008214 <MX_ADC1_Init+0xe4>)
 800816e:	2200      	movs	r2, #0
 8008170:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008172:	4b28      	ldr	r3, [pc, #160]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008174:	2200      	movs	r2, #0
 8008176:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8008178:	4b26      	ldr	r3, [pc, #152]	; (8008214 <MX_ADC1_Init+0xe4>)
 800817a:	2201      	movs	r2, #1
 800817c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800817e:	4b25      	ldr	r3, [pc, #148]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008186:	4b23      	ldr	r3, [pc, #140]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008188:	2200      	movs	r2, #0
 800818a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800818c:	4b21      	ldr	r3, [pc, #132]	; (8008214 <MX_ADC1_Init+0xe4>)
 800818e:	2200      	movs	r2, #0
 8008190:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8008192:	4b20      	ldr	r3, [pc, #128]	; (8008214 <MX_ADC1_Init+0xe4>)
 8008194:	2200      	movs	r2, #0
 8008196:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <MX_ADC1_Init+0xe4>)
 800819a:	2200      	movs	r2, #0
 800819c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800819e:	4b1d      	ldr	r3, [pc, #116]	; (8008214 <MX_ADC1_Init+0xe4>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80081a4:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <MX_ADC1_Init+0xe4>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80081ac:	4819      	ldr	r0, [pc, #100]	; (8008214 <MX_ADC1_Init+0xe4>)
 80081ae:	f7f8 fd2b 	bl	8000c08 <HAL_ADC_Init>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80081b8:	f000 fa90 	bl	80086dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80081bc:	2300      	movs	r3, #0
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80081c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081c4:	4619      	mov	r1, r3
 80081c6:	4813      	ldr	r0, [pc, #76]	; (8008214 <MX_ADC1_Init+0xe4>)
 80081c8:	f7f9 fd66 	bl	8001c98 <HAL_ADCEx_MultiModeConfigChannel>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80081d2:	f000 fa83 	bl	80086dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80081d6:	4b11      	ldr	r3, [pc, #68]	; (800821c <MX_ADC1_Init+0xec>)
 80081d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80081da:	2306      	movs	r3, #6
 80081dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80081de:	2300      	movs	r3, #0
 80081e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80081e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80081e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80081e8:	2304      	movs	r3, #4
 80081ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081f6:	463b      	mov	r3, r7
 80081f8:	4619      	mov	r1, r3
 80081fa:	4806      	ldr	r0, [pc, #24]	; (8008214 <MX_ADC1_Init+0xe4>)
 80081fc:	f7f8 ff0c 	bl	8001018 <HAL_ADC_ConfigChannel>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8008206:	f000 fa69 	bl	80086dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800820a:	bf00      	nop
 800820c:	3730      	adds	r7, #48	; 0x30
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	24000030 	.word	0x24000030
 8008218:	40022000 	.word	0x40022000
 800821c:	14f00020 	.word	0x14f00020

08008220 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008224:	4b27      	ldr	r3, [pc, #156]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008226:	4a28      	ldr	r2, [pc, #160]	; (80082c8 <MX_SPI1_Init+0xa8>)
 8008228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800822a:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800822c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008232:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008234:	2200      	movs	r2, #0
 8008236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8008238:	4b22      	ldr	r3, [pc, #136]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800823a:	2203      	movs	r2, #3
 800823c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008240:	2200      	movs	r2, #0
 8008242:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008244:	4b1f      	ldr	r3, [pc, #124]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008246:	2200      	movs	r2, #0
 8008248:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800824a:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800824c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008250:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008254:	2200      	movs	r2, #0
 8008256:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800825a:	2200      	movs	r2, #0
 800825c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008260:	2200      	movs	r2, #0
 8008262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008264:	4b17      	ldr	r3, [pc, #92]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008266:	2200      	movs	r2, #0
 8008268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800826a:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800826c:	2200      	movs	r2, #0
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008270:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008276:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008278:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800827a:	2200      	movs	r2, #0
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800827e:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008280:	2200      	movs	r2, #0
 8008282:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008286:	2200      	movs	r2, #0
 8008288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800828a:	4b0e      	ldr	r3, [pc, #56]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800828c:	2200      	movs	r2, #0
 800828e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008290:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008292:	2200      	movs	r2, #0
 8008294:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <MX_SPI1_Init+0xa4>)
 8008298:	2200      	movs	r2, #0
 800829a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <MX_SPI1_Init+0xa4>)
 800829e:	2200      	movs	r2, #0
 80082a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <MX_SPI1_Init+0xa4>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <MX_SPI1_Init+0xa4>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80082ae:	4805      	ldr	r0, [pc, #20]	; (80082c4 <MX_SPI1_Init+0xa4>)
 80082b0:	f7fd fc1a 	bl	8005ae8 <HAL_SPI_Init>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80082ba:	f000 fa0f 	bl	80086dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80082be:	bf00      	nop
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	240000a0 	.word	0x240000a0
 80082c8:	40013000 	.word	0x40013000

080082cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08e      	sub	sp, #56	; 0x38
 80082d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	609a      	str	r2, [r3, #8]
 80082de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082e0:	f107 031c 	add.w	r3, r7, #28
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	605a      	str	r2, [r3, #4]
 80082ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082ec:	463b      	mov	r3, r7
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	609a      	str	r2, [r3, #8]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	611a      	str	r2, [r3, #16]
 80082fa:	615a      	str	r2, [r3, #20]
 80082fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80082fe:	4b2d      	ldr	r3, [pc, #180]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008306:	4b2b      	ldr	r3, [pc, #172]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008308:	2200      	movs	r2, #0
 800830a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800830c:	4b29      	ldr	r3, [pc, #164]	; (80083b4 <MX_TIM2_Init+0xe8>)
 800830e:	2200      	movs	r2, #0
 8008310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008312:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008314:	f04f 32ff 	mov.w	r2, #4294967295
 8008318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800831a:	4b26      	ldr	r3, [pc, #152]	; (80083b4 <MX_TIM2_Init+0xe8>)
 800831c:	2200      	movs	r2, #0
 800831e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008320:	4b24      	ldr	r3, [pc, #144]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008322:	2200      	movs	r2, #0
 8008324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008326:	4823      	ldr	r0, [pc, #140]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008328:	f7fd fd1d 	bl	8005d66 <HAL_TIM_Base_Init>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8008332:	f000 f9d3 	bl	80086dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800833c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008340:	4619      	mov	r1, r3
 8008342:	481c      	ldr	r0, [pc, #112]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008344:	f7fd fedc 	bl	8006100 <HAL_TIM_ConfigClockSource>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800834e:	f000 f9c5 	bl	80086dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008352:	4818      	ldr	r0, [pc, #96]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008354:	f7fd fd5e 	bl	8005e14 <HAL_TIM_PWM_Init>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800835e:	f000 f9bd 	bl	80086dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800836a:	f107 031c 	add.w	r3, r7, #28
 800836e:	4619      	mov	r1, r3
 8008370:	4810      	ldr	r0, [pc, #64]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008372:	f7fe fbd7 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800837c:	f000 f9ae 	bl	80086dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008380:	2360      	movs	r3, #96	; 0x60
 8008382:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008388:	2300      	movs	r3, #0
 800838a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008390:	463b      	mov	r3, r7
 8008392:	2200      	movs	r2, #0
 8008394:	4619      	mov	r1, r3
 8008396:	4807      	ldr	r0, [pc, #28]	; (80083b4 <MX_TIM2_Init+0xe8>)
 8008398:	f7fd fd9e 	bl	8005ed8 <HAL_TIM_PWM_ConfigChannel>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80083a2:	f000 f99b 	bl	80086dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80083a6:	4803      	ldr	r0, [pc, #12]	; (80083b4 <MX_TIM2_Init+0xe8>)
 80083a8:	f000 fad8 	bl	800895c <HAL_TIM_MspPostInit>

}
 80083ac:	bf00      	nop
 80083ae:	3738      	adds	r7, #56	; 0x38
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	24000128 	.word	0x24000128

080083b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80083bc:	4b22      	ldr	r3, [pc, #136]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083be:	4a23      	ldr	r2, [pc, #140]	; (800844c <MX_USART3_UART_Init+0x94>)
 80083c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80083c2:	4b21      	ldr	r3, [pc, #132]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80083ca:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80083d0:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80083d6:	4b1c      	ldr	r3, [pc, #112]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083d8:	2200      	movs	r2, #0
 80083da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083de:	220c      	movs	r2, #12
 80083e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083e2:	4b19      	ldr	r3, [pc, #100]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80083e8:	4b17      	ldr	r3, [pc, #92]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083ee:	4b16      	ldr	r3, [pc, #88]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083f4:	4b14      	ldr	r3, [pc, #80]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <MX_USART3_UART_Init+0x90>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008400:	4811      	ldr	r0, [pc, #68]	; (8008448 <MX_USART3_UART_Init+0x90>)
 8008402:	f7fe fc2b 	bl	8006c5c <HAL_UART_Init>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800840c:	f000 f966 	bl	80086dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008410:	2100      	movs	r1, #0
 8008412:	480d      	ldr	r0, [pc, #52]	; (8008448 <MX_USART3_UART_Init+0x90>)
 8008414:	f7ff fd31 	bl	8007e7a <HAL_UARTEx_SetTxFifoThreshold>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800841e:	f000 f95d 	bl	80086dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008422:	2100      	movs	r1, #0
 8008424:	4808      	ldr	r0, [pc, #32]	; (8008448 <MX_USART3_UART_Init+0x90>)
 8008426:	f7ff fd66 	bl	8007ef6 <HAL_UARTEx_SetRxFifoThreshold>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008430:	f000 f954 	bl	80086dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008434:	4804      	ldr	r0, [pc, #16]	; (8008448 <MX_USART3_UART_Init+0x90>)
 8008436:	f7ff fce7 	bl	8007e08 <HAL_UARTEx_DisableFifoMode>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008440:	f000 f94c 	bl	80086dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008444:	bf00      	nop
 8008446:	bd80      	pop	{r7, pc}
 8008448:	24000174 	.word	0x24000174
 800844c:	40004800 	.word	0x40004800

08008450 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08c      	sub	sp, #48	; 0x30
 8008464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008466:	f107 031c 	add.w	r3, r7, #28
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	605a      	str	r2, [r3, #4]
 8008470:	609a      	str	r2, [r3, #8]
 8008472:	60da      	str	r2, [r3, #12]
 8008474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008476:	4b92      	ldr	r3, [pc, #584]	; (80086c0 <MX_GPIO_Init+0x260>)
 8008478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800847c:	4a90      	ldr	r2, [pc, #576]	; (80086c0 <MX_GPIO_Init+0x260>)
 800847e:	f043 0304 	orr.w	r3, r3, #4
 8008482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008486:	4b8e      	ldr	r3, [pc, #568]	; (80086c0 <MX_GPIO_Init+0x260>)
 8008488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008494:	4b8a      	ldr	r3, [pc, #552]	; (80086c0 <MX_GPIO_Init+0x260>)
 8008496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800849a:	4a89      	ldr	r2, [pc, #548]	; (80086c0 <MX_GPIO_Init+0x260>)
 800849c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084a4:	4b86      	ldr	r3, [pc, #536]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b2:	4b83      	ldr	r3, [pc, #524]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084b8:	4a81      	ldr	r2, [pc, #516]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084c2:	4b7f      	ldr	r3, [pc, #508]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084d0:	4b7b      	ldr	r3, [pc, #492]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084d6:	4a7a      	ldr	r2, [pc, #488]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084e0:	4b77      	ldr	r3, [pc, #476]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084ee:	4b74      	ldr	r3, [pc, #464]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084f4:	4a72      	ldr	r2, [pc, #456]	; (80086c0 <MX_GPIO_Init+0x260>)
 80084f6:	f043 0308 	orr.w	r3, r3, #8
 80084fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084fe:	4b70      	ldr	r3, [pc, #448]	; (80086c0 <MX_GPIO_Init+0x260>)
 8008500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800850c:	4b6c      	ldr	r3, [pc, #432]	; (80086c0 <MX_GPIO_Init+0x260>)
 800850e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008512:	4a6b      	ldr	r2, [pc, #428]	; (80086c0 <MX_GPIO_Init+0x260>)
 8008514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800851c:	4b68      	ldr	r3, [pc, #416]	; (80086c0 <MX_GPIO_Init+0x260>)
 800851e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800852a:	4b65      	ldr	r3, [pc, #404]	; (80086c0 <MX_GPIO_Init+0x260>)
 800852c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008530:	4a63      	ldr	r2, [pc, #396]	; (80086c0 <MX_GPIO_Init+0x260>)
 8008532:	f043 0310 	orr.w	r3, r3, #16
 8008536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800853a:	4b61      	ldr	r3, [pc, #388]	; (80086c0 <MX_GPIO_Init+0x260>)
 800853c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8008548:	2200      	movs	r2, #0
 800854a:	f244 0101 	movw	r1, #16385	; 0x4001
 800854e:	485d      	ldr	r0, [pc, #372]	; (80086c4 <MX_GPIO_Init+0x264>)
 8008550:	f7f9 ff10 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8008554:	2200      	movs	r2, #0
 8008556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800855a:	485b      	ldr	r0, [pc, #364]	; (80086c8 <MX_GPIO_Init+0x268>)
 800855c:	f7f9 ff0a 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8008560:	2200      	movs	r2, #0
 8008562:	2102      	movs	r1, #2
 8008564:	4859      	ldr	r0, [pc, #356]	; (80086cc <MX_GPIO_Init+0x26c>)
 8008566:	f7f9 ff05 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800856a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800856e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008570:	2300      	movs	r3, #0
 8008572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008574:	2300      	movs	r3, #0
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008578:	f107 031c 	add.w	r3, r7, #28
 800857c:	4619      	mov	r1, r3
 800857e:	4854      	ldr	r0, [pc, #336]	; (80086d0 <MX_GPIO_Init+0x270>)
 8008580:	f7f9 fd50 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008584:	2332      	movs	r3, #50	; 0x32
 8008586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008588:	2302      	movs	r3, #2
 800858a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858c:	2300      	movs	r3, #0
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008590:	2300      	movs	r3, #0
 8008592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008594:	230b      	movs	r3, #11
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008598:	f107 031c 	add.w	r3, r7, #28
 800859c:	4619      	mov	r1, r3
 800859e:	484c      	ldr	r0, [pc, #304]	; (80086d0 <MX_GPIO_Init+0x270>)
 80085a0:	f7f9 fd40 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80085a4:	2306      	movs	r3, #6
 80085a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a8:	2302      	movs	r3, #2
 80085aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085b4:	230b      	movs	r3, #11
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b8:	f107 031c 	add.w	r3, r7, #28
 80085bc:	4619      	mov	r1, r3
 80085be:	4845      	ldr	r0, [pc, #276]	; (80086d4 <MX_GPIO_Init+0x274>)
 80085c0:	f7f9 fd30 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80085c4:	f244 0301 	movw	r3, #16385	; 0x4001
 80085c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ca:	2301      	movs	r3, #1
 80085cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d2:	2300      	movs	r3, #0
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085d6:	f107 031c 	add.w	r3, r7, #28
 80085da:	4619      	mov	r1, r3
 80085dc:	4839      	ldr	r0, [pc, #228]	; (80086c4 <MX_GPIO_Init+0x264>)
 80085de:	f7f9 fd21 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80085e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e8:	2302      	movs	r3, #2
 80085ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f0:	2300      	movs	r3, #0
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085f4:	230b      	movs	r3, #11
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80085f8:	f107 031c 	add.w	r3, r7, #28
 80085fc:	4619      	mov	r1, r3
 80085fe:	4831      	ldr	r0, [pc, #196]	; (80086c4 <MX_GPIO_Init+0x264>)
 8008600:	f7f9 fd10 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8008604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800860a:	2301      	movs	r3, #1
 800860c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860e:	2300      	movs	r3, #0
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008612:	2300      	movs	r3, #0
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8008616:	f107 031c 	add.w	r3, r7, #28
 800861a:	4619      	mov	r1, r3
 800861c:	482a      	ldr	r0, [pc, #168]	; (80086c8 <MX_GPIO_Init+0x268>)
 800861e:	f7f9 fd01 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008626:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800862a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862c:	2300      	movs	r3, #0
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8008630:	f107 031c 	add.w	r3, r7, #28
 8008634:	4619      	mov	r1, r3
 8008636:	4828      	ldr	r0, [pc, #160]	; (80086d8 <MX_GPIO_Init+0x278>)
 8008638:	f7f9 fcf4 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800863c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008642:	2300      	movs	r3, #0
 8008644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008646:	2300      	movs	r3, #0
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800864a:	f107 031c 	add.w	r3, r7, #28
 800864e:	4619      	mov	r1, r3
 8008650:	4820      	ldr	r0, [pc, #128]	; (80086d4 <MX_GPIO_Init+0x274>)
 8008652:	f7f9 fce7 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8008656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800865a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800865c:	2302      	movs	r3, #2
 800865e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008660:	2300      	movs	r3, #0
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008664:	2300      	movs	r3, #0
 8008666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8008668:	230a      	movs	r3, #10
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800866c:	f107 031c 	add.w	r3, r7, #28
 8008670:	4619      	mov	r1, r3
 8008672:	4818      	ldr	r0, [pc, #96]	; (80086d4 <MX_GPIO_Init+0x274>)
 8008674:	f7f9 fcd6 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008678:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800867c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867e:	2302      	movs	r3, #2
 8008680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008682:	2300      	movs	r3, #0
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008686:	2300      	movs	r3, #0
 8008688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800868a:	230b      	movs	r3, #11
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800868e:	f107 031c 	add.w	r3, r7, #28
 8008692:	4619      	mov	r1, r3
 8008694:	4810      	ldr	r0, [pc, #64]	; (80086d8 <MX_GPIO_Init+0x278>)
 8008696:	f7f9 fcc5 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800869a:	2302      	movs	r3, #2
 800869c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800869e:	2301      	movs	r3, #1
 80086a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086a6:	2300      	movs	r3, #0
 80086a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80086aa:	f107 031c 	add.w	r3, r7, #28
 80086ae:	4619      	mov	r1, r3
 80086b0:	4806      	ldr	r0, [pc, #24]	; (80086cc <MX_GPIO_Init+0x26c>)
 80086b2:	f7f9 fcb7 	bl	8002024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80086b6:	bf00      	nop
 80086b8:	3730      	adds	r7, #48	; 0x30
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	58024400 	.word	0x58024400
 80086c4:	58020400 	.word	0x58020400
 80086c8:	58020c00 	.word	0x58020c00
 80086cc:	58021000 	.word	0x58021000
 80086d0:	58020800 	.word	0x58020800
 80086d4:	58020000 	.word	0x58020000
 80086d8:	58021800 	.word	0x58021800

080086dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80086e0:	b672      	cpsid	i
}
 80086e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80086e4:	e7fe      	b.n	80086e4 <Error_Handler+0x8>
	...

080086e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <HAL_MspInit+0x30>)
 80086f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086f4:	4a08      	ldr	r2, [pc, #32]	; (8008718 <HAL_MspInit+0x30>)
 80086f6:	f043 0302 	orr.w	r3, r3, #2
 80086fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <HAL_MspInit+0x30>)
 8008700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	607b      	str	r3, [r7, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	58024400 	.word	0x58024400

0800871c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b0b8      	sub	sp, #224	; 0xe0
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	605a      	str	r2, [r3, #4]
 800872e:	609a      	str	r2, [r3, #8]
 8008730:	60da      	str	r2, [r3, #12]
 8008732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008734:	f107 0310 	add.w	r3, r7, #16
 8008738:	22b8      	movs	r2, #184	; 0xb8
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fa9f 	bl	8008c80 <memset>
  if(hadc->Instance==ADC1)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2b      	ldr	r2, [pc, #172]	; (80087f4 <HAL_ADC_MspInit+0xd8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d14f      	bne.n	80087ec <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800874c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8008758:	2301      	movs	r3, #1
 800875a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 800875c:	2318      	movs	r3, #24
 800875e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8008760:	2302      	movs	r3, #2
 8008762:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008764:	2302      	movs	r3, #2
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008768:	2302      	movs	r3, #2
 800876a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800876c:	23c0      	movs	r3, #192	; 0xc0
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008770:	2300      	movs	r3, #0
 8008772:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800877e:	f107 0310 	add.w	r3, r7, #16
 8008782:	4618      	mov	r0, r3
 8008784:	f7fa fdca 	bl	800331c <HAL_RCCEx_PeriphCLKConfig>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800878e:	f7ff ffa5 	bl	80086dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008792:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <HAL_ADC_MspInit+0xdc>)
 8008794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008798:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <HAL_ADC_MspInit+0xdc>)
 800879a:	f043 0320 	orr.w	r3, r3, #32
 800879e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80087a2:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <HAL_ADC_MspInit+0xdc>)
 80087a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087b0:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <HAL_ADC_MspInit+0xdc>)
 80087b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087b6:	4a10      	ldr	r2, [pc, #64]	; (80087f8 <HAL_ADC_MspInit+0xdc>)
 80087b8:	f043 0302 	orr.w	r3, r3, #2
 80087bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087c0:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <HAL_ADC_MspInit+0xdc>)
 80087c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	60bb      	str	r3, [r7, #8]
 80087cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80087ce:	2302      	movs	r3, #2
 80087d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087d4:	2303      	movs	r3, #3
 80087d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80087e4:	4619      	mov	r1, r3
 80087e6:	4805      	ldr	r0, [pc, #20]	; (80087fc <HAL_ADC_MspInit+0xe0>)
 80087e8:	f7f9 fc1c 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80087ec:	bf00      	nop
 80087ee:	37e0      	adds	r7, #224	; 0xe0
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40022000 	.word	0x40022000
 80087f8:	58024400 	.word	0x58024400
 80087fc:	58020400 	.word	0x58020400

08008800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b0ba      	sub	sp, #232	; 0xe8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	609a      	str	r2, [r3, #8]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008818:	f107 0318 	add.w	r3, r7, #24
 800881c:	22b8      	movs	r2, #184	; 0xb8
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fa2d 	bl	8008c80 <memset>
  if(hspi->Instance==SPI1)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a38      	ldr	r2, [pc, #224]	; (800890c <HAL_SPI_MspInit+0x10c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d168      	bne.n	8008902 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8008830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800883c:	2300      	movs	r3, #0
 800883e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008840:	f107 0318 	add.w	r3, r7, #24
 8008844:	4618      	mov	r0, r3
 8008846:	f7fa fd69 	bl	800331c <HAL_RCCEx_PeriphCLKConfig>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8008850:	f7ff ff44 	bl	80086dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008854:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <HAL_SPI_MspInit+0x110>)
 8008856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800885a:	4a2d      	ldr	r2, [pc, #180]	; (8008910 <HAL_SPI_MspInit+0x110>)
 800885c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008860:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008864:	4b2a      	ldr	r3, [pc, #168]	; (8008910 <HAL_SPI_MspInit+0x110>)
 8008866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800886a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008872:	4b27      	ldr	r3, [pc, #156]	; (8008910 <HAL_SPI_MspInit+0x110>)
 8008874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008878:	4a25      	ldr	r2, [pc, #148]	; (8008910 <HAL_SPI_MspInit+0x110>)
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008882:	4b23      	ldr	r3, [pc, #140]	; (8008910 <HAL_SPI_MspInit+0x110>)
 8008884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	613b      	str	r3, [r7, #16]
 800888e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008890:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <HAL_SPI_MspInit+0x110>)
 8008892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008896:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <HAL_SPI_MspInit+0x110>)
 8008898:	f043 0302 	orr.w	r3, r3, #2
 800889c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <HAL_SPI_MspInit+0x110>)
 80088a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80088ae:	2310      	movs	r3, #16
 80088b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088c0:	2300      	movs	r3, #0
 80088c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80088c6:	2305      	movs	r3, #5
 80088c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80088d0:	4619      	mov	r1, r3
 80088d2:	4810      	ldr	r0, [pc, #64]	; (8008914 <HAL_SPI_MspInit+0x114>)
 80088d4:	f7f9 fba6 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80088d8:	2338      	movs	r3, #56	; 0x38
 80088da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088de:	2302      	movs	r3, #2
 80088e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80088f0:	2305      	movs	r3, #5
 80088f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4806      	ldr	r0, [pc, #24]	; (8008918 <HAL_SPI_MspInit+0x118>)
 80088fe:	f7f9 fb91 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008902:	bf00      	nop
 8008904:	37e8      	adds	r7, #232	; 0xe8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40013000 	.word	0x40013000
 8008910:	58024400 	.word	0x58024400
 8008914:	58020000 	.word	0x58020000
 8008918:	58020400 	.word	0x58020400

0800891c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892c:	d10e      	bne.n	800894c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800892e:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <HAL_TIM_Base_MspInit+0x3c>)
 8008930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008934:	4a08      	ldr	r2, [pc, #32]	; (8008958 <HAL_TIM_Base_MspInit+0x3c>)
 8008936:	f043 0301 	orr.w	r3, r3, #1
 800893a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800893e:	4b06      	ldr	r3, [pc, #24]	; (8008958 <HAL_TIM_Base_MspInit+0x3c>)
 8008940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	58024400 	.word	0x58024400

0800895c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008964:	f107 030c 	add.w	r3, r7, #12
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	609a      	str	r2, [r3, #8]
 8008970:	60da      	str	r2, [r3, #12]
 8008972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897c:	d11e      	bne.n	80089bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <HAL_TIM_MspPostInit+0x68>)
 8008980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008984:	4a0f      	ldr	r2, [pc, #60]	; (80089c4 <HAL_TIM_MspPostInit+0x68>)
 8008986:	f043 0301 	orr.w	r3, r3, #1
 800898a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800898e:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <HAL_TIM_MspPostInit+0x68>)
 8008990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	60bb      	str	r3, [r7, #8]
 800899a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800899c:	2301      	movs	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a0:	2302      	movs	r3, #2
 80089a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80089ac:	2301      	movs	r3, #1
 80089ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4619      	mov	r1, r3
 80089b6:	4804      	ldr	r0, [pc, #16]	; (80089c8 <HAL_TIM_MspPostInit+0x6c>)
 80089b8:	f7f9 fb34 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80089bc:	bf00      	nop
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	58024400 	.word	0x58024400
 80089c8:	58020000 	.word	0x58020000

080089cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b0b8      	sub	sp, #224	; 0xe0
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089e4:	f107 0310 	add.w	r3, r7, #16
 80089e8:	22b8      	movs	r2, #184	; 0xb8
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f947 	bl	8008c80 <memset>
  if(huart->Instance==USART3)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a27      	ldr	r2, [pc, #156]	; (8008a94 <HAL_UART_MspInit+0xc8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d146      	bne.n	8008a8a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80089fc:	f04f 0202 	mov.w	r2, #2
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a0e:	f107 0310 	add.w	r3, r7, #16
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fa fc82 	bl	800331c <HAL_RCCEx_PeriphCLKConfig>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008a1e:	f7ff fe5d 	bl	80086dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008a22:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <HAL_UART_MspInit+0xcc>)
 8008a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a28:	4a1b      	ldr	r2, [pc, #108]	; (8008a98 <HAL_UART_MspInit+0xcc>)
 8008a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008a32:	4b19      	ldr	r3, [pc, #100]	; (8008a98 <HAL_UART_MspInit+0xcc>)
 8008a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a40:	4b15      	ldr	r3, [pc, #84]	; (8008a98 <HAL_UART_MspInit+0xcc>)
 8008a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a46:	4a14      	ldr	r2, [pc, #80]	; (8008a98 <HAL_UART_MspInit+0xcc>)
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <HAL_UART_MspInit+0xcc>)
 8008a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8008a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a66:	2302      	movs	r3, #2
 8008a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008a78:	2307      	movs	r3, #7
 8008a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008a82:	4619      	mov	r1, r3
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <HAL_UART_MspInit+0xd0>)
 8008a86:	f7f9 facd 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008a8a:	bf00      	nop
 8008a8c:	37e0      	adds	r7, #224	; 0xe0
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40004800 	.word	0x40004800
 8008a98:	58024400 	.word	0x58024400
 8008a9c:	58020c00 	.word	0x58020c00

08008aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008aa4:	e7fe      	b.n	8008aa4 <NMI_Handler+0x4>

08008aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008aaa:	e7fe      	b.n	8008aaa <HardFault_Handler+0x4>

08008aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ab0:	e7fe      	b.n	8008ab0 <MemManage_Handler+0x4>

08008ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ab6:	e7fe      	b.n	8008ab6 <BusFault_Handler+0x4>

08008ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008abc:	e7fe      	b.n	8008abc <UsageFault_Handler+0x4>

08008abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ac2:	bf00      	nop
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ad0:	bf00      	nop
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ada:	b480      	push	{r7}
 8008adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ade:	bf00      	nop
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008aec:	f7f7 fe02 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008af0:	bf00      	nop
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008af8:	4b32      	ldr	r3, [pc, #200]	; (8008bc4 <SystemInit+0xd0>)
 8008afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afe:	4a31      	ldr	r2, [pc, #196]	; (8008bc4 <SystemInit+0xd0>)
 8008b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b08:	4b2f      	ldr	r3, [pc, #188]	; (8008bc8 <SystemInit+0xd4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	2b06      	cmp	r3, #6
 8008b12:	d807      	bhi.n	8008b24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b14:	4b2c      	ldr	r3, [pc, #176]	; (8008bc8 <SystemInit+0xd4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f023 030f 	bic.w	r3, r3, #15
 8008b1c:	4a2a      	ldr	r2, [pc, #168]	; (8008bc8 <SystemInit+0xd4>)
 8008b1e:	f043 0307 	orr.w	r3, r3, #7
 8008b22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008b24:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <SystemInit+0xd8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a28      	ldr	r2, [pc, #160]	; (8008bcc <SystemInit+0xd8>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b30:	4b26      	ldr	r3, [pc, #152]	; (8008bcc <SystemInit+0xd8>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b36:	4b25      	ldr	r3, [pc, #148]	; (8008bcc <SystemInit+0xd8>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4924      	ldr	r1, [pc, #144]	; (8008bcc <SystemInit+0xd8>)
 8008b3c:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <SystemInit+0xdc>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b42:	4b21      	ldr	r3, [pc, #132]	; (8008bc8 <SystemInit+0xd4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <SystemInit+0xd4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f023 030f 	bic.w	r3, r3, #15
 8008b56:	4a1c      	ldr	r2, [pc, #112]	; (8008bc8 <SystemInit+0xd4>)
 8008b58:	f043 0307 	orr.w	r3, r3, #7
 8008b5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <SystemInit+0xd8>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008b64:	4b19      	ldr	r3, [pc, #100]	; (8008bcc <SystemInit+0xd8>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008b6a:	4b18      	ldr	r3, [pc, #96]	; (8008bcc <SystemInit+0xd8>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <SystemInit+0xd8>)
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <SystemInit+0xe0>)
 8008b74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008b76:	4b15      	ldr	r3, [pc, #84]	; (8008bcc <SystemInit+0xd8>)
 8008b78:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <SystemInit+0xe4>)
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008b7c:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <SystemInit+0xd8>)
 8008b7e:	4a17      	ldr	r2, [pc, #92]	; (8008bdc <SystemInit+0xe8>)
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008b82:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <SystemInit+0xd8>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008b88:	4b10      	ldr	r3, [pc, #64]	; (8008bcc <SystemInit+0xd8>)
 8008b8a:	4a14      	ldr	r2, [pc, #80]	; (8008bdc <SystemInit+0xe8>)
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <SystemInit+0xd8>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <SystemInit+0xd8>)
 8008b96:	4a11      	ldr	r2, [pc, #68]	; (8008bdc <SystemInit+0xe8>)
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b9a:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <SystemInit+0xd8>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <SystemInit+0xd8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a09      	ldr	r2, [pc, #36]	; (8008bcc <SystemInit+0xd8>)
 8008ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008baa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008bac:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <SystemInit+0xd8>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <SystemInit+0xec>)
 8008bb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008bb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008bba:	bf00      	nop
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	e000ed00 	.word	0xe000ed00
 8008bc8:	52002000 	.word	0x52002000
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8008bd4:	02020200 	.word	0x02020200
 8008bd8:	01ff0000 	.word	0x01ff0000
 8008bdc:	01010280 	.word	0x01010280
 8008be0:	52004000 	.word	0x52004000

08008be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008be8:	f7ff ff84 	bl	8008af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008bec:	480c      	ldr	r0, [pc, #48]	; (8008c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008bee:	490d      	ldr	r1, [pc, #52]	; (8008c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008bf0:	4a0d      	ldr	r2, [pc, #52]	; (8008c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008bf4:	e002      	b.n	8008bfc <LoopCopyDataInit>

08008bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008bfa:	3304      	adds	r3, #4

08008bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c00:	d3f9      	bcc.n	8008bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c02:	4a0a      	ldr	r2, [pc, #40]	; (8008c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008c04:	4c0a      	ldr	r4, [pc, #40]	; (8008c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c08:	e001      	b.n	8008c0e <LoopFillZerobss>

08008c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c0c:	3204      	adds	r2, #4

08008c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c10:	d3fb      	bcc.n	8008c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008c12:	f000 f811 	bl	8008c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c16:	f7ff f9fb 	bl	8008010 <main>
  bx  lr
 8008c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008c1c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008c24:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8008c28:	08008cf0 	.word	0x08008cf0
  ldr r2, =_sbss
 8008c2c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8008c30:	24000208 	.word	0x24000208

08008c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c34:	e7fe      	b.n	8008c34 <ADC3_IRQHandler>
	...

08008c38 <__libc_init_array>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	4d0d      	ldr	r5, [pc, #52]	; (8008c70 <__libc_init_array+0x38>)
 8008c3c:	4c0d      	ldr	r4, [pc, #52]	; (8008c74 <__libc_init_array+0x3c>)
 8008c3e:	1b64      	subs	r4, r4, r5
 8008c40:	10a4      	asrs	r4, r4, #2
 8008c42:	2600      	movs	r6, #0
 8008c44:	42a6      	cmp	r6, r4
 8008c46:	d109      	bne.n	8008c5c <__libc_init_array+0x24>
 8008c48:	4d0b      	ldr	r5, [pc, #44]	; (8008c78 <__libc_init_array+0x40>)
 8008c4a:	4c0c      	ldr	r4, [pc, #48]	; (8008c7c <__libc_init_array+0x44>)
 8008c4c:	f000 f820 	bl	8008c90 <_init>
 8008c50:	1b64      	subs	r4, r4, r5
 8008c52:	10a4      	asrs	r4, r4, #2
 8008c54:	2600      	movs	r6, #0
 8008c56:	42a6      	cmp	r6, r4
 8008c58:	d105      	bne.n	8008c66 <__libc_init_array+0x2e>
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
 8008c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c60:	4798      	blx	r3
 8008c62:	3601      	adds	r6, #1
 8008c64:	e7ee      	b.n	8008c44 <__libc_init_array+0xc>
 8008c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6a:	4798      	blx	r3
 8008c6c:	3601      	adds	r6, #1
 8008c6e:	e7f2      	b.n	8008c56 <__libc_init_array+0x1e>
 8008c70:	08008ce8 	.word	0x08008ce8
 8008c74:	08008ce8 	.word	0x08008ce8
 8008c78:	08008ce8 	.word	0x08008ce8
 8008c7c:	08008cec 	.word	0x08008cec

08008c80 <memset>:
 8008c80:	4402      	add	r2, r0
 8008c82:	4603      	mov	r3, r0
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d100      	bne.n	8008c8a <memset+0xa>
 8008c88:	4770      	bx	lr
 8008c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8e:	e7f9      	b.n	8008c84 <memset+0x4>

08008c90 <_init>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr

08008c9c <_fini>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr
